
Watch_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bf0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  08006d80  08006d80  00007d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fec  08006fec  00008070  2**0
                  CONTENTS
  4 .ARM          00000008  08006fec  08006fec  00007fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ff4  08006ff4  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ff4  08006ff4  00007ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ff8  08006ff8  00007ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08006ffc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008070  2**0
                  CONTENTS
 10 .bss          000002c0  20000070  20000070  00008070  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000330  20000330  00008070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b5b5  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022a9  00000000  00000000  00013655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b98  00000000  00000000  00015900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008c8  00000000  00000000  00016498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022406  00000000  00000000  00016d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000102ab  00000000  00000000  00039166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9a6f  00000000  00000000  00049411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00112e80  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000032a0  00000000  00000000  00112ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  00116164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006d68 	.word	0x08006d68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006d68 	.word	0x08006d68

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <_7SEG_GPIO_Init>:
 */

#include "7seg.h"

void _7SEG_GPIO_Init()
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIOA,D,E Periph clock enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	613b      	str	r3, [r7, #16]
 800056a:	4b6b      	ldr	r3, [pc, #428]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	4a6a      	ldr	r2, [pc, #424]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6313      	str	r3, [r2, #48]	@ 0x30
 8000576:	4b68      	ldr	r3, [pc, #416]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	613b      	str	r3, [r7, #16]
 8000580:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	4b64      	ldr	r3, [pc, #400]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	4a63      	ldr	r2, [pc, #396]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	6313      	str	r3, [r2, #48]	@ 0x30
 8000592:	4b61      	ldr	r3, [pc, #388]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	4b5d      	ldr	r3, [pc, #372]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a6:	4a5c      	ldr	r2, [pc, #368]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005a8:	f043 0308 	orr.w	r3, r3, #8
 80005ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ae:	4b5a      	ldr	r3, [pc, #360]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b2:	f003 0308 	and.w	r3, r3, #8
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	4b56      	ldr	r3, [pc, #344]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	4a55      	ldr	r2, [pc, #340]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005c4:	f043 0310 	orr.w	r3, r3, #16
 80005c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ca:	4b53      	ldr	r3, [pc, #332]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	f003 0310 	and.w	r3, r3, #16
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

	//Digit1
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_A;
 80005d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80005da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005dc:	2301      	movs	r3, #1
 80005de:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e4:	2300      	movs	r3, #0
 80005e6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIO_DGT1_A, &GPIO_InitStruct);
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	4619      	mov	r1, r3
 80005ee:	484b      	ldr	r0, [pc, #300]	@ (800071c <_7SEG_GPIO_Init+0x1bc>)
 80005f0:	f004 f816 	bl	8004620 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_B;
 80005f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005f8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_B, &GPIO_InitStruct);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4619      	mov	r1, r3
 8000600:	4847      	ldr	r0, [pc, #284]	@ (8000720 <_7SEG_GPIO_Init+0x1c0>)
 8000602:	f004 f80d 	bl	8004620 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_C;
 8000606:	2340      	movs	r3, #64	@ 0x40
 8000608:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_C, &GPIO_InitStruct);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	4842      	ldr	r0, [pc, #264]	@ (800071c <_7SEG_GPIO_Init+0x1bc>)
 8000612:	f004 f805 	bl	8004620 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_D;
 8000616:	2320      	movs	r3, #32
 8000618:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_D, &GPIO_InitStruct);
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	4619      	mov	r1, r3
 8000620:	483e      	ldr	r0, [pc, #248]	@ (800071c <_7SEG_GPIO_Init+0x1bc>)
 8000622:	f003 fffd 	bl	8004620 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_E;
 8000626:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800062a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_E, &GPIO_InitStruct);
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4619      	mov	r1, r3
 8000632:	483c      	ldr	r0, [pc, #240]	@ (8000724 <_7SEG_GPIO_Init+0x1c4>)
 8000634:	f003 fff4 	bl	8004620 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_F;
 8000638:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800063c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_F, &GPIO_InitStruct);
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	4619      	mov	r1, r3
 8000644:	4837      	ldr	r0, [pc, #220]	@ (8000724 <_7SEG_GPIO_Init+0x1c4>)
 8000646:	f003 ffeb 	bl	8004620 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_G;
 800064a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800064e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_G, &GPIO_InitStruct);
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4619      	mov	r1, r3
 8000656:	4831      	ldr	r0, [pc, #196]	@ (800071c <_7SEG_GPIO_Init+0x1bc>)
 8000658:	f003 ffe2 	bl	8004620 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_DP;
 800065c:	2380      	movs	r3, #128	@ 0x80
 800065e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_DP, &GPIO_InitStruct);
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	4619      	mov	r1, r3
 8000666:	482d      	ldr	r0, [pc, #180]	@ (800071c <_7SEG_GPIO_Init+0x1bc>)
 8000668:	f003 ffda 	bl	8004620 <HAL_GPIO_Init>

	//Digit2
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_A;
 800066c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000670:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_A, &GPIO_InitStruct);
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	4619      	mov	r1, r3
 8000678:	482b      	ldr	r0, [pc, #172]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 800067a:	f003 ffd1 	bl	8004620 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_B;
 800067e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000682:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_B, &GPIO_InitStruct);
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4619      	mov	r1, r3
 800068a:	4827      	ldr	r0, [pc, #156]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 800068c:	f003 ffc8 	bl	8004620 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_C;
 8000690:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000694:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_C, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	4822      	ldr	r0, [pc, #136]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 800069e:	f003 ffbf 	bl	8004620 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_D;
 80006a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80006a6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_D, &GPIO_InitStruct);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	481e      	ldr	r0, [pc, #120]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 80006b0:	f003 ffb6 	bl	8004620 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_E;
 80006b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006b8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_E, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	4819      	ldr	r0, [pc, #100]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 80006c2:	f003 ffad 	bl	8004620 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_F;
 80006c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006ca:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_F, &GPIO_InitStruct);
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4619      	mov	r1, r3
 80006d2:	4815      	ldr	r0, [pc, #84]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 80006d4:	f003 ffa4 	bl	8004620 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_G;
 80006d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006dc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_G, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	4810      	ldr	r0, [pc, #64]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 80006e6:	f003 ff9b 	bl	8004620 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_DP;
 80006ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80006ee:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_DP, &GPIO_InitStruct);
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4619      	mov	r1, r3
 80006f6:	480c      	ldr	r0, [pc, #48]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 80006f8:	f003 ff92 	bl	8004620 <HAL_GPIO_Init>

	
	_7SEG_SetNumber(DGT1, 0, ON);
 80006fc:	2201      	movs	r2, #1
 80006fe:	2100      	movs	r1, #0
 8000700:	2000      	movs	r0, #0
 8000702:	f000 f813 	bl	800072c <_7SEG_SetNumber>
	_7SEG_SetNumber(DGT2, 0, ON);
 8000706:	2201      	movs	r2, #1
 8000708:	2100      	movs	r1, #0
 800070a:	2001      	movs	r0, #1
 800070c:	f000 f80e 	bl	800072c <_7SEG_SetNumber>
}
 8000710:	bf00      	nop
 8000712:	3728      	adds	r7, #40	@ 0x28
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40023800 	.word	0x40023800
 800071c:	40020c00 	.word	0x40020c00
 8000720:	40020000 	.word	0x40020000
 8000724:	40020800 	.word	0x40020800
 8000728:	40021000 	.word	0x40021000

0800072c <_7SEG_SetNumber>:


void _7SEG_SetNumber(int dgt, int num, int dp)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
	if(dgt == DGT1)
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	2b00      	cmp	r3, #0
 800073c:	f040 81dc 	bne.w	8000af8 <_7SEG_SetNumber+0x3cc>
	{
		switch(num%10)
 8000740:	68b9      	ldr	r1, [r7, #8]
 8000742:	4bcb      	ldr	r3, [pc, #812]	@ (8000a70 <_7SEG_SetNumber+0x344>)
 8000744:	fb83 2301 	smull	r2, r3, r3, r1
 8000748:	109a      	asrs	r2, r3, #2
 800074a:	17cb      	asrs	r3, r1, #31
 800074c:	1ad2      	subs	r2, r2, r3
 800074e:	4613      	mov	r3, r2
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	4413      	add	r3, r2
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	1aca      	subs	r2, r1, r3
 8000758:	2a09      	cmp	r2, #9
 800075a:	f200 81ba 	bhi.w	8000ad2 <_7SEG_SetNumber+0x3a6>
 800075e:	a301      	add	r3, pc, #4	@ (adr r3, 8000764 <_7SEG_SetNumber+0x38>)
 8000760:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8000764:	0800078d 	.word	0x0800078d
 8000768:	080007df 	.word	0x080007df
 800076c:	08000831 	.word	0x08000831
 8000770:	08000883 	.word	0x08000883
 8000774:	080008d5 	.word	0x080008d5
 8000778:	08000927 	.word	0x08000927
 800077c:	08000979 	.word	0x08000979
 8000780:	080009cb 	.word	0x080009cb
 8000784:	08000a1d 	.word	0x08000a1d
 8000788:	08000a81 	.word	0x08000a81
		{
			case 0: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON;
 800078c:	2200      	movs	r2, #0
 800078e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000792:	48b8      	ldr	r0, [pc, #736]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000794:	f004 f8f8 	bl	8004988 <HAL_GPIO_WritePin>
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800079e:	48b6      	ldr	r0, [pc, #728]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 80007a0:	f004 f8f2 	bl	8004988 <HAL_GPIO_WritePin>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2140      	movs	r1, #64	@ 0x40
 80007a8:	48b2      	ldr	r0, [pc, #712]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80007aa:	f004 f8ed 	bl	8004988 <HAL_GPIO_WritePin>
 80007ae:	2200      	movs	r2, #0
 80007b0:	2120      	movs	r1, #32
 80007b2:	48b0      	ldr	r0, [pc, #704]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80007b4:	f004 f8e8 	bl	8004988 <HAL_GPIO_WritePin>
 80007b8:	2200      	movs	r2, #0
 80007ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007be:	48af      	ldr	r0, [pc, #700]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80007c0:	f004 f8e2 	bl	8004988 <HAL_GPIO_WritePin>
 80007c4:	2200      	movs	r2, #0
 80007c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ca:	48ac      	ldr	r0, [pc, #688]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80007cc:	f004 f8dc 	bl	8004988 <HAL_GPIO_WritePin>
					DGT1_G_OFF;
 80007d0:	2201      	movs	r2, #1
 80007d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007d6:	48a7      	ldr	r0, [pc, #668]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80007d8:	f004 f8d6 	bl	8004988 <HAL_GPIO_WritePin>
				break;
 80007dc:	e179      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 1: DGT1_B_ON; DGT1_C_ON;
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007e4:	48a4      	ldr	r0, [pc, #656]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 80007e6:	f004 f8cf 	bl	8004988 <HAL_GPIO_WritePin>
 80007ea:	2200      	movs	r2, #0
 80007ec:	2140      	movs	r1, #64	@ 0x40
 80007ee:	48a1      	ldr	r0, [pc, #644]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80007f0:	f004 f8ca 	bl	8004988 <HAL_GPIO_WritePin>
					DGT1_A_OFF; DGT1_D_OFF; DGT1_E_OFF; DGT1_F_OFF; DGT1_G_OFF;
 80007f4:	2201      	movs	r2, #1
 80007f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007fa:	489e      	ldr	r0, [pc, #632]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80007fc:	f004 f8c4 	bl	8004988 <HAL_GPIO_WritePin>
 8000800:	2201      	movs	r2, #1
 8000802:	2120      	movs	r1, #32
 8000804:	489b      	ldr	r0, [pc, #620]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000806:	f004 f8bf 	bl	8004988 <HAL_GPIO_WritePin>
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000810:	489a      	ldr	r0, [pc, #616]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000812:	f004 f8b9 	bl	8004988 <HAL_GPIO_WritePin>
 8000816:	2201      	movs	r2, #1
 8000818:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800081c:	4897      	ldr	r0, [pc, #604]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 800081e:	f004 f8b3 	bl	8004988 <HAL_GPIO_WritePin>
 8000822:	2201      	movs	r2, #1
 8000824:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000828:	4892      	ldr	r0, [pc, #584]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800082a:	f004 f8ad 	bl	8004988 <HAL_GPIO_WritePin>
				break;
 800082e:	e150      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 2: DGT1_A_ON; DGT1_B_ON; DGT1_G_ON; DGT1_E_ON; DGT1_D_ON;
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000836:	488f      	ldr	r0, [pc, #572]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000838:	f004 f8a6 	bl	8004988 <HAL_GPIO_WritePin>
 800083c:	2200      	movs	r2, #0
 800083e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000842:	488d      	ldr	r0, [pc, #564]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 8000844:	f004 f8a0 	bl	8004988 <HAL_GPIO_WritePin>
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800084e:	4889      	ldr	r0, [pc, #548]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000850:	f004 f89a 	bl	8004988 <HAL_GPIO_WritePin>
 8000854:	2200      	movs	r2, #0
 8000856:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800085a:	4888      	ldr	r0, [pc, #544]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 800085c:	f004 f894 	bl	8004988 <HAL_GPIO_WritePin>
 8000860:	2200      	movs	r2, #0
 8000862:	2120      	movs	r1, #32
 8000864:	4883      	ldr	r0, [pc, #524]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000866:	f004 f88f 	bl	8004988 <HAL_GPIO_WritePin>
					DGT1_C_OFF; DGT1_F_OFF;
 800086a:	2201      	movs	r2, #1
 800086c:	2140      	movs	r1, #64	@ 0x40
 800086e:	4881      	ldr	r0, [pc, #516]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000870:	f004 f88a 	bl	8004988 <HAL_GPIO_WritePin>
 8000874:	2201      	movs	r2, #1
 8000876:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800087a:	4880      	ldr	r0, [pc, #512]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 800087c:	f004 f884 	bl	8004988 <HAL_GPIO_WritePin>
				break;
 8000880:	e127      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 3: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_G_ON;
 8000882:	2200      	movs	r2, #0
 8000884:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000888:	487a      	ldr	r0, [pc, #488]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800088a:	f004 f87d 	bl	8004988 <HAL_GPIO_WritePin>
 800088e:	2200      	movs	r2, #0
 8000890:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000894:	4878      	ldr	r0, [pc, #480]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 8000896:	f004 f877 	bl	8004988 <HAL_GPIO_WritePin>
 800089a:	2200      	movs	r2, #0
 800089c:	2140      	movs	r1, #64	@ 0x40
 800089e:	4875      	ldr	r0, [pc, #468]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80008a0:	f004 f872 	bl	8004988 <HAL_GPIO_WritePin>
 80008a4:	2200      	movs	r2, #0
 80008a6:	2120      	movs	r1, #32
 80008a8:	4872      	ldr	r0, [pc, #456]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80008aa:	f004 f86d 	bl	8004988 <HAL_GPIO_WritePin>
 80008ae:	2200      	movs	r2, #0
 80008b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008b4:	486f      	ldr	r0, [pc, #444]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80008b6:	f004 f867 	bl	8004988 <HAL_GPIO_WritePin>
					DGT1_E_OFF; DGT1_F_OFF;
 80008ba:	2201      	movs	r2, #1
 80008bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008c0:	486e      	ldr	r0, [pc, #440]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80008c2:	f004 f861 	bl	8004988 <HAL_GPIO_WritePin>
 80008c6:	2201      	movs	r2, #1
 80008c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008cc:	486b      	ldr	r0, [pc, #428]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80008ce:	f004 f85b 	bl	8004988 <HAL_GPIO_WritePin>
				break;
 80008d2:	e0fe      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 4: DGT1_F_ON; DGT1_G_ON; DGT1_B_ON; DGT1_C_ON;
 80008d4:	2200      	movs	r2, #0
 80008d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008da:	4868      	ldr	r0, [pc, #416]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80008dc:	f004 f854 	bl	8004988 <HAL_GPIO_WritePin>
 80008e0:	2200      	movs	r2, #0
 80008e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008e6:	4863      	ldr	r0, [pc, #396]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80008e8:	f004 f84e 	bl	8004988 <HAL_GPIO_WritePin>
 80008ec:	2200      	movs	r2, #0
 80008ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008f2:	4861      	ldr	r0, [pc, #388]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 80008f4:	f004 f848 	bl	8004988 <HAL_GPIO_WritePin>
 80008f8:	2200      	movs	r2, #0
 80008fa:	2140      	movs	r1, #64	@ 0x40
 80008fc:	485d      	ldr	r0, [pc, #372]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80008fe:	f004 f843 	bl	8004988 <HAL_GPIO_WritePin>
					DGT1_A_OFF; DGT1_D_OFF; DGT1_E_OFF;
 8000902:	2201      	movs	r2, #1
 8000904:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000908:	485a      	ldr	r0, [pc, #360]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800090a:	f004 f83d 	bl	8004988 <HAL_GPIO_WritePin>
 800090e:	2201      	movs	r2, #1
 8000910:	2120      	movs	r1, #32
 8000912:	4858      	ldr	r0, [pc, #352]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000914:	f004 f838 	bl	8004988 <HAL_GPIO_WritePin>
 8000918:	2201      	movs	r2, #1
 800091a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800091e:	4857      	ldr	r0, [pc, #348]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000920:	f004 f832 	bl	8004988 <HAL_GPIO_WritePin>
				break;
 8000924:	e0d5      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 5: DGT1_A_ON; DGT1_F_ON; DGT1_G_ON; DGT1_C_ON; DGT1_D_ON;
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800092c:	4851      	ldr	r0, [pc, #324]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800092e:	f004 f82b 	bl	8004988 <HAL_GPIO_WritePin>
 8000932:	2200      	movs	r2, #0
 8000934:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000938:	4850      	ldr	r0, [pc, #320]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 800093a:	f004 f825 	bl	8004988 <HAL_GPIO_WritePin>
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000944:	484b      	ldr	r0, [pc, #300]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000946:	f004 f81f 	bl	8004988 <HAL_GPIO_WritePin>
 800094a:	2200      	movs	r2, #0
 800094c:	2140      	movs	r1, #64	@ 0x40
 800094e:	4849      	ldr	r0, [pc, #292]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000950:	f004 f81a 	bl	8004988 <HAL_GPIO_WritePin>
 8000954:	2200      	movs	r2, #0
 8000956:	2120      	movs	r1, #32
 8000958:	4846      	ldr	r0, [pc, #280]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800095a:	f004 f815 	bl	8004988 <HAL_GPIO_WritePin>
					DGT1_B_OFF; DGT1_E_OFF;
 800095e:	2201      	movs	r2, #1
 8000960:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000964:	4844      	ldr	r0, [pc, #272]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 8000966:	f004 f80f 	bl	8004988 <HAL_GPIO_WritePin>
 800096a:	2201      	movs	r2, #1
 800096c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000970:	4842      	ldr	r0, [pc, #264]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000972:	f004 f809 	bl	8004988 <HAL_GPIO_WritePin>
				break;
 8000976:	e0ac      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 6: DGT1_A_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON; DGT1_G_ON;
 8000978:	2200      	movs	r2, #0
 800097a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800097e:	483d      	ldr	r0, [pc, #244]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000980:	f004 f802 	bl	8004988 <HAL_GPIO_WritePin>
 8000984:	2200      	movs	r2, #0
 8000986:	2140      	movs	r1, #64	@ 0x40
 8000988:	483a      	ldr	r0, [pc, #232]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800098a:	f003 fffd 	bl	8004988 <HAL_GPIO_WritePin>
 800098e:	2200      	movs	r2, #0
 8000990:	2120      	movs	r1, #32
 8000992:	4838      	ldr	r0, [pc, #224]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000994:	f003 fff8 	bl	8004988 <HAL_GPIO_WritePin>
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800099e:	4837      	ldr	r0, [pc, #220]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80009a0:	f003 fff2 	bl	8004988 <HAL_GPIO_WritePin>
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009aa:	4834      	ldr	r0, [pc, #208]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80009ac:	f003 ffec 	bl	8004988 <HAL_GPIO_WritePin>
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009b6:	482f      	ldr	r0, [pc, #188]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80009b8:	f003 ffe6 	bl	8004988 <HAL_GPIO_WritePin>
					DGT1_B_OFF;
 80009bc:	2201      	movs	r2, #1
 80009be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009c2:	482d      	ldr	r0, [pc, #180]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 80009c4:	f003 ffe0 	bl	8004988 <HAL_GPIO_WritePin>
				break;
 80009c8:	e083      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 7: DGT1_F_ON; DGT1_A_ON; DGT1_B_ON; DGT1_C_ON;
 80009ca:	2200      	movs	r2, #0
 80009cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009d0:	482a      	ldr	r0, [pc, #168]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80009d2:	f003 ffd9 	bl	8004988 <HAL_GPIO_WritePin>
 80009d6:	2200      	movs	r2, #0
 80009d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009dc:	4825      	ldr	r0, [pc, #148]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80009de:	f003 ffd3 	bl	8004988 <HAL_GPIO_WritePin>
 80009e2:	2200      	movs	r2, #0
 80009e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009e8:	4823      	ldr	r0, [pc, #140]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 80009ea:	f003 ffcd 	bl	8004988 <HAL_GPIO_WritePin>
 80009ee:	2200      	movs	r2, #0
 80009f0:	2140      	movs	r1, #64	@ 0x40
 80009f2:	4820      	ldr	r0, [pc, #128]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80009f4:	f003 ffc8 	bl	8004988 <HAL_GPIO_WritePin>
					DGT1_D_OFF; DGT1_E_OFF; DGT1_G_OFF;
 80009f8:	2201      	movs	r2, #1
 80009fa:	2120      	movs	r1, #32
 80009fc:	481d      	ldr	r0, [pc, #116]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80009fe:	f003 ffc3 	bl	8004988 <HAL_GPIO_WritePin>
 8000a02:	2201      	movs	r2, #1
 8000a04:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a08:	481c      	ldr	r0, [pc, #112]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000a0a:	f003 ffbd 	bl	8004988 <HAL_GPIO_WritePin>
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a14:	4817      	ldr	r0, [pc, #92]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000a16:	f003 ffb7 	bl	8004988 <HAL_GPIO_WritePin>
				break;
 8000a1a:	e05a      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 8: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON; DGT1_G_ON;
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a22:	4814      	ldr	r0, [pc, #80]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000a24:	f003 ffb0 	bl	8004988 <HAL_GPIO_WritePin>
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a2e:	4812      	ldr	r0, [pc, #72]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 8000a30:	f003 ffaa 	bl	8004988 <HAL_GPIO_WritePin>
 8000a34:	2200      	movs	r2, #0
 8000a36:	2140      	movs	r1, #64	@ 0x40
 8000a38:	480e      	ldr	r0, [pc, #56]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000a3a:	f003 ffa5 	bl	8004988 <HAL_GPIO_WritePin>
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2120      	movs	r1, #32
 8000a42:	480c      	ldr	r0, [pc, #48]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000a44:	f003 ffa0 	bl	8004988 <HAL_GPIO_WritePin>
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a4e:	480b      	ldr	r0, [pc, #44]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000a50:	f003 ff9a 	bl	8004988 <HAL_GPIO_WritePin>
 8000a54:	2200      	movs	r2, #0
 8000a56:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a5a:	4808      	ldr	r0, [pc, #32]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000a5c:	f003 ff94 	bl	8004988 <HAL_GPIO_WritePin>
 8000a60:	2200      	movs	r2, #0
 8000a62:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a66:	4803      	ldr	r0, [pc, #12]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000a68:	f003 ff8e 	bl	8004988 <HAL_GPIO_WritePin>
				break;
 8000a6c:	e031      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
 8000a6e:	bf00      	nop
 8000a70:	66666667 	.word	0x66666667
 8000a74:	40020c00 	.word	0x40020c00
 8000a78:	40020000 	.word	0x40020000
 8000a7c:	40020800 	.word	0x40020800
			case 9: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_F_ON; DGT1_G_ON;
 8000a80:	2200      	movs	r2, #0
 8000a82:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a86:	48c8      	ldr	r0, [pc, #800]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000a88:	f003 ff7e 	bl	8004988 <HAL_GPIO_WritePin>
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a92:	48c6      	ldr	r0, [pc, #792]	@ (8000dac <_7SEG_SetNumber+0x680>)
 8000a94:	f003 ff78 	bl	8004988 <HAL_GPIO_WritePin>
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2140      	movs	r1, #64	@ 0x40
 8000a9c:	48c2      	ldr	r0, [pc, #776]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000a9e:	f003 ff73 	bl	8004988 <HAL_GPIO_WritePin>
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2120      	movs	r1, #32
 8000aa6:	48c0      	ldr	r0, [pc, #768]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000aa8:	f003 ff6e 	bl	8004988 <HAL_GPIO_WritePin>
 8000aac:	2200      	movs	r2, #0
 8000aae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ab2:	48bf      	ldr	r0, [pc, #764]	@ (8000db0 <_7SEG_SetNumber+0x684>)
 8000ab4:	f003 ff68 	bl	8004988 <HAL_GPIO_WritePin>
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000abe:	48ba      	ldr	r0, [pc, #744]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000ac0:	f003 ff62 	bl	8004988 <HAL_GPIO_WritePin>
					DGT1_E_OFF;
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000aca:	48b9      	ldr	r0, [pc, #740]	@ (8000db0 <_7SEG_SetNumber+0x684>)
 8000acc:	f003 ff5c 	bl	8004988 <HAL_GPIO_WritePin>
				break;
 8000ad0:	bf00      	nop
		}

		if(dp == ON)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d105      	bne.n	8000ae4 <_7SEG_SetNumber+0x3b8>
		{
			DGT1_DP_ON;
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2180      	movs	r1, #128	@ 0x80
 8000adc:	48b2      	ldr	r0, [pc, #712]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000ade:	f003 ff53 	bl	8004988 <HAL_GPIO_WritePin>
		else if(dp == OFF)
		{
			DGT2_DP_OFF;
		}
	}
}
 8000ae2:	e1ff      	b.n	8000ee4 <_7SEG_SetNumber+0x7b8>
		else if(dp == OFF)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f040 81fc 	bne.w	8000ee4 <_7SEG_SetNumber+0x7b8>
			DGT1_DP_OFF;
 8000aec:	2201      	movs	r2, #1
 8000aee:	2180      	movs	r1, #128	@ 0x80
 8000af0:	48ad      	ldr	r0, [pc, #692]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000af2:	f003 ff49 	bl	8004988 <HAL_GPIO_WritePin>
}
 8000af6:	e1f5      	b.n	8000ee4 <_7SEG_SetNumber+0x7b8>
	else if(dgt == DGT2)
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	f040 81f2 	bne.w	8000ee4 <_7SEG_SetNumber+0x7b8>
		switch(num%10)
 8000b00:	68b9      	ldr	r1, [r7, #8]
 8000b02:	4bac      	ldr	r3, [pc, #688]	@ (8000db4 <_7SEG_SetNumber+0x688>)
 8000b04:	fb83 2301 	smull	r2, r3, r3, r1
 8000b08:	109a      	asrs	r2, r3, #2
 8000b0a:	17cb      	asrs	r3, r1, #31
 8000b0c:	1ad2      	subs	r2, r2, r3
 8000b0e:	4613      	mov	r3, r2
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	4413      	add	r3, r2
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	1aca      	subs	r2, r1, r3
 8000b18:	2a09      	cmp	r2, #9
 8000b1a:	f200 81d0 	bhi.w	8000ebe <_7SEG_SetNumber+0x792>
 8000b1e:	a301      	add	r3, pc, #4	@ (adr r3, 8000b24 <_7SEG_SetNumber+0x3f8>)
 8000b20:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8000b24:	08000b4d 	.word	0x08000b4d
 8000b28:	08000ba3 	.word	0x08000ba3
 8000b2c:	08000bf9 	.word	0x08000bf9
 8000b30:	08000c4f 	.word	0x08000c4f
 8000b34:	08000ca5 	.word	0x08000ca5
 8000b38:	08000cfb 	.word	0x08000cfb
 8000b3c:	08000d51 	.word	0x08000d51
 8000b40:	08000dbd 	.word	0x08000dbd
 8000b44:	08000e13 	.word	0x08000e13
 8000b48:	08000e69 	.word	0x08000e69
			case 0: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON;
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b52:	4899      	ldr	r0, [pc, #612]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b54:	f003 ff18 	bl	8004988 <HAL_GPIO_WritePin>
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b5e:	4896      	ldr	r0, [pc, #600]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b60:	f003 ff12 	bl	8004988 <HAL_GPIO_WritePin>
 8000b64:	2200      	movs	r2, #0
 8000b66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b6a:	4893      	ldr	r0, [pc, #588]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b6c:	f003 ff0c 	bl	8004988 <HAL_GPIO_WritePin>
 8000b70:	2200      	movs	r2, #0
 8000b72:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b76:	4890      	ldr	r0, [pc, #576]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b78:	f003 ff06 	bl	8004988 <HAL_GPIO_WritePin>
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b82:	488d      	ldr	r0, [pc, #564]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b84:	f003 ff00 	bl	8004988 <HAL_GPIO_WritePin>
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b8e:	488a      	ldr	r0, [pc, #552]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b90:	f003 fefa 	bl	8004988 <HAL_GPIO_WritePin>
					DGT2_G_OFF;
 8000b94:	2201      	movs	r2, #1
 8000b96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b9a:	4887      	ldr	r0, [pc, #540]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b9c:	f003 fef4 	bl	8004988 <HAL_GPIO_WritePin>
				break;
 8000ba0:	e18d      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 1: DGT2_B_ON; DGT2_C_ON;
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ba8:	4883      	ldr	r0, [pc, #524]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000baa:	f003 feed 	bl	8004988 <HAL_GPIO_WritePin>
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bb4:	4880      	ldr	r0, [pc, #512]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000bb6:	f003 fee7 	bl	8004988 <HAL_GPIO_WritePin>
					DGT2_A_OFF; DGT2_D_OFF; DGT2_E_OFF; DGT2_F_OFF; DGT2_G_OFF;
 8000bba:	2201      	movs	r2, #1
 8000bbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bc0:	487d      	ldr	r0, [pc, #500]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000bc2:	f003 fee1 	bl	8004988 <HAL_GPIO_WritePin>
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bcc:	487a      	ldr	r0, [pc, #488]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000bce:	f003 fedb 	bl	8004988 <HAL_GPIO_WritePin>
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bd8:	4877      	ldr	r0, [pc, #476]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000bda:	f003 fed5 	bl	8004988 <HAL_GPIO_WritePin>
 8000bde:	2201      	movs	r2, #1
 8000be0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000be4:	4874      	ldr	r0, [pc, #464]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000be6:	f003 fecf 	bl	8004988 <HAL_GPIO_WritePin>
 8000bea:	2201      	movs	r2, #1
 8000bec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bf0:	4871      	ldr	r0, [pc, #452]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000bf2:	f003 fec9 	bl	8004988 <HAL_GPIO_WritePin>
				break;
 8000bf6:	e162      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 2: DGT2_A_ON; DGT2_B_ON; DGT2_G_ON; DGT2_E_ON; DGT2_D_ON;
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bfe:	486e      	ldr	r0, [pc, #440]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c00:	f003 fec2 	bl	8004988 <HAL_GPIO_WritePin>
 8000c04:	2200      	movs	r2, #0
 8000c06:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c0a:	486b      	ldr	r0, [pc, #428]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c0c:	f003 febc 	bl	8004988 <HAL_GPIO_WritePin>
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c16:	4868      	ldr	r0, [pc, #416]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c18:	f003 feb6 	bl	8004988 <HAL_GPIO_WritePin>
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c22:	4865      	ldr	r0, [pc, #404]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c24:	f003 feb0 	bl	8004988 <HAL_GPIO_WritePin>
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c2e:	4862      	ldr	r0, [pc, #392]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c30:	f003 feaa 	bl	8004988 <HAL_GPIO_WritePin>
					DGT2_C_OFF; DGT2_F_OFF;
 8000c34:	2201      	movs	r2, #1
 8000c36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c3a:	485f      	ldr	r0, [pc, #380]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c3c:	f003 fea4 	bl	8004988 <HAL_GPIO_WritePin>
 8000c40:	2201      	movs	r2, #1
 8000c42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c46:	485c      	ldr	r0, [pc, #368]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c48:	f003 fe9e 	bl	8004988 <HAL_GPIO_WritePin>
				break;
 8000c4c:	e137      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 3: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_G_ON;
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c54:	4858      	ldr	r0, [pc, #352]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c56:	f003 fe97 	bl	8004988 <HAL_GPIO_WritePin>
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c60:	4855      	ldr	r0, [pc, #340]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c62:	f003 fe91 	bl	8004988 <HAL_GPIO_WritePin>
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c6c:	4852      	ldr	r0, [pc, #328]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c6e:	f003 fe8b 	bl	8004988 <HAL_GPIO_WritePin>
 8000c72:	2200      	movs	r2, #0
 8000c74:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c78:	484f      	ldr	r0, [pc, #316]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c7a:	f003 fe85 	bl	8004988 <HAL_GPIO_WritePin>
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c84:	484c      	ldr	r0, [pc, #304]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c86:	f003 fe7f 	bl	8004988 <HAL_GPIO_WritePin>
					DGT2_E_OFF; DGT2_F_OFF;
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c90:	4849      	ldr	r0, [pc, #292]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c92:	f003 fe79 	bl	8004988 <HAL_GPIO_WritePin>
 8000c96:	2201      	movs	r2, #1
 8000c98:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c9c:	4846      	ldr	r0, [pc, #280]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c9e:	f003 fe73 	bl	8004988 <HAL_GPIO_WritePin>
				break;
 8000ca2:	e10c      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 4: DGT2_F_ON; DGT2_G_ON; DGT2_B_ON; DGT2_C_ON;
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000caa:	4843      	ldr	r0, [pc, #268]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cac:	f003 fe6c 	bl	8004988 <HAL_GPIO_WritePin>
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cb6:	4840      	ldr	r0, [pc, #256]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cb8:	f003 fe66 	bl	8004988 <HAL_GPIO_WritePin>
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cc2:	483d      	ldr	r0, [pc, #244]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cc4:	f003 fe60 	bl	8004988 <HAL_GPIO_WritePin>
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cce:	483a      	ldr	r0, [pc, #232]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cd0:	f003 fe5a 	bl	8004988 <HAL_GPIO_WritePin>
					DGT2_A_OFF; DGT2_D_OFF; DGT2_E_OFF;
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cda:	4837      	ldr	r0, [pc, #220]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cdc:	f003 fe54 	bl	8004988 <HAL_GPIO_WritePin>
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ce6:	4834      	ldr	r0, [pc, #208]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000ce8:	f003 fe4e 	bl	8004988 <HAL_GPIO_WritePin>
 8000cec:	2201      	movs	r2, #1
 8000cee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cf2:	4831      	ldr	r0, [pc, #196]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cf4:	f003 fe48 	bl	8004988 <HAL_GPIO_WritePin>
				break;
 8000cf8:	e0e1      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 5: DGT2_A_ON; DGT2_F_ON; DGT2_G_ON; DGT2_C_ON; DGT2_D_ON;
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d00:	482d      	ldr	r0, [pc, #180]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d02:	f003 fe41 	bl	8004988 <HAL_GPIO_WritePin>
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d0c:	482a      	ldr	r0, [pc, #168]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d0e:	f003 fe3b 	bl	8004988 <HAL_GPIO_WritePin>
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d18:	4827      	ldr	r0, [pc, #156]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d1a:	f003 fe35 	bl	8004988 <HAL_GPIO_WritePin>
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d24:	4824      	ldr	r0, [pc, #144]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d26:	f003 fe2f 	bl	8004988 <HAL_GPIO_WritePin>
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d30:	4821      	ldr	r0, [pc, #132]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d32:	f003 fe29 	bl	8004988 <HAL_GPIO_WritePin>
					DGT2_B_OFF; DGT2_E_OFF;
 8000d36:	2201      	movs	r2, #1
 8000d38:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d3c:	481e      	ldr	r0, [pc, #120]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d3e:	f003 fe23 	bl	8004988 <HAL_GPIO_WritePin>
 8000d42:	2201      	movs	r2, #1
 8000d44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d48:	481b      	ldr	r0, [pc, #108]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d4a:	f003 fe1d 	bl	8004988 <HAL_GPIO_WritePin>
				break;
 8000d4e:	e0b6      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 6: DGT2_A_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON; DGT2_G_ON;
 8000d50:	2200      	movs	r2, #0
 8000d52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d56:	4818      	ldr	r0, [pc, #96]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d58:	f003 fe16 	bl	8004988 <HAL_GPIO_WritePin>
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d62:	4815      	ldr	r0, [pc, #84]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d64:	f003 fe10 	bl	8004988 <HAL_GPIO_WritePin>
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d6e:	4812      	ldr	r0, [pc, #72]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d70:	f003 fe0a 	bl	8004988 <HAL_GPIO_WritePin>
 8000d74:	2200      	movs	r2, #0
 8000d76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d7a:	480f      	ldr	r0, [pc, #60]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d7c:	f003 fe04 	bl	8004988 <HAL_GPIO_WritePin>
 8000d80:	2200      	movs	r2, #0
 8000d82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d86:	480c      	ldr	r0, [pc, #48]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d88:	f003 fdfe 	bl	8004988 <HAL_GPIO_WritePin>
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d92:	4809      	ldr	r0, [pc, #36]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d94:	f003 fdf8 	bl	8004988 <HAL_GPIO_WritePin>
					DGT2_B_OFF;
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d9e:	4806      	ldr	r0, [pc, #24]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000da0:	f003 fdf2 	bl	8004988 <HAL_GPIO_WritePin>
				break;
 8000da4:	e08b      	b.n	8000ebe <_7SEG_SetNumber+0x792>
 8000da6:	bf00      	nop
 8000da8:	40020c00 	.word	0x40020c00
 8000dac:	40020000 	.word	0x40020000
 8000db0:	40020800 	.word	0x40020800
 8000db4:	66666667 	.word	0x66666667
 8000db8:	40021000 	.word	0x40021000
			case 7: DGT2_F_ON; DGT2_A_ON; DGT2_B_ON; DGT2_C_ON;
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dc2:	484a      	ldr	r0, [pc, #296]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000dc4:	f003 fde0 	bl	8004988 <HAL_GPIO_WritePin>
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dce:	4847      	ldr	r0, [pc, #284]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000dd0:	f003 fdda 	bl	8004988 <HAL_GPIO_WritePin>
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dda:	4844      	ldr	r0, [pc, #272]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000ddc:	f003 fdd4 	bl	8004988 <HAL_GPIO_WritePin>
 8000de0:	2200      	movs	r2, #0
 8000de2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000de6:	4841      	ldr	r0, [pc, #260]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000de8:	f003 fdce 	bl	8004988 <HAL_GPIO_WritePin>
					DGT2_D_OFF; DGT2_E_OFF; DGT2_G_OFF;
 8000dec:	2201      	movs	r2, #1
 8000dee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000df2:	483e      	ldr	r0, [pc, #248]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000df4:	f003 fdc8 	bl	8004988 <HAL_GPIO_WritePin>
 8000df8:	2201      	movs	r2, #1
 8000dfa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dfe:	483b      	ldr	r0, [pc, #236]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e00:	f003 fdc2 	bl	8004988 <HAL_GPIO_WritePin>
 8000e04:	2201      	movs	r2, #1
 8000e06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e0a:	4838      	ldr	r0, [pc, #224]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e0c:	f003 fdbc 	bl	8004988 <HAL_GPIO_WritePin>
				break;
 8000e10:	e055      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 8: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON; DGT2_G_ON;
 8000e12:	2200      	movs	r2, #0
 8000e14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e18:	4834      	ldr	r0, [pc, #208]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e1a:	f003 fdb5 	bl	8004988 <HAL_GPIO_WritePin>
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e24:	4831      	ldr	r0, [pc, #196]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e26:	f003 fdaf 	bl	8004988 <HAL_GPIO_WritePin>
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e30:	482e      	ldr	r0, [pc, #184]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e32:	f003 fda9 	bl	8004988 <HAL_GPIO_WritePin>
 8000e36:	2200      	movs	r2, #0
 8000e38:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e3c:	482b      	ldr	r0, [pc, #172]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e3e:	f003 fda3 	bl	8004988 <HAL_GPIO_WritePin>
 8000e42:	2200      	movs	r2, #0
 8000e44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e48:	4828      	ldr	r0, [pc, #160]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e4a:	f003 fd9d 	bl	8004988 <HAL_GPIO_WritePin>
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e54:	4825      	ldr	r0, [pc, #148]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e56:	f003 fd97 	bl	8004988 <HAL_GPIO_WritePin>
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e60:	4822      	ldr	r0, [pc, #136]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e62:	f003 fd91 	bl	8004988 <HAL_GPIO_WritePin>
				break;
 8000e66:	e02a      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 9: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_F_ON; DGT2_G_ON;
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e6e:	481f      	ldr	r0, [pc, #124]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e70:	f003 fd8a 	bl	8004988 <HAL_GPIO_WritePin>
 8000e74:	2200      	movs	r2, #0
 8000e76:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e7a:	481c      	ldr	r0, [pc, #112]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e7c:	f003 fd84 	bl	8004988 <HAL_GPIO_WritePin>
 8000e80:	2200      	movs	r2, #0
 8000e82:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e86:	4819      	ldr	r0, [pc, #100]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e88:	f003 fd7e 	bl	8004988 <HAL_GPIO_WritePin>
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e92:	4816      	ldr	r0, [pc, #88]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e94:	f003 fd78 	bl	8004988 <HAL_GPIO_WritePin>
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e9e:	4813      	ldr	r0, [pc, #76]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000ea0:	f003 fd72 	bl	8004988 <HAL_GPIO_WritePin>
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000eaa:	4810      	ldr	r0, [pc, #64]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000eac:	f003 fd6c 	bl	8004988 <HAL_GPIO_WritePin>
					DGT2_E_OFF;
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000eb6:	480d      	ldr	r0, [pc, #52]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000eb8:	f003 fd66 	bl	8004988 <HAL_GPIO_WritePin>
				break;
 8000ebc:	bf00      	nop
		if(dp == ON)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d106      	bne.n	8000ed2 <_7SEG_SetNumber+0x7a6>
			DGT2_DP_ON;
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000eca:	4808      	ldr	r0, [pc, #32]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000ecc:	f003 fd5c 	bl	8004988 <HAL_GPIO_WritePin>
}
 8000ed0:	e008      	b.n	8000ee4 <_7SEG_SetNumber+0x7b8>
		else if(dp == OFF)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d105      	bne.n	8000ee4 <_7SEG_SetNumber+0x7b8>
			DGT2_DP_OFF;
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ede:	4803      	ldr	r0, [pc, #12]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000ee0:	f003 fd52 	bl	8004988 <HAL_GPIO_WritePin>
}
 8000ee4:	bf00      	nop
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40021000 	.word	0x40021000

08000ef0 <CLCD_GPIO_Init>:
 */

#include "CLCD.h"

void CLCD_GPIO_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIOE Periph clock enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	603b      	str	r3, [r7, #0]
 8000efa:	4b23      	ldr	r3, [pc, #140]	@ (8000f88 <CLCD_GPIO_Init+0x98>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	4a22      	ldr	r2, [pc, #136]	@ (8000f88 <CLCD_GPIO_Init+0x98>)
 8000f00:	f043 0310 	orr.w	r3, r3, #16
 8000f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f06:	4b20      	ldr	r3, [pc, #128]	@ (8000f88 <CLCD_GPIO_Init+0x98>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	f003 0310 	and.w	r3, r3, #16
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]
	
	/* Configure RS, RW, EN, D4, D5, D6, D7 in output pushpull mode */
	GPIO_InitStruct.Pin = GPIO_PIN_RS;
 8000f12:	2301      	movs	r3, #1
 8000f14:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIO_RS, &GPIO_InitStruct);
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	4619      	mov	r1, r3
 8000f26:	4819      	ldr	r0, [pc, #100]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f28:	f003 fb7a 	bl	8004620 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_RW;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_RW, &GPIO_InitStruct);
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	4619      	mov	r1, r3
 8000f34:	4815      	ldr	r0, [pc, #84]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f36:	f003 fb73 	bl	8004620 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_EN;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_EN, &GPIO_InitStruct);
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	4619      	mov	r1, r3
 8000f42:	4812      	ldr	r0, [pc, #72]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f44:	f003 fb6c 	bl	8004620 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D4;
 8000f48:	2310      	movs	r3, #16
 8000f4a:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D4, &GPIO_InitStruct);
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	4619      	mov	r1, r3
 8000f50:	480e      	ldr	r0, [pc, #56]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f52:	f003 fb65 	bl	8004620 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D5;
 8000f56:	2320      	movs	r3, #32
 8000f58:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D5, &GPIO_InitStruct);
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	480b      	ldr	r0, [pc, #44]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f60:	f003 fb5e 	bl	8004620 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D6;
 8000f64:	2340      	movs	r3, #64	@ 0x40
 8000f66:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D6, &GPIO_InitStruct);
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4807      	ldr	r0, [pc, #28]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f6e:	f003 fb57 	bl	8004620 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D7;
 8000f72:	2380      	movs	r3, #128	@ 0x80
 8000f74:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D7, &GPIO_InitStruct);
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4804      	ldr	r0, [pc, #16]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f7c:	f003 fb50 	bl	8004620 <HAL_GPIO_Init>
}
 8000f80:	bf00      	nop
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40021000 	.word	0x40021000

08000f90 <CLCD_Write_Instruction>:

void CLCD_Write_Instruction(unsigned char b)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
	//���� 4��Ʈ
	GPIO_D7->ODR = (b & 0x80) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	da04      	bge.n	8000fac <CLCD_Write_Instruction+0x1c>
 8000fa2:	4b5f      	ldr	r3, [pc, #380]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000faa:	e003      	b.n	8000fb4 <CLCD_Write_Instruction+0x24>
 8000fac:	4b5c      	ldr	r3, [pc, #368]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000fb4:	4a5a      	ldr	r2, [pc, #360]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fb6:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x40) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d004      	beq.n	8000fcc <CLCD_Write_Instruction+0x3c>
 8000fc2:	4b57      	ldr	r3, [pc, #348]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fca:	e003      	b.n	8000fd4 <CLCD_Write_Instruction+0x44>
 8000fcc:	4b54      	ldr	r3, [pc, #336]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fce:	695b      	ldr	r3, [r3, #20]
 8000fd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000fd4:	4a52      	ldr	r2, [pc, #328]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fd6:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x20) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 0320 	and.w	r3, r3, #32
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d004      	beq.n	8000fec <CLCD_Write_Instruction+0x5c>
 8000fe2:	4b4f      	ldr	r3, [pc, #316]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	f043 0320 	orr.w	r3, r3, #32
 8000fea:	e003      	b.n	8000ff4 <CLCD_Write_Instruction+0x64>
 8000fec:	4b4c      	ldr	r3, [pc, #304]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	f023 0320 	bic.w	r3, r3, #32
 8000ff4:	4a4a      	ldr	r2, [pc, #296]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000ff6:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x10) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	f003 0310 	and.w	r3, r3, #16
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d004      	beq.n	800100c <CLCD_Write_Instruction+0x7c>
 8001002:	4b47      	ldr	r3, [pc, #284]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	f043 0310 	orr.w	r3, r3, #16
 800100a:	e003      	b.n	8001014 <CLCD_Write_Instruction+0x84>
 800100c:	4b44      	ldr	r3, [pc, #272]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	f023 0310 	bic.w	r3, r3, #16
 8001014:	4a42      	ldr	r2, [pc, #264]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001016:	6153      	str	r3, [r2, #20]
	
	GPIO_RS->ODR = GPIO_RS->ODR & ~GPIO_PIN_RS; //RS�� Low
 8001018:	4b41      	ldr	r3, [pc, #260]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	4a40      	ldr	r2, [pc, #256]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800101e:	f023 0301 	bic.w	r3, r3, #1
 8001022:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW�� Low
 8001024:	4b3e      	ldr	r3, [pc, #248]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001026:	695b      	ldr	r3, [r3, #20]
 8001028:	4a3d      	ldr	r2, [pc, #244]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800102a:	f023 0302 	bic.w	r3, r3, #2
 800102e:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8001030:	4b3b      	ldr	r3, [pc, #236]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	4a3a      	ldr	r2, [pc, #232]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001036:	f023 0304 	bic.w	r3, r3, #4
 800103a:	6153      	str	r3, [r2, #20]
	
	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN�� High
 800103c:	4b38      	ldr	r3, [pc, #224]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800103e:	695b      	ldr	r3, [r3, #20]
 8001040:	4a37      	ldr	r2, [pc, #220]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001042:	f043 0304 	orr.w	r3, r3, #4
 8001046:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8001048:	4b35      	ldr	r3, [pc, #212]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	4a34      	ldr	r2, [pc, #208]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800104e:	f023 0304 	bic.w	r3, r3, #4
 8001052:	6153      	str	r3, [r2, #20]
	
	//���� 4��Ʈ
	GPIO_D7->ODR = (b & 0x08) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	2b00      	cmp	r3, #0
 800105c:	d004      	beq.n	8001068 <CLCD_Write_Instruction+0xd8>
 800105e:	4b30      	ldr	r3, [pc, #192]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001066:	e003      	b.n	8001070 <CLCD_Write_Instruction+0xe0>
 8001068:	4b2d      	ldr	r3, [pc, #180]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001070:	4a2b      	ldr	r2, [pc, #172]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001072:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x04) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	2b00      	cmp	r3, #0
 800107c:	d004      	beq.n	8001088 <CLCD_Write_Instruction+0xf8>
 800107e:	4b28      	ldr	r3, [pc, #160]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001086:	e003      	b.n	8001090 <CLCD_Write_Instruction+0x100>
 8001088:	4b25      	ldr	r3, [pc, #148]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001090:	4a23      	ldr	r2, [pc, #140]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001092:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x02) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d004      	beq.n	80010a8 <CLCD_Write_Instruction+0x118>
 800109e:	4b20      	ldr	r3, [pc, #128]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	f043 0320 	orr.w	r3, r3, #32
 80010a6:	e003      	b.n	80010b0 <CLCD_Write_Instruction+0x120>
 80010a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010aa:	695b      	ldr	r3, [r3, #20]
 80010ac:	f023 0320 	bic.w	r3, r3, #32
 80010b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010b2:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x01) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d004      	beq.n	80010c8 <CLCD_Write_Instruction+0x138>
 80010be:	4b18      	ldr	r3, [pc, #96]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	f043 0310 	orr.w	r3, r3, #16
 80010c6:	e003      	b.n	80010d0 <CLCD_Write_Instruction+0x140>
 80010c8:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010ca:	695b      	ldr	r3, [r3, #20]
 80010cc:	f023 0310 	bic.w	r3, r3, #16
 80010d0:	4a13      	ldr	r2, [pc, #76]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010d2:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR & ~GPIO_PIN_RS; //RS�� Low
 80010d4:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	4a11      	ldr	r2, [pc, #68]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010da:	f023 0301 	bic.w	r3, r3, #1
 80010de:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW�� Low
 80010e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010e6:	f023 0302 	bic.w	r3, r3, #2
 80010ea:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 80010ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010ee:	695b      	ldr	r3, [r3, #20]
 80010f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010f2:	f023 0304 	bic.w	r3, r3, #4
 80010f6:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN�� High
 80010f8:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010fa:	695b      	ldr	r3, [r3, #20]
 80010fc:	4a08      	ldr	r2, [pc, #32]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8001104:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	4a05      	ldr	r2, [pc, #20]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800110a:	f023 0304 	bic.w	r3, r3, #4
 800110e:	6153      	str	r3, [r2, #20]

	HAL_Delay(1);
 8001110:	2001      	movs	r0, #1
 8001112:	f003 f94f 	bl	80043b4 <HAL_Delay>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40021000 	.word	0x40021000

08001124 <CLCD_Write_Display>:

void CLCD_Write_Display(unsigned char b)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
	//���� 4��Ʈ
	GPIO_D7->ODR = (b & 0x80) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	da04      	bge.n	8001140 <CLCD_Write_Display+0x1c>
 8001136:	4b5f      	ldr	r3, [pc, #380]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800113e:	e003      	b.n	8001148 <CLCD_Write_Display+0x24>
 8001140:	4b5c      	ldr	r3, [pc, #368]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001148:	4a5a      	ldr	r2, [pc, #360]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800114a:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x40) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001152:	2b00      	cmp	r3, #0
 8001154:	d004      	beq.n	8001160 <CLCD_Write_Display+0x3c>
 8001156:	4b57      	ldr	r3, [pc, #348]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800115e:	e003      	b.n	8001168 <CLCD_Write_Display+0x44>
 8001160:	4b54      	ldr	r3, [pc, #336]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001168:	4a52      	ldr	r2, [pc, #328]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800116a:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x20) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	f003 0320 	and.w	r3, r3, #32
 8001172:	2b00      	cmp	r3, #0
 8001174:	d004      	beq.n	8001180 <CLCD_Write_Display+0x5c>
 8001176:	4b4f      	ldr	r3, [pc, #316]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	f043 0320 	orr.w	r3, r3, #32
 800117e:	e003      	b.n	8001188 <CLCD_Write_Display+0x64>
 8001180:	4b4c      	ldr	r3, [pc, #304]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001182:	695b      	ldr	r3, [r3, #20]
 8001184:	f023 0320 	bic.w	r3, r3, #32
 8001188:	4a4a      	ldr	r2, [pc, #296]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800118a:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x10) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 0310 	and.w	r3, r3, #16
 8001192:	2b00      	cmp	r3, #0
 8001194:	d004      	beq.n	80011a0 <CLCD_Write_Display+0x7c>
 8001196:	4b47      	ldr	r3, [pc, #284]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	f043 0310 	orr.w	r3, r3, #16
 800119e:	e003      	b.n	80011a8 <CLCD_Write_Display+0x84>
 80011a0:	4b44      	ldr	r3, [pc, #272]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	f023 0310 	bic.w	r3, r3, #16
 80011a8:	4a42      	ldr	r2, [pc, #264]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011aa:	6153      	str	r3, [r2, #20]
	
	GPIO_RS->ODR = GPIO_RS->ODR | GPIO_PIN_RS; //RS�� High
 80011ac:	4b41      	ldr	r3, [pc, #260]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	4a40      	ldr	r2, [pc, #256]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW�� Low
 80011b8:	4b3e      	ldr	r3, [pc, #248]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	4a3d      	ldr	r2, [pc, #244]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011be:	f023 0302 	bic.w	r3, r3, #2
 80011c2:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 80011c4:	4b3b      	ldr	r3, [pc, #236]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	4a3a      	ldr	r2, [pc, #232]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011ca:	f023 0304 	bic.w	r3, r3, #4
 80011ce:	6153      	str	r3, [r2, #20]
	
	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN�� High
 80011d0:	4b38      	ldr	r3, [pc, #224]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	4a37      	ldr	r2, [pc, #220]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011d6:	f043 0304 	orr.w	r3, r3, #4
 80011da:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 80011dc:	4b35      	ldr	r3, [pc, #212]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	4a34      	ldr	r2, [pc, #208]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011e2:	f023 0304 	bic.w	r3, r3, #4
 80011e6:	6153      	str	r3, [r2, #20]
	
	//���� 4��Ʈ
	GPIO_D7->ODR = (b & 0x08) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d004      	beq.n	80011fc <CLCD_Write_Display+0xd8>
 80011f2:	4b30      	ldr	r3, [pc, #192]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011fa:	e003      	b.n	8001204 <CLCD_Write_Display+0xe0>
 80011fc:	4b2d      	ldr	r3, [pc, #180]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001204:	4a2b      	ldr	r2, [pc, #172]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001206:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x04) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	f003 0304 	and.w	r3, r3, #4
 800120e:	2b00      	cmp	r3, #0
 8001210:	d004      	beq.n	800121c <CLCD_Write_Display+0xf8>
 8001212:	4b28      	ldr	r3, [pc, #160]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800121a:	e003      	b.n	8001224 <CLCD_Write_Display+0x100>
 800121c:	4b25      	ldr	r3, [pc, #148]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001224:	4a23      	ldr	r2, [pc, #140]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001226:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x02) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d004      	beq.n	800123c <CLCD_Write_Display+0x118>
 8001232:	4b20      	ldr	r3, [pc, #128]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	f043 0320 	orr.w	r3, r3, #32
 800123a:	e003      	b.n	8001244 <CLCD_Write_Display+0x120>
 800123c:	4b1d      	ldr	r3, [pc, #116]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	f023 0320 	bic.w	r3, r3, #32
 8001244:	4a1b      	ldr	r2, [pc, #108]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001246:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x01) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	d004      	beq.n	800125c <CLCD_Write_Display+0x138>
 8001252:	4b18      	ldr	r3, [pc, #96]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	f043 0310 	orr.w	r3, r3, #16
 800125a:	e003      	b.n	8001264 <CLCD_Write_Display+0x140>
 800125c:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	f023 0310 	bic.w	r3, r3, #16
 8001264:	4a13      	ldr	r2, [pc, #76]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001266:	6153      	str	r3, [r2, #20]
	
	GPIO_RS->ODR = GPIO_RS->ODR | GPIO_PIN_RS; //RS�� High
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	4a11      	ldr	r2, [pc, #68]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW�� Low
 8001274:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	4a0e      	ldr	r2, [pc, #56]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800127a:	f023 0302 	bic.w	r3, r3, #2
 800127e:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8001280:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	4a0b      	ldr	r2, [pc, #44]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001286:	f023 0304 	bic.w	r3, r3, #4
 800128a:	6153      	str	r3, [r2, #20]
	
	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN�� High
 800128c:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800128e:	695b      	ldr	r3, [r3, #20]
 8001290:	4a08      	ldr	r2, [pc, #32]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001292:	f043 0304 	orr.w	r3, r3, #4
 8001296:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN�� Low
 8001298:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	4a05      	ldr	r2, [pc, #20]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800129e:	f023 0304 	bic.w	r3, r3, #4
 80012a2:	6153      	str	r3, [r2, #20]
	
	HAL_Delay(1);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f003 f885 	bl	80043b4 <HAL_Delay>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000

080012b8 <CLCD_Gotoxy>:


void CLCD_Gotoxy(unsigned char x, unsigned char y)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	460a      	mov	r2, r1
 80012c2:	71fb      	strb	r3, [r7, #7]
 80012c4:	4613      	mov	r3, r2
 80012c6:	71bb      	strb	r3, [r7, #6]
	// 16 * 2 character LCD
	switch(y)
 80012c8:	79bb      	ldrb	r3, [r7, #6]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d002      	beq.n	80012d4 <CLCD_Gotoxy+0x1c>
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d007      	beq.n	80012e2 <CLCD_Gotoxy+0x2a>
		case 0 : CLCD_Write_Instruction(0x80 + x); break;
		case 1 : CLCD_Write_Instruction(0xC0 + x); break;
		//case 2 : CLCD_Write_Instruction(0x90+x); break; //Uncomment for 16 * 4 character LCD
		//case 3 : CLCD_Write_Instruction(0xd0+x); break; //Uncomment for 16 * 4 character LCD
	}
}
 80012d2:	e00d      	b.n	80012f0 <CLCD_Gotoxy+0x38>
		case 0 : CLCD_Write_Instruction(0x80 + x); break;
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	3b80      	subs	r3, #128	@ 0x80
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fe58 	bl	8000f90 <CLCD_Write_Instruction>
 80012e0:	e006      	b.n	80012f0 <CLCD_Gotoxy+0x38>
		case 1 : CLCD_Write_Instruction(0xC0 + x); break;
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	3b40      	subs	r3, #64	@ 0x40
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fe51 	bl	8000f90 <CLCD_Write_Instruction>
 80012ee:	bf00      	nop
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <CLCD_Puts>:

void CLCD_Puts(unsigned char x, unsigned char y, unsigned char *str)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	603a      	str	r2, [r7, #0]
 8001302:	71fb      	strb	r3, [r7, #7]
 8001304:	460b      	mov	r3, r1
 8001306:	71bb      	strb	r3, [r7, #6]
	unsigned int i=0;
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]

	CLCD_Gotoxy(x,y);
 800130c:	79ba      	ldrb	r2, [r7, #6]
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ffd0 	bl	80012b8 <CLCD_Gotoxy>
	do
	{
		CLCD_Write_Display(str[i]);
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4413      	add	r3, r2
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff feff 	bl	8001124 <CLCD_Write_Display>
	}
	while(str[++i]!='\0');
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	3301      	adds	r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4413      	add	r3, r2
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1ef      	bne.n	8001318 <CLCD_Puts+0x20>
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <CLCD_Init>:

void CLCD_Init(void)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8001346:	2064      	movs	r0, #100	@ 0x64
 8001348:	f003 f834 	bl	80043b4 <HAL_Delay>
	CLCD_Write_Instruction(0x28);
 800134c:	2028      	movs	r0, #40	@ 0x28
 800134e:	f7ff fe1f 	bl	8000f90 <CLCD_Write_Instruction>
	HAL_Delay(10);
 8001352:	200a      	movs	r0, #10
 8001354:	f003 f82e 	bl	80043b4 <HAL_Delay>
	CLCD_Write_Instruction(0x28);
 8001358:	2028      	movs	r0, #40	@ 0x28
 800135a:	f7ff fe19 	bl	8000f90 <CLCD_Write_Instruction>
	HAL_Delay(10);
 800135e:	200a      	movs	r0, #10
 8001360:	f003 f828 	bl	80043b4 <HAL_Delay>
	CLCD_Write_Instruction(0x0C);
 8001364:	200c      	movs	r0, #12
 8001366:	f7ff fe13 	bl	8000f90 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x06);
 800136a:	2006      	movs	r0, #6
 800136c:	f7ff fe10 	bl	8000f90 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x02);
 8001370:	2002      	movs	r0, #2
 8001372:	f7ff fe0d 	bl	8000f90 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x01);
 8001376:	2001      	movs	r0, #1
 8001378:	f7ff fe0a 	bl	8000f90 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x01);
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff fe07 	bl	8000f90 <CLCD_Write_Instruction>
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}

08001386 <CLCD_Clear>:

void CLCD_Clear(void)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	af00      	add	r7, sp, #0
	CLCD_Write_Instruction(0x01);
 800138a:	2001      	movs	r0, #1
 800138c:	f7ff fe00 	bl	8000f90 <CLCD_Write_Instruction>
	HAL_Delay(10);
 8001390:	200a      	movs	r0, #10
 8001392:	f003 f80f 	bl	80043b4 <HAL_Delay>
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <Alarm_basic_operation>:
#include <stdio.h>
#include "variables.h"
#include "7SEG.h"
#include "CLCD.h"

void Alarm_basic_operation() {
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
	if (alarm_hour[alarm_select] >= 24) {
 80013a0:	4b13      	ldr	r3, [pc, #76]	@ (80013f0 <Alarm_basic_operation+0x54>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b13      	ldr	r3, [pc, #76]	@ (80013f4 <Alarm_basic_operation+0x58>)
 80013a8:	5c9b      	ldrb	r3, [r3, r2]
 80013aa:	2b17      	cmp	r3, #23
 80013ac:	d905      	bls.n	80013ba <Alarm_basic_operation+0x1e>
		alarm_hour[alarm_select] = 0;
 80013ae:	4b10      	ldr	r3, [pc, #64]	@ (80013f0 <Alarm_basic_operation+0x54>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	4b0f      	ldr	r3, [pc, #60]	@ (80013f4 <Alarm_basic_operation+0x58>)
 80013b6:	2100      	movs	r1, #0
 80013b8:	5499      	strb	r1, [r3, r2]
	}

	if (alarm_minute[alarm_select] >= 60) {
 80013ba:	4b0d      	ldr	r3, [pc, #52]	@ (80013f0 <Alarm_basic_operation+0x54>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	4b0d      	ldr	r3, [pc, #52]	@ (80013f8 <Alarm_basic_operation+0x5c>)
 80013c2:	5c9b      	ldrb	r3, [r3, r2]
 80013c4:	2b3b      	cmp	r3, #59	@ 0x3b
 80013c6:	d90d      	bls.n	80013e4 <Alarm_basic_operation+0x48>
		alarm_minute[alarm_select] = 0;
 80013c8:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <Alarm_basic_operation+0x54>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b0a      	ldr	r3, [pc, #40]	@ (80013f8 <Alarm_basic_operation+0x5c>)
 80013d0:	2100      	movs	r1, #0
 80013d2:	5499      	strb	r1, [r3, r2]
		alarm_hour[alarm_select]++;
 80013d4:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <Alarm_basic_operation+0x54>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4a06      	ldr	r2, [pc, #24]	@ (80013f4 <Alarm_basic_operation+0x58>)
 80013da:	5cd2      	ldrb	r2, [r2, r3]
 80013dc:	3201      	adds	r2, #1
 80013de:	b2d1      	uxtb	r1, r2
 80013e0:	4a04      	ldr	r2, [pc, #16]	@ (80013f4 <Alarm_basic_operation+0x58>)
 80013e2:	54d1      	strb	r1, [r2, r3]
	}

}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000016 	.word	0x20000016
 80013f4:	2000015c 	.word	0x2000015c
 80013f8:	20000164 	.word	0x20000164

080013fc <Alarm_display_operation>:

void Alarm_display_operation() {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0

	uint8_t displayHour = (int) alarm_hour[alarm_select] % 12;
 8001402:	4b9b      	ldr	r3, [pc, #620]	@ (8001670 <Alarm_display_operation+0x274>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	4b9a      	ldr	r3, [pc, #616]	@ (8001674 <Alarm_display_operation+0x278>)
 800140a:	5c9a      	ldrb	r2, [r3, r2]
 800140c:	4b9a      	ldr	r3, [pc, #616]	@ (8001678 <Alarm_display_operation+0x27c>)
 800140e:	fba3 1302 	umull	r1, r3, r3, r2
 8001412:	08d9      	lsrs	r1, r3, #3
 8001414:	460b      	mov	r3, r1
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	440b      	add	r3, r1
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	71fb      	strb	r3, [r7, #7]
	if (displayHour == 0) {
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <Alarm_display_operation+0x2e>
		displayHour = 12; // 0시를 12시로 변환
 8001426:	230c      	movs	r3, #12
 8001428:	71fb      	strb	r3, [r7, #7]
	}

	if (alarm_setmode) {
 800142a:	4b94      	ldr	r3, [pc, #592]	@ (800167c <Alarm_display_operation+0x280>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 80cf 	beq.w	80015d2 <Alarm_display_operation+0x1d6>
		sprintf(str, "SET");
 8001434:	4992      	ldr	r1, [pc, #584]	@ (8001680 <Alarm_display_operation+0x284>)
 8001436:	4893      	ldr	r0, [pc, #588]	@ (8001684 <Alarm_display_operation+0x288>)
 8001438:	f004 fff6 	bl	8006428 <siprintf>
		CLCD_Puts(0, 1, str);
 800143c:	4a91      	ldr	r2, [pc, #580]	@ (8001684 <Alarm_display_operation+0x288>)
 800143e:	2101      	movs	r1, #1
 8001440:	2000      	movs	r0, #0
 8001442:	f7ff ff59 	bl	80012f8 <CLCD_Puts>

		if (clock_time / 100 > 5) {
 8001446:	4b90      	ldr	r3, [pc, #576]	@ (8001688 <Alarm_display_operation+0x28c>)
 8001448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144c:	f5b2 7f16 	cmp.w	r2, #600	@ 0x258
 8001450:	f173 0300 	sbcs.w	r3, r3, #0
 8001454:	d373      	bcc.n	800153e <Alarm_display_operation+0x142>
			if (item_select3 == 0) {
 8001456:	4b8d      	ldr	r3, [pc, #564]	@ (800168c <Alarm_display_operation+0x290>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d118      	bne.n	8001490 <Alarm_display_operation+0x94>
				sprintf(str, "%02d", alarm_minute[alarm_select]);
 800145e:	4b84      	ldr	r3, [pc, #528]	@ (8001670 <Alarm_display_operation+0x274>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	461a      	mov	r2, r3
 8001464:	4b8a      	ldr	r3, [pc, #552]	@ (8001690 <Alarm_display_operation+0x294>)
 8001466:	5c9b      	ldrb	r3, [r3, r2]
 8001468:	461a      	mov	r2, r3
 800146a:	498a      	ldr	r1, [pc, #552]	@ (8001694 <Alarm_display_operation+0x298>)
 800146c:	4885      	ldr	r0, [pc, #532]	@ (8001684 <Alarm_display_operation+0x288>)
 800146e:	f004 ffdb 	bl	8006428 <siprintf>
				CLCD_Puts(14, 1, str);
 8001472:	4a84      	ldr	r2, [pc, #528]	@ (8001684 <Alarm_display_operation+0x288>)
 8001474:	2101      	movs	r1, #1
 8001476:	200e      	movs	r0, #14
 8001478:	f7ff ff3e 	bl	80012f8 <CLCD_Puts>
				sprintf(str, " ");
 800147c:	4986      	ldr	r1, [pc, #536]	@ (8001698 <Alarm_display_operation+0x29c>)
 800147e:	4881      	ldr	r0, [pc, #516]	@ (8001684 <Alarm_display_operation+0x288>)
 8001480:	f004 ffd2 	bl	8006428 <siprintf>
				CLCD_Puts(8, 0, str);
 8001484:	4a7f      	ldr	r2, [pc, #508]	@ (8001684 <Alarm_display_operation+0x288>)
 8001486:	2100      	movs	r1, #0
 8001488:	2008      	movs	r0, #8
 800148a:	f7ff ff35 	bl	80012f8 <CLCD_Puts>
 800148e:	e124      	b.n	80016da <Alarm_display_operation+0x2de>
			}

			else if (item_select3 == 1) {
 8001490:	4b7e      	ldr	r3, [pc, #504]	@ (800168c <Alarm_display_operation+0x290>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d115      	bne.n	80014c4 <Alarm_display_operation+0xc8>
				sprintf(str, "%d", alarm_select);
 8001498:	4b75      	ldr	r3, [pc, #468]	@ (8001670 <Alarm_display_operation+0x274>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	497f      	ldr	r1, [pc, #508]	@ (800169c <Alarm_display_operation+0x2a0>)
 80014a0:	4878      	ldr	r0, [pc, #480]	@ (8001684 <Alarm_display_operation+0x288>)
 80014a2:	f004 ffc1 	bl	8006428 <siprintf>
				CLCD_Puts(8, 0, str);
 80014a6:	4a77      	ldr	r2, [pc, #476]	@ (8001684 <Alarm_display_operation+0x288>)
 80014a8:	2100      	movs	r1, #0
 80014aa:	2008      	movs	r0, #8
 80014ac:	f7ff ff24 	bl	80012f8 <CLCD_Puts>
				sprintf(str, "   ");
 80014b0:	497b      	ldr	r1, [pc, #492]	@ (80016a0 <Alarm_display_operation+0x2a4>)
 80014b2:	4874      	ldr	r0, [pc, #464]	@ (8001684 <Alarm_display_operation+0x288>)
 80014b4:	f004 ffb8 	bl	8006428 <siprintf>
				CLCD_Puts(13, 0, str);
 80014b8:	4a72      	ldr	r2, [pc, #456]	@ (8001684 <Alarm_display_operation+0x288>)
 80014ba:	2100      	movs	r1, #0
 80014bc:	200d      	movs	r0, #13
 80014be:	f7ff ff1b 	bl	80012f8 <CLCD_Puts>
 80014c2:	e10a      	b.n	80016da <Alarm_display_operation+0x2de>
			}

			else if (item_select3 == 2) {
 80014c4:	4b71      	ldr	r3, [pc, #452]	@ (800168c <Alarm_display_operation+0x290>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d11e      	bne.n	800150a <Alarm_display_operation+0x10e>
				if (alarm_changed[alarm_select]) {
 80014cc:	4b68      	ldr	r3, [pc, #416]	@ (8001670 <Alarm_display_operation+0x274>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	4b74      	ldr	r3, [pc, #464]	@ (80016a4 <Alarm_display_operation+0x2a8>)
 80014d4:	5c9b      	ldrb	r3, [r3, r2]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d004      	beq.n	80014e4 <Alarm_display_operation+0xe8>
					sprintf(str, " ON");
 80014da:	4973      	ldr	r1, [pc, #460]	@ (80016a8 <Alarm_display_operation+0x2ac>)
 80014dc:	4869      	ldr	r0, [pc, #420]	@ (8001684 <Alarm_display_operation+0x288>)
 80014de:	f004 ffa3 	bl	8006428 <siprintf>
 80014e2:	e003      	b.n	80014ec <Alarm_display_operation+0xf0>
				} else {
					sprintf(str, "OFF");
 80014e4:	4971      	ldr	r1, [pc, #452]	@ (80016ac <Alarm_display_operation+0x2b0>)
 80014e6:	4867      	ldr	r0, [pc, #412]	@ (8001684 <Alarm_display_operation+0x288>)
 80014e8:	f004 ff9e 	bl	8006428 <siprintf>
				}
				CLCD_Puts(13, 0, str);
 80014ec:	4a65      	ldr	r2, [pc, #404]	@ (8001684 <Alarm_display_operation+0x288>)
 80014ee:	2100      	movs	r1, #0
 80014f0:	200d      	movs	r0, #13
 80014f2:	f7ff ff01 	bl	80012f8 <CLCD_Puts>
				sprintf(str, "  ");
 80014f6:	496e      	ldr	r1, [pc, #440]	@ (80016b0 <Alarm_display_operation+0x2b4>)
 80014f8:	4862      	ldr	r0, [pc, #392]	@ (8001684 <Alarm_display_operation+0x288>)
 80014fa:	f004 ff95 	bl	8006428 <siprintf>
				CLCD_Puts(11, 1, str);
 80014fe:	4a61      	ldr	r2, [pc, #388]	@ (8001684 <Alarm_display_operation+0x288>)
 8001500:	2101      	movs	r1, #1
 8001502:	200b      	movs	r0, #11
 8001504:	f7ff fef8 	bl	80012f8 <CLCD_Puts>
 8001508:	e0e7      	b.n	80016da <Alarm_display_operation+0x2de>
			}

			else if (item_select3 == 3) {
 800150a:	4b60      	ldr	r3, [pc, #384]	@ (800168c <Alarm_display_operation+0x290>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b03      	cmp	r3, #3
 8001510:	f040 80e3 	bne.w	80016da <Alarm_display_operation+0x2de>
				sprintf(str, "%02d", displayHour);
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	461a      	mov	r2, r3
 8001518:	495e      	ldr	r1, [pc, #376]	@ (8001694 <Alarm_display_operation+0x298>)
 800151a:	485a      	ldr	r0, [pc, #360]	@ (8001684 <Alarm_display_operation+0x288>)
 800151c:	f004 ff84 	bl	8006428 <siprintf>
				CLCD_Puts(11, 1, str);
 8001520:	4a58      	ldr	r2, [pc, #352]	@ (8001684 <Alarm_display_operation+0x288>)
 8001522:	2101      	movs	r1, #1
 8001524:	200b      	movs	r0, #11
 8001526:	f7ff fee7 	bl	80012f8 <CLCD_Puts>
				sprintf(str, "  ");
 800152a:	4961      	ldr	r1, [pc, #388]	@ (80016b0 <Alarm_display_operation+0x2b4>)
 800152c:	4855      	ldr	r0, [pc, #340]	@ (8001684 <Alarm_display_operation+0x288>)
 800152e:	f004 ff7b 	bl	8006428 <siprintf>
				CLCD_Puts(14, 1, str);
 8001532:	4a54      	ldr	r2, [pc, #336]	@ (8001684 <Alarm_display_operation+0x288>)
 8001534:	2101      	movs	r1, #1
 8001536:	200e      	movs	r0, #14
 8001538:	f7ff fede 	bl	80012f8 <CLCD_Puts>
 800153c:	e0cd      	b.n	80016da <Alarm_display_operation+0x2de>
			}
		}

		else {
			sprintf(str, "ALARM  #%d", alarm_select);
 800153e:	4b4c      	ldr	r3, [pc, #304]	@ (8001670 <Alarm_display_operation+0x274>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	461a      	mov	r2, r3
 8001544:	495b      	ldr	r1, [pc, #364]	@ (80016b4 <Alarm_display_operation+0x2b8>)
 8001546:	484f      	ldr	r0, [pc, #316]	@ (8001684 <Alarm_display_operation+0x288>)
 8001548:	f004 ff6e 	bl	8006428 <siprintf>
			CLCD_Puts(0, 0, str);
 800154c:	4a4d      	ldr	r2, [pc, #308]	@ (8001684 <Alarm_display_operation+0x288>)
 800154e:	2100      	movs	r1, #0
 8001550:	2000      	movs	r0, #0
 8001552:	f7ff fed1 	bl	80012f8 <CLCD_Puts>

			sprintf(str, "%s  ", (alarm_hour[alarm_select] < 12) ? "AM" : "PM");
 8001556:	4b46      	ldr	r3, [pc, #280]	@ (8001670 <Alarm_display_operation+0x274>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	4b45      	ldr	r3, [pc, #276]	@ (8001674 <Alarm_display_operation+0x278>)
 800155e:	5c9b      	ldrb	r3, [r3, r2]
 8001560:	2b0b      	cmp	r3, #11
 8001562:	d801      	bhi.n	8001568 <Alarm_display_operation+0x16c>
 8001564:	4b54      	ldr	r3, [pc, #336]	@ (80016b8 <Alarm_display_operation+0x2bc>)
 8001566:	e000      	b.n	800156a <Alarm_display_operation+0x16e>
 8001568:	4b54      	ldr	r3, [pc, #336]	@ (80016bc <Alarm_display_operation+0x2c0>)
 800156a:	461a      	mov	r2, r3
 800156c:	4954      	ldr	r1, [pc, #336]	@ (80016c0 <Alarm_display_operation+0x2c4>)
 800156e:	4845      	ldr	r0, [pc, #276]	@ (8001684 <Alarm_display_operation+0x288>)
 8001570:	f004 ff5a 	bl	8006428 <siprintf>
			CLCD_Puts(7, 1, str);
 8001574:	4a43      	ldr	r2, [pc, #268]	@ (8001684 <Alarm_display_operation+0x288>)
 8001576:	2101      	movs	r1, #1
 8001578:	2007      	movs	r0, #7
 800157a:	f7ff febd 	bl	80012f8 <CLCD_Puts>

			sprintf(str, "%02d:%02d", displayHour, alarm_minute[alarm_select]);
 800157e:	79fa      	ldrb	r2, [r7, #7]
 8001580:	4b3b      	ldr	r3, [pc, #236]	@ (8001670 <Alarm_display_operation+0x274>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	4b42      	ldr	r3, [pc, #264]	@ (8001690 <Alarm_display_operation+0x294>)
 8001588:	5c5b      	ldrb	r3, [r3, r1]
 800158a:	494e      	ldr	r1, [pc, #312]	@ (80016c4 <Alarm_display_operation+0x2c8>)
 800158c:	483d      	ldr	r0, [pc, #244]	@ (8001684 <Alarm_display_operation+0x288>)
 800158e:	f004 ff4b 	bl	8006428 <siprintf>
			CLCD_Puts(11, 1, str);
 8001592:	4a3c      	ldr	r2, [pc, #240]	@ (8001684 <Alarm_display_operation+0x288>)
 8001594:	2101      	movs	r1, #1
 8001596:	200b      	movs	r0, #11
 8001598:	f7ff feae 	bl	80012f8 <CLCD_Puts>

			if (alarm_changed[alarm_select]) {
 800159c:	4b34      	ldr	r3, [pc, #208]	@ (8001670 <Alarm_display_operation+0x274>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b40      	ldr	r3, [pc, #256]	@ (80016a4 <Alarm_display_operation+0x2a8>)
 80015a4:	5c9b      	ldrb	r3, [r3, r2]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d009      	beq.n	80015be <Alarm_display_operation+0x1c2>
				sprintf(str, " ON");
 80015aa:	493f      	ldr	r1, [pc, #252]	@ (80016a8 <Alarm_display_operation+0x2ac>)
 80015ac:	4835      	ldr	r0, [pc, #212]	@ (8001684 <Alarm_display_operation+0x288>)
 80015ae:	f004 ff3b 	bl	8006428 <siprintf>
				CLCD_Puts(13, 0, str);
 80015b2:	4a34      	ldr	r2, [pc, #208]	@ (8001684 <Alarm_display_operation+0x288>)
 80015b4:	2100      	movs	r1, #0
 80015b6:	200d      	movs	r0, #13
 80015b8:	f7ff fe9e 	bl	80012f8 <CLCD_Puts>
 80015bc:	e08d      	b.n	80016da <Alarm_display_operation+0x2de>
			}

			else {
				sprintf(str, "OFF");
 80015be:	493b      	ldr	r1, [pc, #236]	@ (80016ac <Alarm_display_operation+0x2b0>)
 80015c0:	4830      	ldr	r0, [pc, #192]	@ (8001684 <Alarm_display_operation+0x288>)
 80015c2:	f004 ff31 	bl	8006428 <siprintf>
				CLCD_Puts(13, 0, str);
 80015c6:	4a2f      	ldr	r2, [pc, #188]	@ (8001684 <Alarm_display_operation+0x288>)
 80015c8:	2100      	movs	r1, #0
 80015ca:	200d      	movs	r0, #13
 80015cc:	f7ff fe94 	bl	80012f8 <CLCD_Puts>
 80015d0:	e083      	b.n	80016da <Alarm_display_operation+0x2de>

		}
	}

	else {
		sprintf(str, "   ");
 80015d2:	4933      	ldr	r1, [pc, #204]	@ (80016a0 <Alarm_display_operation+0x2a4>)
 80015d4:	482b      	ldr	r0, [pc, #172]	@ (8001684 <Alarm_display_operation+0x288>)
 80015d6:	f004 ff27 	bl	8006428 <siprintf>
		CLCD_Puts(0, 1, str);
 80015da:	4a2a      	ldr	r2, [pc, #168]	@ (8001684 <Alarm_display_operation+0x288>)
 80015dc:	2101      	movs	r1, #1
 80015de:	2000      	movs	r0, #0
 80015e0:	f7ff fe8a 	bl	80012f8 <CLCD_Puts>

		sprintf(str, "ALARM  #%d", alarm_select);
 80015e4:	4b22      	ldr	r3, [pc, #136]	@ (8001670 <Alarm_display_operation+0x274>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4932      	ldr	r1, [pc, #200]	@ (80016b4 <Alarm_display_operation+0x2b8>)
 80015ec:	4825      	ldr	r0, [pc, #148]	@ (8001684 <Alarm_display_operation+0x288>)
 80015ee:	f004 ff1b 	bl	8006428 <siprintf>
		CLCD_Puts(0, 0, str);
 80015f2:	4a24      	ldr	r2, [pc, #144]	@ (8001684 <Alarm_display_operation+0x288>)
 80015f4:	2100      	movs	r1, #0
 80015f6:	2000      	movs	r0, #0
 80015f8:	f7ff fe7e 	bl	80012f8 <CLCD_Puts>

		sprintf(str, "%s  ", (alarm_hour[alarm_select] < 12) ? "AM" : "PM");
 80015fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001670 <Alarm_display_operation+0x274>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	461a      	mov	r2, r3
 8001602:	4b1c      	ldr	r3, [pc, #112]	@ (8001674 <Alarm_display_operation+0x278>)
 8001604:	5c9b      	ldrb	r3, [r3, r2]
 8001606:	2b0b      	cmp	r3, #11
 8001608:	d801      	bhi.n	800160e <Alarm_display_operation+0x212>
 800160a:	4b2b      	ldr	r3, [pc, #172]	@ (80016b8 <Alarm_display_operation+0x2bc>)
 800160c:	e000      	b.n	8001610 <Alarm_display_operation+0x214>
 800160e:	4b2b      	ldr	r3, [pc, #172]	@ (80016bc <Alarm_display_operation+0x2c0>)
 8001610:	461a      	mov	r2, r3
 8001612:	492b      	ldr	r1, [pc, #172]	@ (80016c0 <Alarm_display_operation+0x2c4>)
 8001614:	481b      	ldr	r0, [pc, #108]	@ (8001684 <Alarm_display_operation+0x288>)
 8001616:	f004 ff07 	bl	8006428 <siprintf>
		CLCD_Puts(7, 1, str);
 800161a:	4a1a      	ldr	r2, [pc, #104]	@ (8001684 <Alarm_display_operation+0x288>)
 800161c:	2101      	movs	r1, #1
 800161e:	2007      	movs	r0, #7
 8001620:	f7ff fe6a 	bl	80012f8 <CLCD_Puts>

		sprintf(str, "%02d:%02d", alarm_hour[alarm_select],
 8001624:	4b12      	ldr	r3, [pc, #72]	@ (8001670 <Alarm_display_operation+0x274>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <Alarm_display_operation+0x278>)
 800162c:	5c9b      	ldrb	r3, [r3, r2]
 800162e:	4619      	mov	r1, r3
				alarm_minute[alarm_select]);
 8001630:	4b0f      	ldr	r3, [pc, #60]	@ (8001670 <Alarm_display_operation+0x274>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	461a      	mov	r2, r3
 8001636:	4b16      	ldr	r3, [pc, #88]	@ (8001690 <Alarm_display_operation+0x294>)
 8001638:	5c9b      	ldrb	r3, [r3, r2]
		sprintf(str, "%02d:%02d", alarm_hour[alarm_select],
 800163a:	460a      	mov	r2, r1
 800163c:	4921      	ldr	r1, [pc, #132]	@ (80016c4 <Alarm_display_operation+0x2c8>)
 800163e:	4811      	ldr	r0, [pc, #68]	@ (8001684 <Alarm_display_operation+0x288>)
 8001640:	f004 fef2 	bl	8006428 <siprintf>
		CLCD_Puts(11, 1, str);
 8001644:	4a0f      	ldr	r2, [pc, #60]	@ (8001684 <Alarm_display_operation+0x288>)
 8001646:	2101      	movs	r1, #1
 8001648:	200b      	movs	r0, #11
 800164a:	f7ff fe55 	bl	80012f8 <CLCD_Puts>

		if (alarm_changed[alarm_select]) {
 800164e:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <Alarm_display_operation+0x274>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	461a      	mov	r2, r3
 8001654:	4b13      	ldr	r3, [pc, #76]	@ (80016a4 <Alarm_display_operation+0x2a8>)
 8001656:	5c9b      	ldrb	r3, [r3, r2]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d035      	beq.n	80016c8 <Alarm_display_operation+0x2cc>
			sprintf(str, " ON");
 800165c:	4912      	ldr	r1, [pc, #72]	@ (80016a8 <Alarm_display_operation+0x2ac>)
 800165e:	4809      	ldr	r0, [pc, #36]	@ (8001684 <Alarm_display_operation+0x288>)
 8001660:	f004 fee2 	bl	8006428 <siprintf>
			CLCD_Puts(13, 0, str);
 8001664:	4a07      	ldr	r2, [pc, #28]	@ (8001684 <Alarm_display_operation+0x288>)
 8001666:	2100      	movs	r1, #0
 8001668:	200d      	movs	r0, #13
 800166a:	f7ff fe45 	bl	80012f8 <CLCD_Puts>
 800166e:	e034      	b.n	80016da <Alarm_display_operation+0x2de>
 8001670:	20000016 	.word	0x20000016
 8001674:	2000015c 	.word	0x2000015c
 8001678:	aaaaaaab 	.word	0xaaaaaaab
 800167c:	2000015a 	.word	0x2000015a
 8001680:	08006d80 	.word	0x08006d80
 8001684:	20000138 	.word	0x20000138
 8001688:	20000150 	.word	0x20000150
 800168c:	2000016a 	.word	0x2000016a
 8001690:	20000164 	.word	0x20000164
 8001694:	08006d84 	.word	0x08006d84
 8001698:	08006d8c 	.word	0x08006d8c
 800169c:	08006d90 	.word	0x08006d90
 80016a0:	08006d94 	.word	0x08006d94
 80016a4:	20000010 	.word	0x20000010
 80016a8:	08006d98 	.word	0x08006d98
 80016ac:	08006d9c 	.word	0x08006d9c
 80016b0:	08006da0 	.word	0x08006da0
 80016b4:	08006da4 	.word	0x08006da4
 80016b8:	08006db0 	.word	0x08006db0
 80016bc:	08006db4 	.word	0x08006db4
 80016c0:	08006db8 	.word	0x08006db8
 80016c4:	08006dc0 	.word	0x08006dc0
		}

		else {
			sprintf(str, "OFF");
 80016c8:	4921      	ldr	r1, [pc, #132]	@ (8001750 <Alarm_display_operation+0x354>)
 80016ca:	4822      	ldr	r0, [pc, #136]	@ (8001754 <Alarm_display_operation+0x358>)
 80016cc:	f004 feac 	bl	8006428 <siprintf>
			CLCD_Puts(13, 0, str);
 80016d0:	4a20      	ldr	r2, [pc, #128]	@ (8001754 <Alarm_display_operation+0x358>)
 80016d2:	2100      	movs	r1, #0
 80016d4:	200d      	movs	r0, #13
 80016d6:	f7ff fe0f 	bl	80012f8 <CLCD_Puts>
		}
	}

	if (clock_time / 100 > 5) {
 80016da:	4b1f      	ldr	r3, [pc, #124]	@ (8001758 <Alarm_display_operation+0x35c>)
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	f5b2 7f16 	cmp.w	r2, #600	@ 0x258
 80016e4:	f173 0300 	sbcs.w	r3, r3, #0
 80016e8:	d311      	bcc.n	800170e <Alarm_display_operation+0x312>
		_7SEG_SetNumber(DGT2, second % 10, ON);
 80016ea:	4b1c      	ldr	r3, [pc, #112]	@ (800175c <Alarm_display_operation+0x360>)
 80016ec:	781a      	ldrb	r2, [r3, #0]
 80016ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001760 <Alarm_display_operation+0x364>)
 80016f0:	fba3 1302 	umull	r1, r3, r3, r2
 80016f4:	08d9      	lsrs	r1, r3, #3
 80016f6:	460b      	mov	r3, r1
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	440b      	add	r3, r1
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2201      	movs	r2, #1
 8001704:	4619      	mov	r1, r3
 8001706:	2001      	movs	r0, #1
 8001708:	f7ff f810 	bl	800072c <_7SEG_SetNumber>
 800170c:	e010      	b.n	8001730 <Alarm_display_operation+0x334>
	} else {
		_7SEG_SetNumber(DGT2, second % 10, OFF);
 800170e:	4b13      	ldr	r3, [pc, #76]	@ (800175c <Alarm_display_operation+0x360>)
 8001710:	781a      	ldrb	r2, [r3, #0]
 8001712:	4b13      	ldr	r3, [pc, #76]	@ (8001760 <Alarm_display_operation+0x364>)
 8001714:	fba3 1302 	umull	r1, r3, r3, r2
 8001718:	08d9      	lsrs	r1, r3, #3
 800171a:	460b      	mov	r3, r1
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	440b      	add	r3, r1
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2200      	movs	r2, #0
 8001728:	4619      	mov	r1, r3
 800172a:	2001      	movs	r0, #1
 800172c:	f7fe fffe 	bl	800072c <_7SEG_SetNumber>
	}
	_7SEG_SetNumber(DGT1, second / 10, OFF);
 8001730:	4b0a      	ldr	r3, [pc, #40]	@ (800175c <Alarm_display_operation+0x360>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	4a0a      	ldr	r2, [pc, #40]	@ (8001760 <Alarm_display_operation+0x364>)
 8001736:	fba2 2303 	umull	r2, r3, r2, r3
 800173a:	08db      	lsrs	r3, r3, #3
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2200      	movs	r2, #0
 8001740:	4619      	mov	r1, r3
 8001742:	2000      	movs	r0, #0
 8001744:	f7fe fff2 	bl	800072c <_7SEG_SetNumber>

}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	08006d9c 	.word	0x08006d9c
 8001754:	20000138 	.word	0x20000138
 8001758:	20000150 	.word	0x20000150
 800175c:	20000007 	.word	0x20000007
 8001760:	cccccccd 	.word	0xcccccccd

08001764 <Alarm_button_operation>:

void Alarm_button_operation() {
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
	if (sw1_released) {
 8001768:	4b52      	ldr	r3, [pc, #328]	@ (80018b4 <Alarm_button_operation+0x150>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d018      	beq.n	80017a2 <Alarm_button_operation+0x3e>
		if (Press_Mode >= PRESS_MID) {
 8001770:	4b51      	ldr	r3, [pc, #324]	@ (80018b8 <Alarm_button_operation+0x154>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d911      	bls.n	800179c <Alarm_button_operation+0x38>
			alarm_setmode = !alarm_setmode; // Toggle timer setting mode
 8001778:	4b50      	ldr	r3, [pc, #320]	@ (80018bc <Alarm_button_operation+0x158>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	bf14      	ite	ne
 8001780:	2301      	movne	r3, #1
 8001782:	2300      	moveq	r3, #0
 8001784:	b2db      	uxtb	r3, r3
 8001786:	f083 0301 	eor.w	r3, r3, #1
 800178a:	b2db      	uxtb	r3, r3
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4b4a      	ldr	r3, [pc, #296]	@ (80018bc <Alarm_button_operation+0x158>)
 8001794:	701a      	strb	r2, [r3, #0]
			Press_Mode = PRESS_NOT;
 8001796:	4b48      	ldr	r3, [pc, #288]	@ (80018b8 <Alarm_button_operation+0x154>)
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]
		}
		sw1_released = false;
 800179c:	4b45      	ldr	r3, [pc, #276]	@ (80018b4 <Alarm_button_operation+0x150>)
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]
	}

	if (alarm_setmode) {
 80017a2:	4b46      	ldr	r3, [pc, #280]	@ (80018bc <Alarm_button_operation+0x158>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d06e      	beq.n	8001888 <Alarm_button_operation+0x124>
		if (sw2_released) {
 80017aa:	4b45      	ldr	r3, [pc, #276]	@ (80018c0 <Alarm_button_operation+0x15c>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d004      	beq.n	80017bc <Alarm_button_operation+0x58>
			updateTime5();
 80017b2:	f000 f891 	bl	80018d8 <updateTime5>
			sw2_released = false;
 80017b6:	4b42      	ldr	r3, [pc, #264]	@ (80018c0 <Alarm_button_operation+0x15c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]
		}
		if (sw2 == true) {
 80017bc:	4b41      	ldr	r3, [pc, #260]	@ (80018c4 <Alarm_button_operation+0x160>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d029      	beq.n	8001818 <Alarm_button_operation+0xb4>
			if (Press_Mode == PRESS_MID) {
 80017c4:	4b3c      	ldr	r3, [pc, #240]	@ (80018b8 <Alarm_button_operation+0x154>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d111      	bne.n	80017f0 <Alarm_button_operation+0x8c>
				if (Run_Time >= 500) {
 80017cc:	4b3e      	ldr	r3, [pc, #248]	@ (80018c8 <Alarm_button_operation+0x164>)
 80017ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d2:	f5b2 7ffa 	cmp.w	r2, #500	@ 0x1f4
 80017d6:	f173 0300 	sbcs.w	r3, r3, #0
 80017da:	d31d      	bcc.n	8001818 <Alarm_button_operation+0xb4>
					updateTime5();
 80017dc:	f000 f87c 	bl	80018d8 <updateTime5>
					Run_Time = 0;
 80017e0:	4939      	ldr	r1, [pc, #228]	@ (80018c8 <Alarm_button_operation+0x164>)
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	e9c1 2300 	strd	r2, r3, [r1]
 80017ee:	e013      	b.n	8001818 <Alarm_button_operation+0xb4>
				}
			} else if (Press_Mode == PRESS_LONG) {
 80017f0:	4b31      	ldr	r3, [pc, #196]	@ (80018b8 <Alarm_button_operation+0x154>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b03      	cmp	r3, #3
 80017f6:	d10f      	bne.n	8001818 <Alarm_button_operation+0xb4>
				if (Run_Time >= 200) {
 80017f8:	4b33      	ldr	r3, [pc, #204]	@ (80018c8 <Alarm_button_operation+0x164>)
 80017fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fe:	2ac8      	cmp	r2, #200	@ 0xc8
 8001800:	f173 0300 	sbcs.w	r3, r3, #0
 8001804:	d308      	bcc.n	8001818 <Alarm_button_operation+0xb4>
					updateTime5();
 8001806:	f000 f867 	bl	80018d8 <updateTime5>
					Run_Time = 0;
 800180a:	492f      	ldr	r1, [pc, #188]	@ (80018c8 <Alarm_button_operation+0x164>)
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	f04f 0300 	mov.w	r3, #0
 8001814:	e9c1 2300 	strd	r2, r3, [r1]
				}
			}
		}

		if (sw3_released) {
 8001818:	4b2c      	ldr	r3, [pc, #176]	@ (80018cc <Alarm_button_operation+0x168>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d004      	beq.n	800182a <Alarm_button_operation+0xc6>
			updateTime6();
 8001820:	f000 f8ec 	bl	80019fc <updateTime6>
			sw3_released = false;
 8001824:	4b29      	ldr	r3, [pc, #164]	@ (80018cc <Alarm_button_operation+0x168>)
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
		}
		if (sw3 == true) {
 800182a:	4b29      	ldr	r3, [pc, #164]	@ (80018d0 <Alarm_button_operation+0x16c>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d03e      	beq.n	80018b0 <Alarm_button_operation+0x14c>
			if (Press_Mode == PRESS_MID) {
 8001832:	4b21      	ldr	r3, [pc, #132]	@ (80018b8 <Alarm_button_operation+0x154>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b02      	cmp	r3, #2
 8001838:	d111      	bne.n	800185e <Alarm_button_operation+0xfa>
				if (Run_Time >= 500) {
 800183a:	4b23      	ldr	r3, [pc, #140]	@ (80018c8 <Alarm_button_operation+0x164>)
 800183c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001840:	f5b2 7ffa 	cmp.w	r2, #500	@ 0x1f4
 8001844:	f173 0300 	sbcs.w	r3, r3, #0
 8001848:	d332      	bcc.n	80018b0 <Alarm_button_operation+0x14c>
					updateTime6();
 800184a:	f000 f8d7 	bl	80019fc <updateTime6>
					Run_Time = 0;
 800184e:	491e      	ldr	r1, [pc, #120]	@ (80018c8 <Alarm_button_operation+0x164>)
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	e9c1 2300 	strd	r2, r3, [r1]
				alarm_select = 1;
			}
			sw2_released = false;
		}
	}
}
 800185c:	e028      	b.n	80018b0 <Alarm_button_operation+0x14c>
			} else if (Press_Mode == PRESS_LONG) {
 800185e:	4b16      	ldr	r3, [pc, #88]	@ (80018b8 <Alarm_button_operation+0x154>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b03      	cmp	r3, #3
 8001864:	d124      	bne.n	80018b0 <Alarm_button_operation+0x14c>
				if (Run_Time >= 200) {
 8001866:	4b18      	ldr	r3, [pc, #96]	@ (80018c8 <Alarm_button_operation+0x164>)
 8001868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186c:	2ac8      	cmp	r2, #200	@ 0xc8
 800186e:	f173 0300 	sbcs.w	r3, r3, #0
 8001872:	d31d      	bcc.n	80018b0 <Alarm_button_operation+0x14c>
					updateTime6();
 8001874:	f000 f8c2 	bl	80019fc <updateTime6>
					Run_Time = 0;
 8001878:	4913      	ldr	r1, [pc, #76]	@ (80018c8 <Alarm_button_operation+0x164>)
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	f04f 0300 	mov.w	r3, #0
 8001882:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001886:	e013      	b.n	80018b0 <Alarm_button_operation+0x14c>
		if (sw2_released) {
 8001888:	4b0d      	ldr	r3, [pc, #52]	@ (80018c0 <Alarm_button_operation+0x15c>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d00f      	beq.n	80018b0 <Alarm_button_operation+0x14c>
			alarm_select++;
 8001890:	4b10      	ldr	r3, [pc, #64]	@ (80018d4 <Alarm_button_operation+0x170>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	3301      	adds	r3, #1
 8001896:	b2da      	uxtb	r2, r3
 8001898:	4b0e      	ldr	r3, [pc, #56]	@ (80018d4 <Alarm_button_operation+0x170>)
 800189a:	701a      	strb	r2, [r3, #0]
			if (alarm_select >= 6) {
 800189c:	4b0d      	ldr	r3, [pc, #52]	@ (80018d4 <Alarm_button_operation+0x170>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b05      	cmp	r3, #5
 80018a2:	d902      	bls.n	80018aa <Alarm_button_operation+0x146>
				alarm_select = 1;
 80018a4:	4b0b      	ldr	r3, [pc, #44]	@ (80018d4 <Alarm_button_operation+0x170>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	701a      	strb	r2, [r3, #0]
			sw2_released = false;
 80018aa:	4b05      	ldr	r3, [pc, #20]	@ (80018c0 <Alarm_button_operation+0x15c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]
}
 80018b0:	bf00      	nop
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000124 	.word	0x20000124
 80018b8:	2000014e 	.word	0x2000014e
 80018bc:	2000015a 	.word	0x2000015a
 80018c0:	20000125 	.word	0x20000125
 80018c4:	20000121 	.word	0x20000121
 80018c8:	20000130 	.word	0x20000130
 80018cc:	20000126 	.word	0x20000126
 80018d0:	20000122 	.word	0x20000122
 80018d4:	20000016 	.word	0x20000016

080018d8 <updateTime5>:
void updateTime5() {
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
	switch (item_select3) {
 80018dc:	4b40      	ldr	r3, [pc, #256]	@ (80019e0 <updateTime5+0x108>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b03      	cmp	r3, #3
 80018e2:	d877      	bhi.n	80019d4 <updateTime5+0xfc>
 80018e4:	a201      	add	r2, pc, #4	@ (adr r2, 80018ec <updateTime5+0x14>)
 80018e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ea:	bf00      	nop
 80018ec:	080018fd 	.word	0x080018fd
 80018f0:	08001919 	.word	0x08001919
 80018f4:	08001973 	.word	0x08001973
 80018f8:	080019a1 	.word	0x080019a1
	case 0:
		alarm_select++;
 80018fc:	4b39      	ldr	r3, [pc, #228]	@ (80019e4 <updateTime5+0x10c>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	3301      	adds	r3, #1
 8001902:	b2da      	uxtb	r2, r3
 8001904:	4b37      	ldr	r3, [pc, #220]	@ (80019e4 <updateTime5+0x10c>)
 8001906:	701a      	strb	r2, [r3, #0]
		if (alarm_select >= 6) {
 8001908:	4b36      	ldr	r3, [pc, #216]	@ (80019e4 <updateTime5+0x10c>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b05      	cmp	r3, #5
 800190e:	d95e      	bls.n	80019ce <updateTime5+0xf6>
			alarm_select = 1;
 8001910:	4b34      	ldr	r3, [pc, #208]	@ (80019e4 <updateTime5+0x10c>)
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001916:	e05a      	b.n	80019ce <updateTime5+0xf6>
	case 1:
		alarm_changed[alarm_select] = !alarm_changed[alarm_select];
 8001918:	4b32      	ldr	r3, [pc, #200]	@ (80019e4 <updateTime5+0x10c>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	461a      	mov	r2, r3
 800191e:	4b32      	ldr	r3, [pc, #200]	@ (80019e8 <updateTime5+0x110>)
 8001920:	5c9b      	ldrb	r3, [r3, r2]
 8001922:	2b00      	cmp	r3, #0
 8001924:	bf14      	ite	ne
 8001926:	2301      	movne	r3, #1
 8001928:	2300      	moveq	r3, #0
 800192a:	b2db      	uxtb	r3, r3
 800192c:	f083 0301 	eor.w	r3, r3, #1
 8001930:	b2db      	uxtb	r3, r3
 8001932:	4619      	mov	r1, r3
 8001934:	4b2b      	ldr	r3, [pc, #172]	@ (80019e4 <updateTime5+0x10c>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	461a      	mov	r2, r3
 800193a:	460b      	mov	r3, r1
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	b2d9      	uxtb	r1, r3
 8001942:	4b29      	ldr	r3, [pc, #164]	@ (80019e8 <updateTime5+0x110>)
 8001944:	5499      	strb	r1, [r3, r2]
		if (alarm_changed[alarm_select]) {
 8001946:	4b27      	ldr	r3, [pc, #156]	@ (80019e4 <updateTime5+0x10c>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	461a      	mov	r2, r3
 800194c:	4b26      	ldr	r3, [pc, #152]	@ (80019e8 <updateTime5+0x110>)
 800194e:	5c9b      	ldrb	r3, [r3, r2]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d03e      	beq.n	80019d2 <updateTime5+0xfa>
			alarm_hour[alarm_select] = hour;
 8001954:	4b23      	ldr	r3, [pc, #140]	@ (80019e4 <updateTime5+0x10c>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	461a      	mov	r2, r3
 800195a:	4b24      	ldr	r3, [pc, #144]	@ (80019ec <updateTime5+0x114>)
 800195c:	7819      	ldrb	r1, [r3, #0]
 800195e:	4b24      	ldr	r3, [pc, #144]	@ (80019f0 <updateTime5+0x118>)
 8001960:	5499      	strb	r1, [r3, r2]
			alarm_minute[alarm_select] = minute;
 8001962:	4b20      	ldr	r3, [pc, #128]	@ (80019e4 <updateTime5+0x10c>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	4b22      	ldr	r3, [pc, #136]	@ (80019f4 <updateTime5+0x11c>)
 800196a:	7819      	ldrb	r1, [r3, #0]
 800196c:	4b22      	ldr	r3, [pc, #136]	@ (80019f8 <updateTime5+0x120>)
 800196e:	5499      	strb	r1, [r3, r2]
		}

		break;
 8001970:	e02f      	b.n	80019d2 <updateTime5+0xfa>
	case 2:
		if (alarm_hour[alarm_select] >= 23) {
 8001972:	4b1c      	ldr	r3, [pc, #112]	@ (80019e4 <updateTime5+0x10c>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	461a      	mov	r2, r3
 8001978:	4b1d      	ldr	r3, [pc, #116]	@ (80019f0 <updateTime5+0x118>)
 800197a:	5c9b      	ldrb	r3, [r3, r2]
 800197c:	2b16      	cmp	r3, #22
 800197e:	d906      	bls.n	800198e <updateTime5+0xb6>
			alarm_hour[alarm_select] = 0;
 8001980:	4b18      	ldr	r3, [pc, #96]	@ (80019e4 <updateTime5+0x10c>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	461a      	mov	r2, r3
 8001986:	4b1a      	ldr	r3, [pc, #104]	@ (80019f0 <updateTime5+0x118>)
 8001988:	2100      	movs	r1, #0
 800198a:	5499      	strb	r1, [r3, r2]
		}

		else {
			alarm_hour[alarm_select]++;
		}
		break;
 800198c:	e022      	b.n	80019d4 <updateTime5+0xfc>
			alarm_hour[alarm_select]++;
 800198e:	4b15      	ldr	r3, [pc, #84]	@ (80019e4 <updateTime5+0x10c>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	4a17      	ldr	r2, [pc, #92]	@ (80019f0 <updateTime5+0x118>)
 8001994:	5cd2      	ldrb	r2, [r2, r3]
 8001996:	3201      	adds	r2, #1
 8001998:	b2d1      	uxtb	r1, r2
 800199a:	4a15      	ldr	r2, [pc, #84]	@ (80019f0 <updateTime5+0x118>)
 800199c:	54d1      	strb	r1, [r2, r3]
		break;
 800199e:	e019      	b.n	80019d4 <updateTime5+0xfc>
	case 3:
		if (alarm_minute[alarm_select] >= 59) {
 80019a0:	4b10      	ldr	r3, [pc, #64]	@ (80019e4 <updateTime5+0x10c>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	461a      	mov	r2, r3
 80019a6:	4b14      	ldr	r3, [pc, #80]	@ (80019f8 <updateTime5+0x120>)
 80019a8:	5c9b      	ldrb	r3, [r3, r2]
 80019aa:	2b3a      	cmp	r3, #58	@ 0x3a
 80019ac:	d906      	bls.n	80019bc <updateTime5+0xe4>
			alarm_minute[alarm_select] = 0;
 80019ae:	4b0d      	ldr	r3, [pc, #52]	@ (80019e4 <updateTime5+0x10c>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	461a      	mov	r2, r3
 80019b4:	4b10      	ldr	r3, [pc, #64]	@ (80019f8 <updateTime5+0x120>)
 80019b6:	2100      	movs	r1, #0
 80019b8:	5499      	strb	r1, [r3, r2]
		}

		else {
			alarm_minute[alarm_select]++;
		}
		break;
 80019ba:	e00b      	b.n	80019d4 <updateTime5+0xfc>
			alarm_minute[alarm_select]++;
 80019bc:	4b09      	ldr	r3, [pc, #36]	@ (80019e4 <updateTime5+0x10c>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	4a0d      	ldr	r2, [pc, #52]	@ (80019f8 <updateTime5+0x120>)
 80019c2:	5cd2      	ldrb	r2, [r2, r3]
 80019c4:	3201      	adds	r2, #1
 80019c6:	b2d1      	uxtb	r1, r2
 80019c8:	4a0b      	ldr	r2, [pc, #44]	@ (80019f8 <updateTime5+0x120>)
 80019ca:	54d1      	strb	r1, [r2, r3]
		break;
 80019cc:	e002      	b.n	80019d4 <updateTime5+0xfc>
		break;
 80019ce:	bf00      	nop
 80019d0:	e000      	b.n	80019d4 <updateTime5+0xfc>
		break;
 80019d2:	bf00      	nop
	}
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	2000016a 	.word	0x2000016a
 80019e4:	20000016 	.word	0x20000016
 80019e8:	20000010 	.word	0x20000010
 80019ec:	20000005 	.word	0x20000005
 80019f0:	2000015c 	.word	0x2000015c
 80019f4:	20000006 	.word	0x20000006
 80019f8:	20000164 	.word	0x20000164

080019fc <updateTime6>:

void updateTime6() {
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
	switch (item_select3) {
 8001a00:	4b40      	ldr	r3, [pc, #256]	@ (8001b04 <updateTime6+0x108>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b03      	cmp	r3, #3
 8001a06:	d877      	bhi.n	8001af8 <updateTime6+0xfc>
 8001a08:	a201      	add	r2, pc, #4	@ (adr r2, 8001a10 <updateTime6+0x14>)
 8001a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a0e:	bf00      	nop
 8001a10:	08001a21 	.word	0x08001a21
 8001a14:	08001a3d 	.word	0x08001a3d
 8001a18:	08001a97 	.word	0x08001a97
 8001a1c:	08001ac5 	.word	0x08001ac5
	case 0:
		alarm_select--;
 8001a20:	4b39      	ldr	r3, [pc, #228]	@ (8001b08 <updateTime6+0x10c>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	4b37      	ldr	r3, [pc, #220]	@ (8001b08 <updateTime6+0x10c>)
 8001a2a:	701a      	strb	r2, [r3, #0]
		if (alarm_select <= 0) {
 8001a2c:	4b36      	ldr	r3, [pc, #216]	@ (8001b08 <updateTime6+0x10c>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d15e      	bne.n	8001af2 <updateTime6+0xf6>
			alarm_select = 5;
 8001a34:	4b34      	ldr	r3, [pc, #208]	@ (8001b08 <updateTime6+0x10c>)
 8001a36:	2205      	movs	r2, #5
 8001a38:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001a3a:	e05a      	b.n	8001af2 <updateTime6+0xf6>
	case 1:
		alarm_changed[alarm_select] = !alarm_changed[alarm_select];
 8001a3c:	4b32      	ldr	r3, [pc, #200]	@ (8001b08 <updateTime6+0x10c>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b32      	ldr	r3, [pc, #200]	@ (8001b0c <updateTime6+0x110>)
 8001a44:	5c9b      	ldrb	r3, [r3, r2]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	bf14      	ite	ne
 8001a4a:	2301      	movne	r3, #1
 8001a4c:	2300      	moveq	r3, #0
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	f083 0301 	eor.w	r3, r3, #1
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	4619      	mov	r1, r3
 8001a58:	4b2b      	ldr	r3, [pc, #172]	@ (8001b08 <updateTime6+0x10c>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	460b      	mov	r3, r1
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	b2d9      	uxtb	r1, r3
 8001a66:	4b29      	ldr	r3, [pc, #164]	@ (8001b0c <updateTime6+0x110>)
 8001a68:	5499      	strb	r1, [r3, r2]
		if (alarm_changed[alarm_select]) {
 8001a6a:	4b27      	ldr	r3, [pc, #156]	@ (8001b08 <updateTime6+0x10c>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	4b26      	ldr	r3, [pc, #152]	@ (8001b0c <updateTime6+0x110>)
 8001a72:	5c9b      	ldrb	r3, [r3, r2]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d03e      	beq.n	8001af6 <updateTime6+0xfa>
			alarm_hour[alarm_select] = hour;
 8001a78:	4b23      	ldr	r3, [pc, #140]	@ (8001b08 <updateTime6+0x10c>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b24      	ldr	r3, [pc, #144]	@ (8001b10 <updateTime6+0x114>)
 8001a80:	7819      	ldrb	r1, [r3, #0]
 8001a82:	4b24      	ldr	r3, [pc, #144]	@ (8001b14 <updateTime6+0x118>)
 8001a84:	5499      	strb	r1, [r3, r2]
			alarm_minute[alarm_select] = minute;
 8001a86:	4b20      	ldr	r3, [pc, #128]	@ (8001b08 <updateTime6+0x10c>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	4b22      	ldr	r3, [pc, #136]	@ (8001b18 <updateTime6+0x11c>)
 8001a8e:	7819      	ldrb	r1, [r3, #0]
 8001a90:	4b22      	ldr	r3, [pc, #136]	@ (8001b1c <updateTime6+0x120>)
 8001a92:	5499      	strb	r1, [r3, r2]
		}
		break;
 8001a94:	e02f      	b.n	8001af6 <updateTime6+0xfa>
	case 2:
		if (alarm_hour[alarm_select] <= 0) {
 8001a96:	4b1c      	ldr	r3, [pc, #112]	@ (8001b08 <updateTime6+0x10c>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001b14 <updateTime6+0x118>)
 8001a9e:	5c9b      	ldrb	r3, [r3, r2]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d106      	bne.n	8001ab2 <updateTime6+0xb6>
			alarm_hour[alarm_select] = 23;
 8001aa4:	4b18      	ldr	r3, [pc, #96]	@ (8001b08 <updateTime6+0x10c>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8001b14 <updateTime6+0x118>)
 8001aac:	2117      	movs	r1, #23
 8001aae:	5499      	strb	r1, [r3, r2]
		}

		else {
			alarm_hour[alarm_select]--;
		}
		break;
 8001ab0:	e022      	b.n	8001af8 <updateTime6+0xfc>
			alarm_hour[alarm_select]--;
 8001ab2:	4b15      	ldr	r3, [pc, #84]	@ (8001b08 <updateTime6+0x10c>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	4a17      	ldr	r2, [pc, #92]	@ (8001b14 <updateTime6+0x118>)
 8001ab8:	5cd2      	ldrb	r2, [r2, r3]
 8001aba:	3a01      	subs	r2, #1
 8001abc:	b2d1      	uxtb	r1, r2
 8001abe:	4a15      	ldr	r2, [pc, #84]	@ (8001b14 <updateTime6+0x118>)
 8001ac0:	54d1      	strb	r1, [r2, r3]
		break;
 8001ac2:	e019      	b.n	8001af8 <updateTime6+0xfc>
	case 3:
		if (alarm_minute[alarm_select] <= 0) {
 8001ac4:	4b10      	ldr	r3, [pc, #64]	@ (8001b08 <updateTime6+0x10c>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4b14      	ldr	r3, [pc, #80]	@ (8001b1c <updateTime6+0x120>)
 8001acc:	5c9b      	ldrb	r3, [r3, r2]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d106      	bne.n	8001ae0 <updateTime6+0xe4>
			alarm_minute[alarm_select] = 59;
 8001ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8001b08 <updateTime6+0x10c>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4b10      	ldr	r3, [pc, #64]	@ (8001b1c <updateTime6+0x120>)
 8001ada:	213b      	movs	r1, #59	@ 0x3b
 8001adc:	5499      	strb	r1, [r3, r2]
		}

		else {
			alarm_minute[alarm_select]--;
		}
		break;
 8001ade:	e00b      	b.n	8001af8 <updateTime6+0xfc>
			alarm_minute[alarm_select]--;
 8001ae0:	4b09      	ldr	r3, [pc, #36]	@ (8001b08 <updateTime6+0x10c>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8001b1c <updateTime6+0x120>)
 8001ae6:	5cd2      	ldrb	r2, [r2, r3]
 8001ae8:	3a01      	subs	r2, #1
 8001aea:	b2d1      	uxtb	r1, r2
 8001aec:	4a0b      	ldr	r2, [pc, #44]	@ (8001b1c <updateTime6+0x120>)
 8001aee:	54d1      	strb	r1, [r2, r3]
		break;
 8001af0:	e002      	b.n	8001af8 <updateTime6+0xfc>
		break;
 8001af2:	bf00      	nop
 8001af4:	e000      	b.n	8001af8 <updateTime6+0xfc>
		break;
 8001af6:	bf00      	nop
	}
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	2000016a 	.word	0x2000016a
 8001b08:	20000016 	.word	0x20000016
 8001b0c:	20000010 	.word	0x20000010
 8001b10:	20000005 	.word	0x20000005
 8001b14:	2000015c 	.word	0x2000015c
 8001b18:	20000006 	.word	0x20000006
 8001b1c:	20000164 	.word	0x20000164

08001b20 <Alarm_Check>:


void Alarm_Check(){
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
	for (int i = 1; i <= 5; i++) {
 8001b26:	2301      	movs	r3, #1
 8001b28:	607b      	str	r3, [r7, #4]
 8001b2a:	e036      	b.n	8001b9a <Alarm_Check+0x7a>
		if (alarm_changed[i] && !alarm_setmode) {
 8001b2c:	4a20      	ldr	r2, [pc, #128]	@ (8001bb0 <Alarm_Check+0x90>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d02d      	beq.n	8001b94 <Alarm_Check+0x74>
 8001b38:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb4 <Alarm_Check+0x94>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	f083 0301 	eor.w	r3, r3, #1
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d026      	beq.n	8001b94 <Alarm_Check+0x74>
			if (alarm_hour[i] == hour && alarm_minute[i] == minute) {
 8001b46:	4a1c      	ldr	r2, [pc, #112]	@ (8001bb8 <Alarm_Check+0x98>)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	781a      	ldrb	r2, [r3, #0]
 8001b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bbc <Alarm_Check+0x9c>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d11e      	bne.n	8001b94 <Alarm_Check+0x74>
 8001b56:	4a1a      	ldr	r2, [pc, #104]	@ (8001bc0 <Alarm_Check+0xa0>)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	781a      	ldrb	r2, [r3, #0]
 8001b5e:	4b19      	ldr	r3, [pc, #100]	@ (8001bc4 <Alarm_Check+0xa4>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d116      	bne.n	8001b94 <Alarm_Check+0x74>
				alarm_changed[i] = !alarm_changed[i];
 8001b66:	4a12      	ldr	r2, [pc, #72]	@ (8001bb0 <Alarm_Check+0x90>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	bf14      	ite	ne
 8001b72:	2301      	movne	r3, #1
 8001b74:	2300      	moveq	r3, #0
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	f083 0301 	eor.w	r3, r3, #1
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	b2d9      	uxtb	r1, r3
 8001b84:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb0 <Alarm_Check+0x90>)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	460a      	mov	r2, r1
 8001b8c:	701a      	strb	r2, [r3, #0]
			    alarm_ring = true;
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc8 <Alarm_Check+0xa8>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i <= 5; i++) {
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3301      	adds	r3, #1
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b05      	cmp	r3, #5
 8001b9e:	ddc5      	ble.n	8001b2c <Alarm_Check+0xc>
			}
		}
	}
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	20000010 	.word	0x20000010
 8001bb4:	2000015a 	.word	0x2000015a
 8001bb8:	2000015c 	.word	0x2000015c
 8001bbc:	20000005 	.word	0x20000005
 8001bc0:	20000164 	.word	0x20000164
 8001bc4:	20000006 	.word	0x20000006
 8001bc8:	2000016b 	.word	0x2000016b

08001bcc <isLeapYear>:
#include <stdint.h>
#include "variables.h"
#include "7SEG.h"
#include "CLCD.h"

bool isLeapYear(uint16_t year) {
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	80fb      	strh	r3, [r7, #6]
    return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
 8001bd6:	88fb      	ldrh	r3, [r7, #6]
 8001bd8:	f003 0303 	and.w	r3, r3, #3
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10b      	bne.n	8001bfa <isLeapYear+0x2e>
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	4a11      	ldr	r2, [pc, #68]	@ (8001c2c <isLeapYear+0x60>)
 8001be6:	fba2 1203 	umull	r1, r2, r2, r3
 8001bea:	0952      	lsrs	r2, r2, #5
 8001bec:	2164      	movs	r1, #100	@ 0x64
 8001bee:	fb01 f202 	mul.w	r2, r1, r2
 8001bf2:	1a9b      	subs	r3, r3, r2
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10c      	bne.n	8001c14 <isLeapYear+0x48>
 8001bfa:	88fb      	ldrh	r3, [r7, #6]
 8001bfc:	4a0b      	ldr	r2, [pc, #44]	@ (8001c2c <isLeapYear+0x60>)
 8001bfe:	fba2 1203 	umull	r1, r2, r2, r3
 8001c02:	09d2      	lsrs	r2, r2, #7
 8001c04:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8001c08:	fb01 f202 	mul.w	r2, r1, r2
 8001c0c:	1a9b      	subs	r3, r3, r2
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <isLeapYear+0x4c>
 8001c14:	2301      	movs	r3, #1
 8001c16:	e000      	b.n	8001c1a <isLeapYear+0x4e>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	b2db      	uxtb	r3, r3
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	51eb851f 	.word	0x51eb851f

08001c30 <Clock_basic_operation>:

void Clock_basic_operation() {
 8001c30:	b5b0      	push	{r4, r5, r7, lr}
 8001c32:	b08e      	sub	sp, #56	@ 0x38
 8001c34:	af00      	add	r7, sp, #0
    // 월별 최대 일 수 배열 (0번 인덱스는 사용하지 않음)
    int days_in_month[] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 8001c36:	4b1d      	ldr	r3, [pc, #116]	@ (8001cac <Clock_basic_operation+0x7c>)
 8001c38:	1d3c      	adds	r4, r7, #4
 8001c3a:	461d      	mov	r5, r3
 8001c3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c48:	682b      	ldr	r3, [r5, #0]
 8001c4a:	6023      	str	r3, [r4, #0]

    // 윤년이면 2월을 29일로 설정
    if (isLeapYear(year)) {
 8001c4c:	4b18      	ldr	r3, [pc, #96]	@ (8001cb0 <Clock_basic_operation+0x80>)
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ffbb 	bl	8001bcc <isLeapYear>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <Clock_basic_operation+0x30>
        days_in_month[2] = 29;
 8001c5c:	231d      	movs	r3, #29
 8001c5e:	60fb      	str	r3, [r7, #12]
    }

    // 현재 일이 해당 월의 최대 일 수를 초과하면 월 증가
    if (day > days_in_month[month]) {
 8001c60:	4b14      	ldr	r3, [pc, #80]	@ (8001cb4 <Clock_basic_operation+0x84>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	461a      	mov	r2, r3
 8001c66:	4b14      	ldr	r3, [pc, #80]	@ (8001cb8 <Clock_basic_operation+0x88>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	3338      	adds	r3, #56	@ 0x38
 8001c6e:	443b      	add	r3, r7
 8001c70:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	dd08      	ble.n	8001c8a <Clock_basic_operation+0x5a>
        day = 1;
 8001c78:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb4 <Clock_basic_operation+0x84>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	701a      	strb	r2, [r3, #0]
        month++;
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb8 <Clock_basic_operation+0x88>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	3301      	adds	r3, #1
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb8 <Clock_basic_operation+0x88>)
 8001c88:	701a      	strb	r2, [r3, #0]
    }

    // 12월을 초과하면 연도 증가
    if (month > 12) {
 8001c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb8 <Clock_basic_operation+0x88>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b0c      	cmp	r3, #12
 8001c90:	d908      	bls.n	8001ca4 <Clock_basic_operation+0x74>
        month = 1;
 8001c92:	4b09      	ldr	r3, [pc, #36]	@ (8001cb8 <Clock_basic_operation+0x88>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	701a      	strb	r2, [r3, #0]
        year++;
 8001c98:	4b05      	ldr	r3, [pc, #20]	@ (8001cb0 <Clock_basic_operation+0x80>)
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	4b03      	ldr	r3, [pc, #12]	@ (8001cb0 <Clock_basic_operation+0x80>)
 8001ca2:	801a      	strh	r2, [r3, #0]
    }
}
 8001ca4:	bf00      	nop
 8001ca6:	3738      	adds	r7, #56	@ 0x38
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bdb0      	pop	{r4, r5, r7, pc}
 8001cac:	08006dcc 	.word	0x08006dcc
 8001cb0:	2000000a 	.word	0x2000000a
 8001cb4:	2000000d 	.word	0x2000000d
 8001cb8:	2000000c 	.word	0x2000000c

08001cbc <Clock_display_operation>:


void Clock_display_operation() {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af02      	add	r7, sp, #8
	const char *period;
	uint8_t displayHour = (int) hour % 12;
 8001cc2:	4b9f      	ldr	r3, [pc, #636]	@ (8001f40 <Clock_display_operation+0x284>)
 8001cc4:	781a      	ldrb	r2, [r3, #0]
 8001cc6:	4b9f      	ldr	r3, [pc, #636]	@ (8001f44 <Clock_display_operation+0x288>)
 8001cc8:	fba3 1302 	umull	r1, r3, r3, r2
 8001ccc:	08d9      	lsrs	r1, r3, #3
 8001cce:	460b      	mov	r3, r1
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	440b      	add	r3, r1
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	71fb      	strb	r3, [r7, #7]
	if (displayHour == 0) {
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <Clock_display_operation+0x28>
		displayHour = 12; // 0시를 12시로 변환
 8001ce0:	230c      	movs	r3, #12
 8001ce2:	71fb      	strb	r3, [r7, #7]
	}

	if (clock_setmode) {
 8001ce4:	4b98      	ldr	r3, [pc, #608]	@ (8001f48 <Clock_display_operation+0x28c>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 8106 	beq.w	8001efa <Clock_display_operation+0x23e>
		if (clock_time / 100 > 5) {
 8001cee:	4b97      	ldr	r3, [pc, #604]	@ (8001f4c <Clock_display_operation+0x290>)
 8001cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf4:	f5b2 7f16 	cmp.w	r2, #600	@ 0x258
 8001cf8:	f173 0300 	sbcs.w	r3, r3, #0
 8001cfc:	f0c0 80a9 	bcc.w	8001e52 <Clock_display_operation+0x196>
			switch(item_select){
 8001d00:	4b93      	ldr	r3, [pc, #588]	@ (8001f50 <Clock_display_operation+0x294>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b05      	cmp	r3, #5
 8001d06:	f200 8092 	bhi.w	8001e2e <Clock_display_operation+0x172>
 8001d0a:	a201      	add	r2, pc, #4	@ (adr r2, 8001d10 <Clock_display_operation+0x54>)
 8001d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d10:	08001d29 	.word	0x08001d29
 8001d14:	08001d55 	.word	0x08001d55
 8001d18:	08001d81 	.word	0x08001d81
 8001d1c:	08001dad 	.word	0x08001dad
 8001d20:	08001dd9 	.word	0x08001dd9
 8001d24:	08001e03 	.word	0x08001e03
			case 0:
				sprintf(str, "%02d", (int) second);
 8001d28:	4b8a      	ldr	r3, [pc, #552]	@ (8001f54 <Clock_display_operation+0x298>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	498a      	ldr	r1, [pc, #552]	@ (8001f58 <Clock_display_operation+0x29c>)
 8001d30:	488a      	ldr	r0, [pc, #552]	@ (8001f5c <Clock_display_operation+0x2a0>)
 8001d32:	f004 fb79 	bl	8006428 <siprintf>
				CLCD_Puts(14, 1, str);
 8001d36:	4a89      	ldr	r2, [pc, #548]	@ (8001f5c <Clock_display_operation+0x2a0>)
 8001d38:	2101      	movs	r1, #1
 8001d3a:	200e      	movs	r0, #14
 8001d3c:	f7ff fadc 	bl	80012f8 <CLCD_Puts>
				sprintf(str, "    ");
 8001d40:	4987      	ldr	r1, [pc, #540]	@ (8001f60 <Clock_display_operation+0x2a4>)
 8001d42:	4886      	ldr	r0, [pc, #536]	@ (8001f5c <Clock_display_operation+0x2a0>)
 8001d44:	f004 fb70 	bl	8006428 <siprintf>
				CLCD_Puts(6, 0, str);
 8001d48:	4a84      	ldr	r2, [pc, #528]	@ (8001f5c <Clock_display_operation+0x2a0>)
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	2006      	movs	r0, #6
 8001d4e:	f7ff fad3 	bl	80012f8 <CLCD_Puts>
				break;
 8001d52:	e06c      	b.n	8001e2e <Clock_display_operation+0x172>
			case 1:
				sprintf(str, "%04d", (int) year);
 8001d54:	4b83      	ldr	r3, [pc, #524]	@ (8001f64 <Clock_display_operation+0x2a8>)
 8001d56:	881b      	ldrh	r3, [r3, #0]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4983      	ldr	r1, [pc, #524]	@ (8001f68 <Clock_display_operation+0x2ac>)
 8001d5c:	487f      	ldr	r0, [pc, #508]	@ (8001f5c <Clock_display_operation+0x2a0>)
 8001d5e:	f004 fb63 	bl	8006428 <siprintf>
				CLCD_Puts(6, 0, str);
 8001d62:	4a7e      	ldr	r2, [pc, #504]	@ (8001f5c <Clock_display_operation+0x2a0>)
 8001d64:	2100      	movs	r1, #0
 8001d66:	2006      	movs	r0, #6
 8001d68:	f7ff fac6 	bl	80012f8 <CLCD_Puts>
				sprintf(str, "  ");
 8001d6c:	497f      	ldr	r1, [pc, #508]	@ (8001f6c <Clock_display_operation+0x2b0>)
 8001d6e:	487b      	ldr	r0, [pc, #492]	@ (8001f5c <Clock_display_operation+0x2a0>)
 8001d70:	f004 fb5a 	bl	8006428 <siprintf>
				CLCD_Puts(11, 0, str);
 8001d74:	4a79      	ldr	r2, [pc, #484]	@ (8001f5c <Clock_display_operation+0x2a0>)
 8001d76:	2100      	movs	r1, #0
 8001d78:	200b      	movs	r0, #11
 8001d7a:	f7ff fabd 	bl	80012f8 <CLCD_Puts>
				break;
 8001d7e:	e056      	b.n	8001e2e <Clock_display_operation+0x172>
			case 2:
				sprintf(str, "%02d", (int) month);
 8001d80:	4b7b      	ldr	r3, [pc, #492]	@ (8001f70 <Clock_display_operation+0x2b4>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	461a      	mov	r2, r3
 8001d86:	4974      	ldr	r1, [pc, #464]	@ (8001f58 <Clock_display_operation+0x29c>)
 8001d88:	4874      	ldr	r0, [pc, #464]	@ (8001f5c <Clock_display_operation+0x2a0>)
 8001d8a:	f004 fb4d 	bl	8006428 <siprintf>
				CLCD_Puts(11, 0, str);
 8001d8e:	4a73      	ldr	r2, [pc, #460]	@ (8001f5c <Clock_display_operation+0x2a0>)
 8001d90:	2100      	movs	r1, #0
 8001d92:	200b      	movs	r0, #11
 8001d94:	f7ff fab0 	bl	80012f8 <CLCD_Puts>
				sprintf(str, "  ");
 8001d98:	4974      	ldr	r1, [pc, #464]	@ (8001f6c <Clock_display_operation+0x2b0>)
 8001d9a:	4870      	ldr	r0, [pc, #448]	@ (8001f5c <Clock_display_operation+0x2a0>)
 8001d9c:	f004 fb44 	bl	8006428 <siprintf>
				CLCD_Puts(14, 0, str);
 8001da0:	4a6e      	ldr	r2, [pc, #440]	@ (8001f5c <Clock_display_operation+0x2a0>)
 8001da2:	2100      	movs	r1, #0
 8001da4:	200e      	movs	r0, #14
 8001da6:	f7ff faa7 	bl	80012f8 <CLCD_Puts>
				break;
 8001daa:	e040      	b.n	8001e2e <Clock_display_operation+0x172>
			case 3:
				sprintf(str, "%02d", (int) day);
 8001dac:	4b71      	ldr	r3, [pc, #452]	@ (8001f74 <Clock_display_operation+0x2b8>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	461a      	mov	r2, r3
 8001db2:	4969      	ldr	r1, [pc, #420]	@ (8001f58 <Clock_display_operation+0x29c>)
 8001db4:	4869      	ldr	r0, [pc, #420]	@ (8001f5c <Clock_display_operation+0x2a0>)
 8001db6:	f004 fb37 	bl	8006428 <siprintf>
				CLCD_Puts(14, 0, str);
 8001dba:	4a68      	ldr	r2, [pc, #416]	@ (8001f5c <Clock_display_operation+0x2a0>)
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	200e      	movs	r0, #14
 8001dc0:	f7ff fa9a 	bl	80012f8 <CLCD_Puts>
				sprintf(str, "  ");
 8001dc4:	4969      	ldr	r1, [pc, #420]	@ (8001f6c <Clock_display_operation+0x2b0>)
 8001dc6:	4865      	ldr	r0, [pc, #404]	@ (8001f5c <Clock_display_operation+0x2a0>)
 8001dc8:	f004 fb2e 	bl	8006428 <siprintf>
				CLCD_Puts(8, 1, str);
 8001dcc:	4a63      	ldr	r2, [pc, #396]	@ (8001f5c <Clock_display_operation+0x2a0>)
 8001dce:	2101      	movs	r1, #1
 8001dd0:	2008      	movs	r0, #8
 8001dd2:	f7ff fa91 	bl	80012f8 <CLCD_Puts>
				break;
 8001dd6:	e02a      	b.n	8001e2e <Clock_display_operation+0x172>
			case 4:
				sprintf(str, "%02d", displayHour);
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	495e      	ldr	r1, [pc, #376]	@ (8001f58 <Clock_display_operation+0x29c>)
 8001dde:	485f      	ldr	r0, [pc, #380]	@ (8001f5c <Clock_display_operation+0x2a0>)
 8001de0:	f004 fb22 	bl	8006428 <siprintf>
				CLCD_Puts(8, 1, str);
 8001de4:	4a5d      	ldr	r2, [pc, #372]	@ (8001f5c <Clock_display_operation+0x2a0>)
 8001de6:	2101      	movs	r1, #1
 8001de8:	2008      	movs	r0, #8
 8001dea:	f7ff fa85 	bl	80012f8 <CLCD_Puts>
				sprintf(str, "  ");
 8001dee:	495f      	ldr	r1, [pc, #380]	@ (8001f6c <Clock_display_operation+0x2b0>)
 8001df0:	485a      	ldr	r0, [pc, #360]	@ (8001f5c <Clock_display_operation+0x2a0>)
 8001df2:	f004 fb19 	bl	8006428 <siprintf>
				CLCD_Puts(11, 1, str);
 8001df6:	4a59      	ldr	r2, [pc, #356]	@ (8001f5c <Clock_display_operation+0x2a0>)
 8001df8:	2101      	movs	r1, #1
 8001dfa:	200b      	movs	r0, #11
 8001dfc:	f7ff fa7c 	bl	80012f8 <CLCD_Puts>
				break;
 8001e00:	e015      	b.n	8001e2e <Clock_display_operation+0x172>
			case 5:
				sprintf(str, "%02d", (int) minute);
 8001e02:	4b5d      	ldr	r3, [pc, #372]	@ (8001f78 <Clock_display_operation+0x2bc>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	461a      	mov	r2, r3
 8001e08:	4953      	ldr	r1, [pc, #332]	@ (8001f58 <Clock_display_operation+0x29c>)
 8001e0a:	4854      	ldr	r0, [pc, #336]	@ (8001f5c <Clock_display_operation+0x2a0>)
 8001e0c:	f004 fb0c 	bl	8006428 <siprintf>
				CLCD_Puts(11, 1, str);
 8001e10:	4a52      	ldr	r2, [pc, #328]	@ (8001f5c <Clock_display_operation+0x2a0>)
 8001e12:	2101      	movs	r1, #1
 8001e14:	200b      	movs	r0, #11
 8001e16:	f7ff fa6f 	bl	80012f8 <CLCD_Puts>
				sprintf(str, "  ");
 8001e1a:	4954      	ldr	r1, [pc, #336]	@ (8001f6c <Clock_display_operation+0x2b0>)
 8001e1c:	484f      	ldr	r0, [pc, #316]	@ (8001f5c <Clock_display_operation+0x2a0>)
 8001e1e:	f004 fb03 	bl	8006428 <siprintf>
				CLCD_Puts(14, 1, str);
 8001e22:	4a4e      	ldr	r2, [pc, #312]	@ (8001f5c <Clock_display_operation+0x2a0>)
 8001e24:	2101      	movs	r1, #1
 8001e26:	200e      	movs	r0, #14
 8001e28:	f7ff fa66 	bl	80012f8 <CLCD_Puts>
				break;
 8001e2c:	bf00      	nop
			}
			_7SEG_SetNumber(DGT2, second % 10, ON);
 8001e2e:	4b49      	ldr	r3, [pc, #292]	@ (8001f54 <Clock_display_operation+0x298>)
 8001e30:	781a      	ldrb	r2, [r3, #0]
 8001e32:	4b52      	ldr	r3, [pc, #328]	@ (8001f7c <Clock_display_operation+0x2c0>)
 8001e34:	fba3 1302 	umull	r1, r3, r3, r2
 8001e38:	08d9      	lsrs	r1, r3, #3
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	440b      	add	r3, r1
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2201      	movs	r2, #1
 8001e48:	4619      	mov	r1, r3
 8001e4a:	2001      	movs	r0, #1
 8001e4c:	f7fe fc6e 	bl	800072c <_7SEG_SetNumber>
 8001e50:	e046      	b.n	8001ee0 <Clock_display_operation+0x224>
		}

		else {
			sprintf(str, "%04d.%02d.%02d", (int) year, (int) month, (int) day);
 8001e52:	4b44      	ldr	r3, [pc, #272]	@ (8001f64 <Clock_display_operation+0x2a8>)
 8001e54:	881b      	ldrh	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	4b45      	ldr	r3, [pc, #276]	@ (8001f70 <Clock_display_operation+0x2b4>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4b45      	ldr	r3, [pc, #276]	@ (8001f74 <Clock_display_operation+0x2b8>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	460b      	mov	r3, r1
 8001e66:	4946      	ldr	r1, [pc, #280]	@ (8001f80 <Clock_display_operation+0x2c4>)
 8001e68:	483c      	ldr	r0, [pc, #240]	@ (8001f5c <Clock_display_operation+0x2a0>)
 8001e6a:	f004 fadd 	bl	8006428 <siprintf>
			CLCD_Puts(6, 0, str);
 8001e6e:	4a3b      	ldr	r2, [pc, #236]	@ (8001f5c <Clock_display_operation+0x2a0>)
 8001e70:	2100      	movs	r1, #0
 8001e72:	2006      	movs	r0, #6
 8001e74:	f7ff fa40 	bl	80012f8 <CLCD_Puts>
			period = (hour < 12) ? "AM" : "PM";
 8001e78:	4b31      	ldr	r3, [pc, #196]	@ (8001f40 <Clock_display_operation+0x284>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b0b      	cmp	r3, #11
 8001e7e:	d801      	bhi.n	8001e84 <Clock_display_operation+0x1c8>
 8001e80:	4b40      	ldr	r3, [pc, #256]	@ (8001f84 <Clock_display_operation+0x2c8>)
 8001e82:	e000      	b.n	8001e86 <Clock_display_operation+0x1ca>
 8001e84:	4b40      	ldr	r3, [pc, #256]	@ (8001f88 <Clock_display_operation+0x2cc>)
 8001e86:	603b      	str	r3, [r7, #0]
			sprintf(str, "SET  %s", period);
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	4940      	ldr	r1, [pc, #256]	@ (8001f8c <Clock_display_operation+0x2d0>)
 8001e8c:	4833      	ldr	r0, [pc, #204]	@ (8001f5c <Clock_display_operation+0x2a0>)
 8001e8e:	f004 facb 	bl	8006428 <siprintf>
			CLCD_Puts(0, 1, str);
 8001e92:	4a32      	ldr	r2, [pc, #200]	@ (8001f5c <Clock_display_operation+0x2a0>)
 8001e94:	2101      	movs	r1, #1
 8001e96:	2000      	movs	r0, #0
 8001e98:	f7ff fa2e 	bl	80012f8 <CLCD_Puts>
			sprintf(str, "%02d:%02d:%02d", displayHour, (int) minute,
 8001e9c:	79fa      	ldrb	r2, [r7, #7]
 8001e9e:	4b36      	ldr	r3, [pc, #216]	@ (8001f78 <Clock_display_operation+0x2bc>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4b2b      	ldr	r3, [pc, #172]	@ (8001f54 <Clock_display_operation+0x298>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4938      	ldr	r1, [pc, #224]	@ (8001f90 <Clock_display_operation+0x2d4>)
 8001eae:	482b      	ldr	r0, [pc, #172]	@ (8001f5c <Clock_display_operation+0x2a0>)
 8001eb0:	f004 faba 	bl	8006428 <siprintf>
					(int) second);
			CLCD_Puts(8, 1, str);
 8001eb4:	4a29      	ldr	r2, [pc, #164]	@ (8001f5c <Clock_display_operation+0x2a0>)
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	2008      	movs	r0, #8
 8001eba:	f7ff fa1d 	bl	80012f8 <CLCD_Puts>
			_7SEG_SetNumber(DGT2, second % 10, OFF);
 8001ebe:	4b25      	ldr	r3, [pc, #148]	@ (8001f54 <Clock_display_operation+0x298>)
 8001ec0:	781a      	ldrb	r2, [r3, #0]
 8001ec2:	4b2e      	ldr	r3, [pc, #184]	@ (8001f7c <Clock_display_operation+0x2c0>)
 8001ec4:	fba3 1302 	umull	r1, r3, r3, r2
 8001ec8:	08d9      	lsrs	r1, r3, #3
 8001eca:	460b      	mov	r3, r1
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	440b      	add	r3, r1
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	4619      	mov	r1, r3
 8001eda:	2001      	movs	r0, #1
 8001edc:	f7fe fc26 	bl	800072c <_7SEG_SetNumber>

		}
		_7SEG_SetNumber(DGT1, second / 10, OFF);
 8001ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8001f54 <Clock_display_operation+0x298>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	4a25      	ldr	r2, [pc, #148]	@ (8001f7c <Clock_display_operation+0x2c0>)
 8001ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eea:	08db      	lsrs	r3, r3, #3
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2200      	movs	r2, #0
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	f7fe fc1a 	bl	800072c <_7SEG_SetNumber>
			sprintf(str, "%s %02d %02d", period, displayHour, (int) minute);
			CLCD_Puts(8, 1, str);
		}
	}

}
 8001ef8:	e0d1      	b.n	800209e <Clock_display_operation+0x3e2>
		if (clock_time / 100 > 5) {
 8001efa:	4b14      	ldr	r3, [pc, #80]	@ (8001f4c <Clock_display_operation+0x290>)
 8001efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f00:	f5b2 7f16 	cmp.w	r2, #600	@ 0x258
 8001f04:	f173 0300 	sbcs.w	r3, r3, #0
 8001f08:	d346      	bcc.n	8001f98 <Clock_display_operation+0x2dc>
			sprintf(str, " ");
 8001f0a:	4922      	ldr	r1, [pc, #136]	@ (8001f94 <Clock_display_operation+0x2d8>)
 8001f0c:	4813      	ldr	r0, [pc, #76]	@ (8001f5c <Clock_display_operation+0x2a0>)
 8001f0e:	f004 fa8b 	bl	8006428 <siprintf>
			CLCD_Puts(13, 1, str);
 8001f12:	4a12      	ldr	r2, [pc, #72]	@ (8001f5c <Clock_display_operation+0x2a0>)
 8001f14:	2101      	movs	r1, #1
 8001f16:	200d      	movs	r0, #13
 8001f18:	f7ff f9ee 	bl	80012f8 <CLCD_Puts>
			_7SEG_SetNumber(DGT2, second % 10, ON);
 8001f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001f54 <Clock_display_operation+0x298>)
 8001f1e:	781a      	ldrb	r2, [r3, #0]
 8001f20:	4b16      	ldr	r3, [pc, #88]	@ (8001f7c <Clock_display_operation+0x2c0>)
 8001f22:	fba3 1302 	umull	r1, r3, r3, r2
 8001f26:	08d9      	lsrs	r1, r3, #3
 8001f28:	460b      	mov	r3, r1
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2201      	movs	r2, #1
 8001f36:	4619      	mov	r1, r3
 8001f38:	2001      	movs	r0, #1
 8001f3a:	f7fe fbf7 	bl	800072c <_7SEG_SetNumber>
 8001f3e:	e045      	b.n	8001fcc <Clock_display_operation+0x310>
 8001f40:	20000005 	.word	0x20000005
 8001f44:	aaaaaaab 	.word	0xaaaaaaab
 8001f48:	20000158 	.word	0x20000158
 8001f4c:	20000150 	.word	0x20000150
 8001f50:	20000159 	.word	0x20000159
 8001f54:	20000007 	.word	0x20000007
 8001f58:	08006e00 	.word	0x08006e00
 8001f5c:	20000138 	.word	0x20000138
 8001f60:	08006e08 	.word	0x08006e08
 8001f64:	2000000a 	.word	0x2000000a
 8001f68:	08006e10 	.word	0x08006e10
 8001f6c:	08006e18 	.word	0x08006e18
 8001f70:	2000000c 	.word	0x2000000c
 8001f74:	2000000d 	.word	0x2000000d
 8001f78:	20000006 	.word	0x20000006
 8001f7c:	cccccccd 	.word	0xcccccccd
 8001f80:	08006e1c 	.word	0x08006e1c
 8001f84:	08006e2c 	.word	0x08006e2c
 8001f88:	08006e30 	.word	0x08006e30
 8001f8c:	08006e34 	.word	0x08006e34
 8001f90:	08006e3c 	.word	0x08006e3c
 8001f94:	08006e4c 	.word	0x08006e4c
			sprintf(str, ":");
 8001f98:	4943      	ldr	r1, [pc, #268]	@ (80020a8 <Clock_display_operation+0x3ec>)
 8001f9a:	4844      	ldr	r0, [pc, #272]	@ (80020ac <Clock_display_operation+0x3f0>)
 8001f9c:	f004 fa44 	bl	8006428 <siprintf>
			CLCD_Puts(13, 1, str);
 8001fa0:	4a42      	ldr	r2, [pc, #264]	@ (80020ac <Clock_display_operation+0x3f0>)
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	200d      	movs	r0, #13
 8001fa6:	f7ff f9a7 	bl	80012f8 <CLCD_Puts>
			_7SEG_SetNumber(DGT2, second % 10, OFF);
 8001faa:	4b41      	ldr	r3, [pc, #260]	@ (80020b0 <Clock_display_operation+0x3f4>)
 8001fac:	781a      	ldrb	r2, [r3, #0]
 8001fae:	4b41      	ldr	r3, [pc, #260]	@ (80020b4 <Clock_display_operation+0x3f8>)
 8001fb0:	fba3 1302 	umull	r1, r3, r3, r2
 8001fb4:	08d9      	lsrs	r1, r3, #3
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	440b      	add	r3, r1
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	2001      	movs	r0, #1
 8001fc8:	f7fe fbb0 	bl	800072c <_7SEG_SetNumber>
		_7SEG_SetNumber(DGT1, second / 10, OFF);
 8001fcc:	4b38      	ldr	r3, [pc, #224]	@ (80020b0 <Clock_display_operation+0x3f4>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	4a38      	ldr	r2, [pc, #224]	@ (80020b4 <Clock_display_operation+0x3f8>)
 8001fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd6:	08db      	lsrs	r3, r3, #3
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2200      	movs	r2, #0
 8001fdc:	4619      	mov	r1, r3
 8001fde:	2000      	movs	r0, #0
 8001fe0:	f7fe fba4 	bl	800072c <_7SEG_SetNumber>
		if (buzzer == false) {
 8001fe4:	4b34      	ldr	r3, [pc, #208]	@ (80020b8 <Clock_display_operation+0x3fc>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	f083 0301 	eor.w	r3, r3, #1
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d004      	beq.n	8001ffc <Clock_display_operation+0x340>
			sprintf(str, "BZ OFF ");
 8001ff2:	4932      	ldr	r1, [pc, #200]	@ (80020bc <Clock_display_operation+0x400>)
 8001ff4:	482d      	ldr	r0, [pc, #180]	@ (80020ac <Clock_display_operation+0x3f0>)
 8001ff6:	f004 fa17 	bl	8006428 <siprintf>
 8001ffa:	e003      	b.n	8002004 <Clock_display_operation+0x348>
			sprintf(str, "BZ ON  ");
 8001ffc:	4930      	ldr	r1, [pc, #192]	@ (80020c0 <Clock_display_operation+0x404>)
 8001ffe:	482b      	ldr	r0, [pc, #172]	@ (80020ac <Clock_display_operation+0x3f0>)
 8002000:	f004 fa12 	bl	8006428 <siprintf>
		CLCD_Puts(0, 1, str);
 8002004:	4a29      	ldr	r2, [pc, #164]	@ (80020ac <Clock_display_operation+0x3f0>)
 8002006:	2101      	movs	r1, #1
 8002008:	2000      	movs	r0, #0
 800200a:	f7ff f975 	bl	80012f8 <CLCD_Puts>
		sprintf(str, "%04d.%02d.%02d", (int) year, (int) month, (int) day);
 800200e:	4b2d      	ldr	r3, [pc, #180]	@ (80020c4 <Clock_display_operation+0x408>)
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	461a      	mov	r2, r3
 8002014:	4b2c      	ldr	r3, [pc, #176]	@ (80020c8 <Clock_display_operation+0x40c>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	4619      	mov	r1, r3
 800201a:	4b2c      	ldr	r3, [pc, #176]	@ (80020cc <Clock_display_operation+0x410>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	460b      	mov	r3, r1
 8002022:	492b      	ldr	r1, [pc, #172]	@ (80020d0 <Clock_display_operation+0x414>)
 8002024:	4821      	ldr	r0, [pc, #132]	@ (80020ac <Clock_display_operation+0x3f0>)
 8002026:	f004 f9ff 	bl	8006428 <siprintf>
		CLCD_Puts(6, 0, str);
 800202a:	4a20      	ldr	r2, [pc, #128]	@ (80020ac <Clock_display_operation+0x3f0>)
 800202c:	2100      	movs	r1, #0
 800202e:	2006      	movs	r0, #6
 8002030:	f7ff f962 	bl	80012f8 <CLCD_Puts>
		sprintf(str, "TIME");
 8002034:	4927      	ldr	r1, [pc, #156]	@ (80020d4 <Clock_display_operation+0x418>)
 8002036:	481d      	ldr	r0, [pc, #116]	@ (80020ac <Clock_display_operation+0x3f0>)
 8002038:	f004 f9f6 	bl	8006428 <siprintf>
		CLCD_Puts(0, 0, str);
 800203c:	4a1b      	ldr	r2, [pc, #108]	@ (80020ac <Clock_display_operation+0x3f0>)
 800203e:	2100      	movs	r1, #0
 8002040:	2000      	movs	r0, #0
 8002042:	f7ff f959 	bl	80012f8 <CLCD_Puts>
		if (changed == false) { // NOT AM/PM
 8002046:	4b24      	ldr	r3, [pc, #144]	@ (80020d8 <Clock_display_operation+0x41c>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	f083 0301 	eor.w	r3, r3, #1
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00e      	beq.n	8002072 <Clock_display_operation+0x3b6>
			sprintf(str, "   %02d %02d", (int) hour, (int) minute);
 8002054:	4b21      	ldr	r3, [pc, #132]	@ (80020dc <Clock_display_operation+0x420>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	4b21      	ldr	r3, [pc, #132]	@ (80020e0 <Clock_display_operation+0x424>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	4921      	ldr	r1, [pc, #132]	@ (80020e4 <Clock_display_operation+0x428>)
 8002060:	4812      	ldr	r0, [pc, #72]	@ (80020ac <Clock_display_operation+0x3f0>)
 8002062:	f004 f9e1 	bl	8006428 <siprintf>
			CLCD_Puts(8, 1, str);
 8002066:	4a11      	ldr	r2, [pc, #68]	@ (80020ac <Clock_display_operation+0x3f0>)
 8002068:	2101      	movs	r1, #1
 800206a:	2008      	movs	r0, #8
 800206c:	f7ff f944 	bl	80012f8 <CLCD_Puts>
}
 8002070:	e015      	b.n	800209e <Clock_display_operation+0x3e2>
			period = (hour < 12) ? "AM" : "PM";
 8002072:	4b1a      	ldr	r3, [pc, #104]	@ (80020dc <Clock_display_operation+0x420>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b0b      	cmp	r3, #11
 8002078:	d801      	bhi.n	800207e <Clock_display_operation+0x3c2>
 800207a:	4b1b      	ldr	r3, [pc, #108]	@ (80020e8 <Clock_display_operation+0x42c>)
 800207c:	e000      	b.n	8002080 <Clock_display_operation+0x3c4>
 800207e:	4b1b      	ldr	r3, [pc, #108]	@ (80020ec <Clock_display_operation+0x430>)
 8002080:	603b      	str	r3, [r7, #0]
			sprintf(str, "%s %02d %02d", period, displayHour, (int) minute);
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	4a16      	ldr	r2, [pc, #88]	@ (80020e0 <Clock_display_operation+0x424>)
 8002086:	7812      	ldrb	r2, [r2, #0]
 8002088:	9200      	str	r2, [sp, #0]
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	4918      	ldr	r1, [pc, #96]	@ (80020f0 <Clock_display_operation+0x434>)
 800208e:	4807      	ldr	r0, [pc, #28]	@ (80020ac <Clock_display_operation+0x3f0>)
 8002090:	f004 f9ca 	bl	8006428 <siprintf>
			CLCD_Puts(8, 1, str);
 8002094:	4a05      	ldr	r2, [pc, #20]	@ (80020ac <Clock_display_operation+0x3f0>)
 8002096:	2101      	movs	r1, #1
 8002098:	2008      	movs	r0, #8
 800209a:	f7ff f92d 	bl	80012f8 <CLCD_Puts>
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	08006e50 	.word	0x08006e50
 80020ac:	20000138 	.word	0x20000138
 80020b0:	20000007 	.word	0x20000007
 80020b4:	cccccccd 	.word	0xcccccccd
 80020b8:	20000009 	.word	0x20000009
 80020bc:	08006e54 	.word	0x08006e54
 80020c0:	08006e5c 	.word	0x08006e5c
 80020c4:	2000000a 	.word	0x2000000a
 80020c8:	2000000c 	.word	0x2000000c
 80020cc:	2000000d 	.word	0x2000000d
 80020d0:	08006e1c 	.word	0x08006e1c
 80020d4:	08006e64 	.word	0x08006e64
 80020d8:	20000008 	.word	0x20000008
 80020dc:	20000005 	.word	0x20000005
 80020e0:	20000006 	.word	0x20000006
 80020e4:	08006e6c 	.word	0x08006e6c
 80020e8:	08006e2c 	.word	0x08006e2c
 80020ec:	08006e30 	.word	0x08006e30
 80020f0:	08006e7c 	.word	0x08006e7c

080020f4 <Clock_button_operation>:

void Clock_button_operation() {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
	if (sw1_released) {
 80020f8:	4b67      	ldr	r3, [pc, #412]	@ (8002298 <Clock_button_operation+0x1a4>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d018      	beq.n	8002132 <Clock_button_operation+0x3e>
		if (Press_Mode >= PRESS_MID) {
 8002100:	4b66      	ldr	r3, [pc, #408]	@ (800229c <Clock_button_operation+0x1a8>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d911      	bls.n	800212c <Clock_button_operation+0x38>
			clock_setmode = !clock_setmode; // Toggle timer setting mode
 8002108:	4b65      	ldr	r3, [pc, #404]	@ (80022a0 <Clock_button_operation+0x1ac>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	bf14      	ite	ne
 8002110:	2301      	movne	r3, #1
 8002112:	2300      	moveq	r3, #0
 8002114:	b2db      	uxtb	r3, r3
 8002116:	f083 0301 	eor.w	r3, r3, #1
 800211a:	b2db      	uxtb	r3, r3
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	b2da      	uxtb	r2, r3
 8002122:	4b5f      	ldr	r3, [pc, #380]	@ (80022a0 <Clock_button_operation+0x1ac>)
 8002124:	701a      	strb	r2, [r3, #0]
			Press_Mode = PRESS_NOT;
 8002126:	4b5d      	ldr	r3, [pc, #372]	@ (800229c <Clock_button_operation+0x1a8>)
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]
		}
		sw1_released = false;
 800212c:	4b5a      	ldr	r3, [pc, #360]	@ (8002298 <Clock_button_operation+0x1a4>)
 800212e:	2200      	movs	r2, #0
 8002130:	701a      	strb	r2, [r3, #0]
	}

	if (clock_setmode) {
 8002132:	4b5b      	ldr	r3, [pc, #364]	@ (80022a0 <Clock_button_operation+0x1ac>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d071      	beq.n	800221e <Clock_button_operation+0x12a>
		if (sw2_released == true) {
 800213a:	4b5a      	ldr	r3, [pc, #360]	@ (80022a4 <Clock_button_operation+0x1b0>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d004      	beq.n	800214c <Clock_button_operation+0x58>
			updateTime();
 8002142:	f000 f8c1 	bl	80022c8 <updateTime>
			sw2_released = false;
 8002146:	4b57      	ldr	r3, [pc, #348]	@ (80022a4 <Clock_button_operation+0x1b0>)
 8002148:	2200      	movs	r2, #0
 800214a:	701a      	strb	r2, [r3, #0]
		}

		if (sw2 == true) {
 800214c:	4b56      	ldr	r3, [pc, #344]	@ (80022a8 <Clock_button_operation+0x1b4>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d029      	beq.n	80021a8 <Clock_button_operation+0xb4>
			if (Press_Mode == PRESS_MID) {
 8002154:	4b51      	ldr	r3, [pc, #324]	@ (800229c <Clock_button_operation+0x1a8>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b02      	cmp	r3, #2
 800215a:	d111      	bne.n	8002180 <Clock_button_operation+0x8c>
				if (Run_Time >= 500) {
 800215c:	4b53      	ldr	r3, [pc, #332]	@ (80022ac <Clock_button_operation+0x1b8>)
 800215e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002162:	f5b2 7ffa 	cmp.w	r2, #500	@ 0x1f4
 8002166:	f173 0300 	sbcs.w	r3, r3, #0
 800216a:	d31d      	bcc.n	80021a8 <Clock_button_operation+0xb4>
					updateTime();
 800216c:	f000 f8ac 	bl	80022c8 <updateTime>
					Run_Time = 0;
 8002170:	494e      	ldr	r1, [pc, #312]	@ (80022ac <Clock_button_operation+0x1b8>)
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	e9c1 2300 	strd	r2, r3, [r1]
 800217e:	e013      	b.n	80021a8 <Clock_button_operation+0xb4>
				}
			} else if (Press_Mode == PRESS_LONG) {
 8002180:	4b46      	ldr	r3, [pc, #280]	@ (800229c <Clock_button_operation+0x1a8>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b03      	cmp	r3, #3
 8002186:	d10f      	bne.n	80021a8 <Clock_button_operation+0xb4>
				if (Run_Time >= 200) {
 8002188:	4b48      	ldr	r3, [pc, #288]	@ (80022ac <Clock_button_operation+0x1b8>)
 800218a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218e:	2ac8      	cmp	r2, #200	@ 0xc8
 8002190:	f173 0300 	sbcs.w	r3, r3, #0
 8002194:	d308      	bcc.n	80021a8 <Clock_button_operation+0xb4>
					updateTime();
 8002196:	f000 f897 	bl	80022c8 <updateTime>
					Run_Time = 0;
 800219a:	4944      	ldr	r1, [pc, #272]	@ (80022ac <Clock_button_operation+0x1b8>)
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	f04f 0300 	mov.w	r3, #0
 80021a4:	e9c1 2300 	strd	r2, r3, [r1]
				}
			}
		}

		if (sw3_released == true) {
 80021a8:	4b41      	ldr	r3, [pc, #260]	@ (80022b0 <Clock_button_operation+0x1bc>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d007      	beq.n	80021c0 <Clock_button_operation+0xcc>
			updateTime2(item_select);
 80021b0:	4b40      	ldr	r3, [pc, #256]	@ (80022b4 <Clock_button_operation+0x1c0>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f000 f969 	bl	800248c <updateTime2>
		sw3_released = false;
 80021ba:	4b3d      	ldr	r3, [pc, #244]	@ (80022b0 <Clock_button_operation+0x1bc>)
 80021bc:	2200      	movs	r2, #0
 80021be:	701a      	strb	r2, [r3, #0]
		}

		if (sw3 == true) {
 80021c0:	4b3d      	ldr	r3, [pc, #244]	@ (80022b8 <Clock_button_operation+0x1c4>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d064      	beq.n	8002292 <Clock_button_operation+0x19e>
			if (Press_Mode == PRESS_MID) {
 80021c8:	4b34      	ldr	r3, [pc, #208]	@ (800229c <Clock_button_operation+0x1a8>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d111      	bne.n	80021f4 <Clock_button_operation+0x100>
				if (Run_Time >= 500) {
 80021d0:	4b36      	ldr	r3, [pc, #216]	@ (80022ac <Clock_button_operation+0x1b8>)
 80021d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d6:	f5b2 7ffa 	cmp.w	r2, #500	@ 0x1f4
 80021da:	f173 0300 	sbcs.w	r3, r3, #0
 80021de:	d358      	bcc.n	8002292 <Clock_button_operation+0x19e>
					updateTime2();
 80021e0:	f000 f954 	bl	800248c <updateTime2>
					Run_Time = 0;
 80021e4:	4931      	ldr	r1, [pc, #196]	@ (80022ac <Clock_button_operation+0x1b8>)
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	f04f 0300 	mov.w	r3, #0
 80021ee:	e9c1 2300 	strd	r2, r3, [r1]
			sw3_released = false;
		}

	}

}
 80021f2:	e04e      	b.n	8002292 <Clock_button_operation+0x19e>
			} else if (Press_Mode == PRESS_LONG) {
 80021f4:	4b29      	ldr	r3, [pc, #164]	@ (800229c <Clock_button_operation+0x1a8>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b03      	cmp	r3, #3
 80021fa:	d14a      	bne.n	8002292 <Clock_button_operation+0x19e>
				if (Run_Time >= 200) {
 80021fc:	4b2b      	ldr	r3, [pc, #172]	@ (80022ac <Clock_button_operation+0x1b8>)
 80021fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002202:	2ac8      	cmp	r2, #200	@ 0xc8
 8002204:	f173 0300 	sbcs.w	r3, r3, #0
 8002208:	d343      	bcc.n	8002292 <Clock_button_operation+0x19e>
					updateTime2();
 800220a:	f000 f93f 	bl	800248c <updateTime2>
					Run_Time = 0;
 800220e:	4927      	ldr	r1, [pc, #156]	@ (80022ac <Clock_button_operation+0x1b8>)
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	e9c1 2300 	strd	r2, r3, [r1]
}
 800221c:	e039      	b.n	8002292 <Clock_button_operation+0x19e>
		if (sw4_released == true) {
 800221e:	4b27      	ldr	r3, [pc, #156]	@ (80022bc <Clock_button_operation+0x1c8>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d011      	beq.n	800224a <Clock_button_operation+0x156>
			changed = !changed;
 8002226:	4b26      	ldr	r3, [pc, #152]	@ (80022c0 <Clock_button_operation+0x1cc>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	bf14      	ite	ne
 800222e:	2301      	movne	r3, #1
 8002230:	2300      	moveq	r3, #0
 8002232:	b2db      	uxtb	r3, r3
 8002234:	f083 0301 	eor.w	r3, r3, #1
 8002238:	b2db      	uxtb	r3, r3
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	b2da      	uxtb	r2, r3
 8002240:	4b1f      	ldr	r3, [pc, #124]	@ (80022c0 <Clock_button_operation+0x1cc>)
 8002242:	701a      	strb	r2, [r3, #0]
			sw4_released = false;
 8002244:	4b1d      	ldr	r3, [pc, #116]	@ (80022bc <Clock_button_operation+0x1c8>)
 8002246:	2200      	movs	r2, #0
 8002248:	701a      	strb	r2, [r3, #0]
		if (sw2_released == true && !clock_setmode) {
 800224a:	4b16      	ldr	r3, [pc, #88]	@ (80022a4 <Clock_button_operation+0x1b0>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d018      	beq.n	8002284 <Clock_button_operation+0x190>
 8002252:	4b13      	ldr	r3, [pc, #76]	@ (80022a0 <Clock_button_operation+0x1ac>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	f083 0301 	eor.w	r3, r3, #1
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d011      	beq.n	8002284 <Clock_button_operation+0x190>
			buzzer = !buzzer;
 8002260:	4b18      	ldr	r3, [pc, #96]	@ (80022c4 <Clock_button_operation+0x1d0>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	bf14      	ite	ne
 8002268:	2301      	movne	r3, #1
 800226a:	2300      	moveq	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	f083 0301 	eor.w	r3, r3, #1
 8002272:	b2db      	uxtb	r3, r3
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	b2da      	uxtb	r2, r3
 800227a:	4b12      	ldr	r3, [pc, #72]	@ (80022c4 <Clock_button_operation+0x1d0>)
 800227c:	701a      	strb	r2, [r3, #0]
			sw2_released = false;
 800227e:	4b09      	ldr	r3, [pc, #36]	@ (80022a4 <Clock_button_operation+0x1b0>)
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
		if (sw3_released) {
 8002284:	4b0a      	ldr	r3, [pc, #40]	@ (80022b0 <Clock_button_operation+0x1bc>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d002      	beq.n	8002292 <Clock_button_operation+0x19e>
			sw3_released = false;
 800228c:	4b08      	ldr	r3, [pc, #32]	@ (80022b0 <Clock_button_operation+0x1bc>)
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]
}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000124 	.word	0x20000124
 800229c:	2000014e 	.word	0x2000014e
 80022a0:	20000158 	.word	0x20000158
 80022a4:	20000125 	.word	0x20000125
 80022a8:	20000121 	.word	0x20000121
 80022ac:	20000130 	.word	0x20000130
 80022b0:	20000126 	.word	0x20000126
 80022b4:	20000159 	.word	0x20000159
 80022b8:	20000122 	.word	0x20000122
 80022bc:	20000128 	.word	0x20000128
 80022c0:	20000008 	.word	0x20000008
 80022c4:	20000009 	.word	0x20000009

080022c8 <updateTime>:


void updateTime() {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
	switch (item_select) {
 80022cc:	4b68      	ldr	r3, [pc, #416]	@ (8002470 <updateTime+0x1a8>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b05      	cmp	r3, #5
 80022d2:	f200 80cb 	bhi.w	800246c <updateTime+0x1a4>
 80022d6:	a201      	add	r2, pc, #4	@ (adr r2, 80022dc <updateTime+0x14>)
 80022d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022dc:	080022f5 	.word	0x080022f5
 80022e0:	08002317 	.word	0x08002317
 80022e4:	08002335 	.word	0x08002335
 80022e8:	08002413 	.word	0x08002413
 80022ec:	08002431 	.word	0x08002431
 80022f0:	0800244f 	.word	0x0800244f
	case 0:
		if (year == 9999) {
 80022f4:	4b5f      	ldr	r3, [pc, #380]	@ (8002474 <updateTime+0x1ac>)
 80022f6:	881b      	ldrh	r3, [r3, #0]
 80022f8:	f242 720f 	movw	r2, #9999	@ 0x270f
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d103      	bne.n	8002308 <updateTime+0x40>
			year = 0;
 8002300:	4b5c      	ldr	r3, [pc, #368]	@ (8002474 <updateTime+0x1ac>)
 8002302:	2200      	movs	r2, #0
 8002304:	801a      	strh	r2, [r3, #0]
		} else {
			year++;
		}
		break;
 8002306:	e0b1      	b.n	800246c <updateTime+0x1a4>
			year++;
 8002308:	4b5a      	ldr	r3, [pc, #360]	@ (8002474 <updateTime+0x1ac>)
 800230a:	881b      	ldrh	r3, [r3, #0]
 800230c:	3301      	adds	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	4b58      	ldr	r3, [pc, #352]	@ (8002474 <updateTime+0x1ac>)
 8002312:	801a      	strh	r2, [r3, #0]
		break;
 8002314:	e0aa      	b.n	800246c <updateTime+0x1a4>
	case 1:
		if (month == 12) {
 8002316:	4b58      	ldr	r3, [pc, #352]	@ (8002478 <updateTime+0x1b0>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b0c      	cmp	r3, #12
 800231c:	d103      	bne.n	8002326 <updateTime+0x5e>
			month = 1;
 800231e:	4b56      	ldr	r3, [pc, #344]	@ (8002478 <updateTime+0x1b0>)
 8002320:	2201      	movs	r2, #1
 8002322:	701a      	strb	r2, [r3, #0]
		} else {
			month++;
		}
		break;
 8002324:	e0a2      	b.n	800246c <updateTime+0x1a4>
			month++;
 8002326:	4b54      	ldr	r3, [pc, #336]	@ (8002478 <updateTime+0x1b0>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	3301      	adds	r3, #1
 800232c:	b2da      	uxtb	r2, r3
 800232e:	4b52      	ldr	r3, [pc, #328]	@ (8002478 <updateTime+0x1b0>)
 8002330:	701a      	strb	r2, [r3, #0]
		break;
 8002332:	e09b      	b.n	800246c <updateTime+0x1a4>
	case 2:
		if (isLeapYear(year) && day == 29 && month == 2) {
 8002334:	4b4f      	ldr	r3, [pc, #316]	@ (8002474 <updateTime+0x1ac>)
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff fc47 	bl	8001bcc <isLeapYear>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00b      	beq.n	800235c <updateTime+0x94>
 8002344:	4b4d      	ldr	r3, [pc, #308]	@ (800247c <updateTime+0x1b4>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b1d      	cmp	r3, #29
 800234a:	d107      	bne.n	800235c <updateTime+0x94>
 800234c:	4b4a      	ldr	r3, [pc, #296]	@ (8002478 <updateTime+0x1b0>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b02      	cmp	r3, #2
 8002352:	d103      	bne.n	800235c <updateTime+0x94>
			day = 1;
 8002354:	4b49      	ldr	r3, [pc, #292]	@ (800247c <updateTime+0x1b4>)
 8002356:	2201      	movs	r2, #1
 8002358:	701a      	strb	r2, [r3, #0]
 800235a:	e059      	b.n	8002410 <updateTime+0x148>
		}

		else if (!isLeapYear(year) && day == 28 && month == 2) {
 800235c:	4b45      	ldr	r3, [pc, #276]	@ (8002474 <updateTime+0x1ac>)
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff fc33 	bl	8001bcc <isLeapYear>
 8002366:	4603      	mov	r3, r0
 8002368:	f083 0301 	eor.w	r3, r3, #1
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00b      	beq.n	800238a <updateTime+0xc2>
 8002372:	4b42      	ldr	r3, [pc, #264]	@ (800247c <updateTime+0x1b4>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b1c      	cmp	r3, #28
 8002378:	d107      	bne.n	800238a <updateTime+0xc2>
 800237a:	4b3f      	ldr	r3, [pc, #252]	@ (8002478 <updateTime+0x1b0>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b02      	cmp	r3, #2
 8002380:	d103      	bne.n	800238a <updateTime+0xc2>
			day = 1;
 8002382:	4b3e      	ldr	r3, [pc, #248]	@ (800247c <updateTime+0x1b4>)
 8002384:	2201      	movs	r2, #1
 8002386:	701a      	strb	r2, [r3, #0]
 8002388:	e042      	b.n	8002410 <updateTime+0x148>
		}

		else if (day == 31
 800238a:	4b3c      	ldr	r3, [pc, #240]	@ (800247c <updateTime+0x1b4>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b1f      	cmp	r3, #31
 8002390:	d11f      	bne.n	80023d2 <updateTime+0x10a>
				&& (month == 1 || month == 3 || month == 5 || month == 7
 8002392:	4b39      	ldr	r3, [pc, #228]	@ (8002478 <updateTime+0x1b0>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d017      	beq.n	80023ca <updateTime+0x102>
 800239a:	4b37      	ldr	r3, [pc, #220]	@ (8002478 <updateTime+0x1b0>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b03      	cmp	r3, #3
 80023a0:	d013      	beq.n	80023ca <updateTime+0x102>
 80023a2:	4b35      	ldr	r3, [pc, #212]	@ (8002478 <updateTime+0x1b0>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b05      	cmp	r3, #5
 80023a8:	d00f      	beq.n	80023ca <updateTime+0x102>
 80023aa:	4b33      	ldr	r3, [pc, #204]	@ (8002478 <updateTime+0x1b0>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b07      	cmp	r3, #7
 80023b0:	d00b      	beq.n	80023ca <updateTime+0x102>
						|| month == 8 || month == 10 || month == 12)) {
 80023b2:	4b31      	ldr	r3, [pc, #196]	@ (8002478 <updateTime+0x1b0>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d007      	beq.n	80023ca <updateTime+0x102>
 80023ba:	4b2f      	ldr	r3, [pc, #188]	@ (8002478 <updateTime+0x1b0>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b0a      	cmp	r3, #10
 80023c0:	d003      	beq.n	80023ca <updateTime+0x102>
 80023c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002478 <updateTime+0x1b0>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b0c      	cmp	r3, #12
 80023c8:	d103      	bne.n	80023d2 <updateTime+0x10a>
			day = 1;
 80023ca:	4b2c      	ldr	r3, [pc, #176]	@ (800247c <updateTime+0x1b4>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	701a      	strb	r2, [r3, #0]
 80023d0:	e01e      	b.n	8002410 <updateTime+0x148>
		}

		else if (day == 30
 80023d2:	4b2a      	ldr	r3, [pc, #168]	@ (800247c <updateTime+0x1b4>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b1e      	cmp	r3, #30
 80023d8:	d113      	bne.n	8002402 <updateTime+0x13a>
				&& (month == 4 || month == 6 || month == 9 || month == 11)) {
 80023da:	4b27      	ldr	r3, [pc, #156]	@ (8002478 <updateTime+0x1b0>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d00b      	beq.n	80023fa <updateTime+0x132>
 80023e2:	4b25      	ldr	r3, [pc, #148]	@ (8002478 <updateTime+0x1b0>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b06      	cmp	r3, #6
 80023e8:	d007      	beq.n	80023fa <updateTime+0x132>
 80023ea:	4b23      	ldr	r3, [pc, #140]	@ (8002478 <updateTime+0x1b0>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b09      	cmp	r3, #9
 80023f0:	d003      	beq.n	80023fa <updateTime+0x132>
 80023f2:	4b21      	ldr	r3, [pc, #132]	@ (8002478 <updateTime+0x1b0>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b0b      	cmp	r3, #11
 80023f8:	d103      	bne.n	8002402 <updateTime+0x13a>
			day = 1;
 80023fa:	4b20      	ldr	r3, [pc, #128]	@ (800247c <updateTime+0x1b4>)
 80023fc:	2201      	movs	r2, #1
 80023fe:	701a      	strb	r2, [r3, #0]
 8002400:	e006      	b.n	8002410 <updateTime+0x148>
		}

		else {
			day++;
 8002402:	4b1e      	ldr	r3, [pc, #120]	@ (800247c <updateTime+0x1b4>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	3301      	adds	r3, #1
 8002408:	b2da      	uxtb	r2, r3
 800240a:	4b1c      	ldr	r3, [pc, #112]	@ (800247c <updateTime+0x1b4>)
 800240c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800240e:	e02d      	b.n	800246c <updateTime+0x1a4>
 8002410:	e02c      	b.n	800246c <updateTime+0x1a4>
	case 3:
		if (hour == 23) {
 8002412:	4b1b      	ldr	r3, [pc, #108]	@ (8002480 <updateTime+0x1b8>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b17      	cmp	r3, #23
 8002418:	d103      	bne.n	8002422 <updateTime+0x15a>
			hour = 0;
 800241a:	4b19      	ldr	r3, [pc, #100]	@ (8002480 <updateTime+0x1b8>)
 800241c:	2200      	movs	r2, #0
 800241e:	701a      	strb	r2, [r3, #0]
		} else {
			hour++;
		}
		break;
 8002420:	e024      	b.n	800246c <updateTime+0x1a4>
			hour++;
 8002422:	4b17      	ldr	r3, [pc, #92]	@ (8002480 <updateTime+0x1b8>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	3301      	adds	r3, #1
 8002428:	b2da      	uxtb	r2, r3
 800242a:	4b15      	ldr	r3, [pc, #84]	@ (8002480 <updateTime+0x1b8>)
 800242c:	701a      	strb	r2, [r3, #0]
		break;
 800242e:	e01d      	b.n	800246c <updateTime+0x1a4>
	case 4:
		if (minute == 59) {
 8002430:	4b14      	ldr	r3, [pc, #80]	@ (8002484 <updateTime+0x1bc>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b3b      	cmp	r3, #59	@ 0x3b
 8002436:	d103      	bne.n	8002440 <updateTime+0x178>
			minute = 0;
 8002438:	4b12      	ldr	r3, [pc, #72]	@ (8002484 <updateTime+0x1bc>)
 800243a:	2200      	movs	r2, #0
 800243c:	701a      	strb	r2, [r3, #0]
		} else {
			minute++;
		}
		break;
 800243e:	e015      	b.n	800246c <updateTime+0x1a4>
			minute++;
 8002440:	4b10      	ldr	r3, [pc, #64]	@ (8002484 <updateTime+0x1bc>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	3301      	adds	r3, #1
 8002446:	b2da      	uxtb	r2, r3
 8002448:	4b0e      	ldr	r3, [pc, #56]	@ (8002484 <updateTime+0x1bc>)
 800244a:	701a      	strb	r2, [r3, #0]
		break;
 800244c:	e00e      	b.n	800246c <updateTime+0x1a4>
	case 5:
		if (second == 59) {
 800244e:	4b0e      	ldr	r3, [pc, #56]	@ (8002488 <updateTime+0x1c0>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b3b      	cmp	r3, #59	@ 0x3b
 8002454:	d103      	bne.n	800245e <updateTime+0x196>
			second = 0;
 8002456:	4b0c      	ldr	r3, [pc, #48]	@ (8002488 <updateTime+0x1c0>)
 8002458:	2200      	movs	r2, #0
 800245a:	701a      	strb	r2, [r3, #0]
		} else {
			second++;
		}
		break;
 800245c:	e005      	b.n	800246a <updateTime+0x1a2>
			second++;
 800245e:	4b0a      	ldr	r3, [pc, #40]	@ (8002488 <updateTime+0x1c0>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	3301      	adds	r3, #1
 8002464:	b2da      	uxtb	r2, r3
 8002466:	4b08      	ldr	r3, [pc, #32]	@ (8002488 <updateTime+0x1c0>)
 8002468:	701a      	strb	r2, [r3, #0]
		break;
 800246a:	bf00      	nop
	}

}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20000159 	.word	0x20000159
 8002474:	2000000a 	.word	0x2000000a
 8002478:	2000000c 	.word	0x2000000c
 800247c:	2000000d 	.word	0x2000000d
 8002480:	20000005 	.word	0x20000005
 8002484:	20000006 	.word	0x20000006
 8002488:	20000007 	.word	0x20000007

0800248c <updateTime2>:

void updateTime2() {
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0

	switch (item_select) {
 8002490:	4b67      	ldr	r3, [pc, #412]	@ (8002630 <updateTime2+0x1a4>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b05      	cmp	r3, #5
 8002496:	f200 80c9 	bhi.w	800262c <updateTime2+0x1a0>
 800249a:	a201      	add	r2, pc, #4	@ (adr r2, 80024a0 <updateTime2+0x14>)
 800249c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a0:	080024b9 	.word	0x080024b9
 80024a4:	080024d7 	.word	0x080024d7
 80024a8:	080024f5 	.word	0x080024f5
 80024ac:	080025d3 	.word	0x080025d3
 80024b0:	080025f1 	.word	0x080025f1
 80024b4:	0800260f 	.word	0x0800260f
	case 0:
		if (year == 0) {
 80024b8:	4b5e      	ldr	r3, [pc, #376]	@ (8002634 <updateTime2+0x1a8>)
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d103      	bne.n	80024c8 <updateTime2+0x3c>
			year = 0;
 80024c0:	4b5c      	ldr	r3, [pc, #368]	@ (8002634 <updateTime2+0x1a8>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	801a      	strh	r2, [r3, #0]
		} else {
			year--;
		}
		break;
 80024c6:	e0b1      	b.n	800262c <updateTime2+0x1a0>
			year--;
 80024c8:	4b5a      	ldr	r3, [pc, #360]	@ (8002634 <updateTime2+0x1a8>)
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	4b58      	ldr	r3, [pc, #352]	@ (8002634 <updateTime2+0x1a8>)
 80024d2:	801a      	strh	r2, [r3, #0]
		break;
 80024d4:	e0aa      	b.n	800262c <updateTime2+0x1a0>
	case 1:
		if (month == 1) {
 80024d6:	4b58      	ldr	r3, [pc, #352]	@ (8002638 <updateTime2+0x1ac>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d103      	bne.n	80024e6 <updateTime2+0x5a>
			month = 12;
 80024de:	4b56      	ldr	r3, [pc, #344]	@ (8002638 <updateTime2+0x1ac>)
 80024e0:	220c      	movs	r2, #12
 80024e2:	701a      	strb	r2, [r3, #0]
		} else {
			month--;
		}
		break;
 80024e4:	e0a2      	b.n	800262c <updateTime2+0x1a0>
			month--;
 80024e6:	4b54      	ldr	r3, [pc, #336]	@ (8002638 <updateTime2+0x1ac>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	4b52      	ldr	r3, [pc, #328]	@ (8002638 <updateTime2+0x1ac>)
 80024f0:	701a      	strb	r2, [r3, #0]
		break;
 80024f2:	e09b      	b.n	800262c <updateTime2+0x1a0>
	case 2:
		if (isLeapYear(year) && day == 1 && month == 2) {
 80024f4:	4b4f      	ldr	r3, [pc, #316]	@ (8002634 <updateTime2+0x1a8>)
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff fb67 	bl	8001bcc <isLeapYear>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00b      	beq.n	800251c <updateTime2+0x90>
 8002504:	4b4d      	ldr	r3, [pc, #308]	@ (800263c <updateTime2+0x1b0>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d107      	bne.n	800251c <updateTime2+0x90>
 800250c:	4b4a      	ldr	r3, [pc, #296]	@ (8002638 <updateTime2+0x1ac>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b02      	cmp	r3, #2
 8002512:	d103      	bne.n	800251c <updateTime2+0x90>
			day = 29;
 8002514:	4b49      	ldr	r3, [pc, #292]	@ (800263c <updateTime2+0x1b0>)
 8002516:	221d      	movs	r2, #29
 8002518:	701a      	strb	r2, [r3, #0]
 800251a:	e059      	b.n	80025d0 <updateTime2+0x144>
		}

		else if (!isLeapYear(year) && day == 1 && month == 2) {
 800251c:	4b45      	ldr	r3, [pc, #276]	@ (8002634 <updateTime2+0x1a8>)
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff fb53 	bl	8001bcc <isLeapYear>
 8002526:	4603      	mov	r3, r0
 8002528:	f083 0301 	eor.w	r3, r3, #1
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00b      	beq.n	800254a <updateTime2+0xbe>
 8002532:	4b42      	ldr	r3, [pc, #264]	@ (800263c <updateTime2+0x1b0>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d107      	bne.n	800254a <updateTime2+0xbe>
 800253a:	4b3f      	ldr	r3, [pc, #252]	@ (8002638 <updateTime2+0x1ac>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d103      	bne.n	800254a <updateTime2+0xbe>
			day = 28;
 8002542:	4b3e      	ldr	r3, [pc, #248]	@ (800263c <updateTime2+0x1b0>)
 8002544:	221c      	movs	r2, #28
 8002546:	701a      	strb	r2, [r3, #0]
 8002548:	e042      	b.n	80025d0 <updateTime2+0x144>
		}

		else if (day == 1
 800254a:	4b3c      	ldr	r3, [pc, #240]	@ (800263c <updateTime2+0x1b0>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d11f      	bne.n	8002592 <updateTime2+0x106>
				&& (month == 1 || month == 3 || month == 5 || month == 7
 8002552:	4b39      	ldr	r3, [pc, #228]	@ (8002638 <updateTime2+0x1ac>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d017      	beq.n	800258a <updateTime2+0xfe>
 800255a:	4b37      	ldr	r3, [pc, #220]	@ (8002638 <updateTime2+0x1ac>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b03      	cmp	r3, #3
 8002560:	d013      	beq.n	800258a <updateTime2+0xfe>
 8002562:	4b35      	ldr	r3, [pc, #212]	@ (8002638 <updateTime2+0x1ac>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b05      	cmp	r3, #5
 8002568:	d00f      	beq.n	800258a <updateTime2+0xfe>
 800256a:	4b33      	ldr	r3, [pc, #204]	@ (8002638 <updateTime2+0x1ac>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b07      	cmp	r3, #7
 8002570:	d00b      	beq.n	800258a <updateTime2+0xfe>
						|| month == 8 || month == 10 || month == 12)) {
 8002572:	4b31      	ldr	r3, [pc, #196]	@ (8002638 <updateTime2+0x1ac>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b08      	cmp	r3, #8
 8002578:	d007      	beq.n	800258a <updateTime2+0xfe>
 800257a:	4b2f      	ldr	r3, [pc, #188]	@ (8002638 <updateTime2+0x1ac>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b0a      	cmp	r3, #10
 8002580:	d003      	beq.n	800258a <updateTime2+0xfe>
 8002582:	4b2d      	ldr	r3, [pc, #180]	@ (8002638 <updateTime2+0x1ac>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b0c      	cmp	r3, #12
 8002588:	d103      	bne.n	8002592 <updateTime2+0x106>
			day = 31;
 800258a:	4b2c      	ldr	r3, [pc, #176]	@ (800263c <updateTime2+0x1b0>)
 800258c:	221f      	movs	r2, #31
 800258e:	701a      	strb	r2, [r3, #0]
 8002590:	e01e      	b.n	80025d0 <updateTime2+0x144>
		}

		else if (day == 1
 8002592:	4b2a      	ldr	r3, [pc, #168]	@ (800263c <updateTime2+0x1b0>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d113      	bne.n	80025c2 <updateTime2+0x136>
				&& (month == 4 || month == 6 || month == 9 || month == 11)) {
 800259a:	4b27      	ldr	r3, [pc, #156]	@ (8002638 <updateTime2+0x1ac>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d00b      	beq.n	80025ba <updateTime2+0x12e>
 80025a2:	4b25      	ldr	r3, [pc, #148]	@ (8002638 <updateTime2+0x1ac>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b06      	cmp	r3, #6
 80025a8:	d007      	beq.n	80025ba <updateTime2+0x12e>
 80025aa:	4b23      	ldr	r3, [pc, #140]	@ (8002638 <updateTime2+0x1ac>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b09      	cmp	r3, #9
 80025b0:	d003      	beq.n	80025ba <updateTime2+0x12e>
 80025b2:	4b21      	ldr	r3, [pc, #132]	@ (8002638 <updateTime2+0x1ac>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b0b      	cmp	r3, #11
 80025b8:	d103      	bne.n	80025c2 <updateTime2+0x136>
			day = 30;
 80025ba:	4b20      	ldr	r3, [pc, #128]	@ (800263c <updateTime2+0x1b0>)
 80025bc:	221e      	movs	r2, #30
 80025be:	701a      	strb	r2, [r3, #0]
 80025c0:	e006      	b.n	80025d0 <updateTime2+0x144>
		}

		else {
			day--;
 80025c2:	4b1e      	ldr	r3, [pc, #120]	@ (800263c <updateTime2+0x1b0>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	4b1c      	ldr	r3, [pc, #112]	@ (800263c <updateTime2+0x1b0>)
 80025cc:	701a      	strb	r2, [r3, #0]
		}
		break;
 80025ce:	e02d      	b.n	800262c <updateTime2+0x1a0>
 80025d0:	e02c      	b.n	800262c <updateTime2+0x1a0>
	case 3:
		if (hour == 0) {
 80025d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002640 <updateTime2+0x1b4>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d103      	bne.n	80025e2 <updateTime2+0x156>
			hour = 23;
 80025da:	4b19      	ldr	r3, [pc, #100]	@ (8002640 <updateTime2+0x1b4>)
 80025dc:	2217      	movs	r2, #23
 80025de:	701a      	strb	r2, [r3, #0]
		} else {
			hour--;
		}
		break;
 80025e0:	e024      	b.n	800262c <updateTime2+0x1a0>
			hour--;
 80025e2:	4b17      	ldr	r3, [pc, #92]	@ (8002640 <updateTime2+0x1b4>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	3b01      	subs	r3, #1
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	4b15      	ldr	r3, [pc, #84]	@ (8002640 <updateTime2+0x1b4>)
 80025ec:	701a      	strb	r2, [r3, #0]
		break;
 80025ee:	e01d      	b.n	800262c <updateTime2+0x1a0>
	case 4:
		if (minute == 0) {
 80025f0:	4b14      	ldr	r3, [pc, #80]	@ (8002644 <updateTime2+0x1b8>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d103      	bne.n	8002600 <updateTime2+0x174>
			minute = 59;
 80025f8:	4b12      	ldr	r3, [pc, #72]	@ (8002644 <updateTime2+0x1b8>)
 80025fa:	223b      	movs	r2, #59	@ 0x3b
 80025fc:	701a      	strb	r2, [r3, #0]
		} else {
			minute--;
		}
		break;
 80025fe:	e015      	b.n	800262c <updateTime2+0x1a0>
			minute--;
 8002600:	4b10      	ldr	r3, [pc, #64]	@ (8002644 <updateTime2+0x1b8>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	3b01      	subs	r3, #1
 8002606:	b2da      	uxtb	r2, r3
 8002608:	4b0e      	ldr	r3, [pc, #56]	@ (8002644 <updateTime2+0x1b8>)
 800260a:	701a      	strb	r2, [r3, #0]
		break;
 800260c:	e00e      	b.n	800262c <updateTime2+0x1a0>
	case 5:
		if (second == 0) {
 800260e:	4b0e      	ldr	r3, [pc, #56]	@ (8002648 <updateTime2+0x1bc>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d103      	bne.n	800261e <updateTime2+0x192>
			second = 59;
 8002616:	4b0c      	ldr	r3, [pc, #48]	@ (8002648 <updateTime2+0x1bc>)
 8002618:	223b      	movs	r2, #59	@ 0x3b
 800261a:	701a      	strb	r2, [r3, #0]
		} else {
			second--;
		}
		break;
 800261c:	e005      	b.n	800262a <updateTime2+0x19e>
			second--;
 800261e:	4b0a      	ldr	r3, [pc, #40]	@ (8002648 <updateTime2+0x1bc>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	3b01      	subs	r3, #1
 8002624:	b2da      	uxtb	r2, r3
 8002626:	4b08      	ldr	r3, [pc, #32]	@ (8002648 <updateTime2+0x1bc>)
 8002628:	701a      	strb	r2, [r3, #0]
		break;
 800262a:	bf00      	nop
	}

}
 800262c:	bf00      	nop
 800262e:	bd80      	pop	{r7, pc}
 8002630:	20000159 	.word	0x20000159
 8002634:	2000000a 	.word	0x2000000a
 8002638:	2000000c 	.word	0x2000000c
 800263c:	2000000d 	.word	0x2000000d
 8002640:	20000005 	.word	0x20000005
 8002644:	20000006 	.word	0x20000006
 8002648:	20000007 	.word	0x20000007

0800264c <Init_Peripherals>:
#include "variables.h"
#include "7SEG.h"
#include "CLCD.h"

// Init_Peripherals 함수에 TIM_HandleTypeDef 포인터 매개변수 추가
void Init_Peripherals(TIM_HandleTypeDef *htim) {
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
    Init_LEDs();
 8002654:	f000 f80a 	bl	800266c <Init_LEDs>
    Init_TIMERS(htim);  // 포인터를 직접 전달
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f833 	bl	80026c4 <Init_TIMERS>
    Init_Display();
 800265e:	f000 f83f 	bl	80026e0 <Init_Display>
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <Init_LEDs>:

void Init_LEDs(void) {
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8002670:	2201      	movs	r2, #1
 8002672:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002676:	4810      	ldr	r0, [pc, #64]	@ (80026b8 <Init_LEDs+0x4c>)
 8002678:	f002 f986 	bl	8004988 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800267c:	2201      	movs	r2, #1
 800267e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002682:	480d      	ldr	r0, [pc, #52]	@ (80026b8 <Init_LEDs+0x4c>)
 8002684:	f002 f980 	bl	8004988 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8002688:	2201      	movs	r2, #1
 800268a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800268e:	480a      	ldr	r0, [pc, #40]	@ (80026b8 <Init_LEDs+0x4c>)
 8002690:	f002 f97a 	bl	8004988 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8002694:	2201      	movs	r2, #1
 8002696:	2140      	movs	r1, #64	@ 0x40
 8002698:	4808      	ldr	r0, [pc, #32]	@ (80026bc <Init_LEDs+0x50>)
 800269a:	f002 f975 	bl	8004988 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800269e:	2201      	movs	r2, #1
 80026a0:	2120      	movs	r1, #32
 80026a2:	4807      	ldr	r0, [pc, #28]	@ (80026c0 <Init_LEDs+0x54>)
 80026a4:	f002 f970 	bl	8004988 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80026a8:	2201      	movs	r2, #1
 80026aa:	2101      	movs	r1, #1
 80026ac:	4804      	ldr	r0, [pc, #16]	@ (80026c0 <Init_LEDs+0x54>)
 80026ae:	f002 f96b 	bl	8004988 <HAL_GPIO_WritePin>
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40020c00 	.word	0x40020c00
 80026bc:	40020800 	.word	0x40020800
 80026c0:	40020400 	.word	0x40020400

080026c4 <Init_TIMERS>:

// Init_TIMERS 함수에 TIM_HandleTypeDef 포인터 매개변수 추가
void Init_TIMERS(TIM_HandleTypeDef *htim) {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
    if (htim != NULL) {
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <Init_TIMERS+0x14>
        HAL_TIM_Base_Start_IT(htim);  // 포인터를 직접 사용하여 TIMER 인터럽트 시작
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f002 fe58 	bl	8005388 <HAL_TIM_Base_Start_IT>
    }
}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <Init_Display>:

void Init_Display(void) {
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
    CLCD_GPIO_Init();  // LCD GPIO 초기화
 80026e4:	f7fe fc04 	bl	8000ef0 <CLCD_GPIO_Init>
    CLCD_Init();       // LCD 초기화
 80026e8:	f7fe fe2b 	bl	8001342 <CLCD_Init>
    _7SEG_GPIO_Init(); // 7세그먼트 초기화
 80026ec:	f7fd ff38 	bl	8000560 <_7SEG_GPIO_Init>
}
 80026f0:	bf00      	nop
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <Init_button_operation>:

void Init_button_operation() {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
	if (mode_changed == true) {
 80026f8:	4b2f      	ldr	r3, [pc, #188]	@ (80027b8 <Init_button_operation+0xc4>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d013      	beq.n	8002728 <Init_button_operation+0x34>
		CLCD_Clear();
 8002700:	f7fe fe41 	bl	8001386 <CLCD_Clear>
		item_select = 0;
 8002704:	4b2d      	ldr	r3, [pc, #180]	@ (80027bc <Init_button_operation+0xc8>)
 8002706:	2200      	movs	r2, #0
 8002708:	701a      	strb	r2, [r3, #0]
		item_select2 = 0;
 800270a:	4b2d      	ldr	r3, [pc, #180]	@ (80027c0 <Init_button_operation+0xcc>)
 800270c:	2200      	movs	r2, #0
 800270e:	701a      	strb	r2, [r3, #0]
		lap_time_click = 0;
 8002710:	4b2c      	ldr	r3, [pc, #176]	@ (80027c4 <Init_button_operation+0xd0>)
 8002712:	2200      	movs	r2, #0
 8002714:	701a      	strb	r2, [r3, #0]
		mode_changed = false;
 8002716:	4b28      	ldr	r3, [pc, #160]	@ (80027b8 <Init_button_operation+0xc4>)
 8002718:	2200      	movs	r2, #0
 800271a:	701a      	strb	r2, [r3, #0]

		item_select3 = 0;
 800271c:	4b2a      	ldr	r3, [pc, #168]	@ (80027c8 <Init_button_operation+0xd4>)
 800271e:	2200      	movs	r2, #0
 8002720:	701a      	strb	r2, [r3, #0]
		alarm_select = 1;
 8002722:	4b2a      	ldr	r3, [pc, #168]	@ (80027cc <Init_button_operation+0xd8>)
 8002724:	2201      	movs	r2, #1
 8002726:	701a      	strb	r2, [r3, #0]
	}

	if (Press_Time == 0) { // 안 누른 상태
 8002728:	4b29      	ldr	r3, [pc, #164]	@ (80027d0 <Init_button_operation+0xdc>)
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d109      	bne.n	8002744 <Init_button_operation+0x50>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8002730:	2201      	movs	r2, #1
 8002732:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002736:	4827      	ldr	r0, [pc, #156]	@ (80027d4 <Init_button_operation+0xe0>)
 8002738:	f002 f926 	bl	8004988 <HAL_GPIO_WritePin>
		Press_Mode = PRESS_NOT;
 800273c:	4b26      	ldr	r3, [pc, #152]	@ (80027d8 <Init_button_operation+0xe4>)
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]
	else if (2500 <= Press_Time) { // 길게 누른 상태
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
		Press_Mode = PRESS_LONG;
	}

}
 8002742:	e037      	b.n	80027b4 <Init_button_operation+0xc0>
	else if (0 < Press_Time && Press_Time < 700) { // 짧게 누른 상태
 8002744:	4b22      	ldr	r3, [pc, #136]	@ (80027d0 <Init_button_operation+0xdc>)
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00e      	beq.n	800276a <Init_button_operation+0x76>
 800274c:	4b20      	ldr	r3, [pc, #128]	@ (80027d0 <Init_button_operation+0xdc>)
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8002754:	d209      	bcs.n	800276a <Init_button_operation+0x76>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8002756:	2200      	movs	r2, #0
 8002758:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800275c:	481d      	ldr	r0, [pc, #116]	@ (80027d4 <Init_button_operation+0xe0>)
 800275e:	f002 f913 	bl	8004988 <HAL_GPIO_WritePin>
		Press_Mode = PRESS_SHORT;
 8002762:	4b1d      	ldr	r3, [pc, #116]	@ (80027d8 <Init_button_operation+0xe4>)
 8002764:	2201      	movs	r2, #1
 8002766:	701a      	strb	r2, [r3, #0]
 8002768:	e024      	b.n	80027b4 <Init_button_operation+0xc0>
	else if (700 <= Press_Time && Press_Time < 2500) { // 중간 누른 상태
 800276a:	4b19      	ldr	r3, [pc, #100]	@ (80027d0 <Init_button_operation+0xdc>)
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8002772:	d30f      	bcc.n	8002794 <Init_button_operation+0xa0>
 8002774:	4b16      	ldr	r3, [pc, #88]	@ (80027d0 <Init_button_operation+0xdc>)
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 800277c:	4293      	cmp	r3, r2
 800277e:	d809      	bhi.n	8002794 <Init_button_operation+0xa0>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8002780:	2201      	movs	r2, #1
 8002782:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002786:	4813      	ldr	r0, [pc, #76]	@ (80027d4 <Init_button_operation+0xe0>)
 8002788:	f002 f8fe 	bl	8004988 <HAL_GPIO_WritePin>
		Press_Mode = PRESS_MID;
 800278c:	4b12      	ldr	r3, [pc, #72]	@ (80027d8 <Init_button_operation+0xe4>)
 800278e:	2202      	movs	r2, #2
 8002790:	701a      	strb	r2, [r3, #0]
 8002792:	e00f      	b.n	80027b4 <Init_button_operation+0xc0>
	else if (2500 <= Press_Time) { // 길게 누른 상태
 8002794:	4b0e      	ldr	r3, [pc, #56]	@ (80027d0 <Init_button_operation+0xdc>)
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 800279c:	4293      	cmp	r3, r2
 800279e:	d909      	bls.n	80027b4 <Init_button_operation+0xc0>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80027a0:	2200      	movs	r2, #0
 80027a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80027a6:	480b      	ldr	r0, [pc, #44]	@ (80027d4 <Init_button_operation+0xe0>)
 80027a8:	f002 f8ee 	bl	8004988 <HAL_GPIO_WritePin>
		Press_Mode = PRESS_LONG;
 80027ac:	4b0a      	ldr	r3, [pc, #40]	@ (80027d8 <Init_button_operation+0xe4>)
 80027ae:	2203      	movs	r2, #3
 80027b0:	701a      	strb	r2, [r3, #0]
}
 80027b2:	e7ff      	b.n	80027b4 <Init_button_operation+0xc0>
 80027b4:	bf00      	nop
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	2000014f 	.word	0x2000014f
 80027bc:	20000159 	.word	0x20000159
 80027c0:	200001e1 	.word	0x200001e1
 80027c4:	200001c9 	.word	0x200001c9
 80027c8:	2000016a 	.word	0x2000016a
 80027cc:	20000016 	.word	0x20000016
 80027d0:	2000014c 	.word	0x2000014c
 80027d4:	40020c00 	.word	0x40020c00
 80027d8:	2000014e 	.word	0x2000014e

080027dc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80027e0:	f001 fd76 	bl	80042d0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80027e4:	f000 f848 	bl	8002878 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80027e8:	f000 f980 	bl	8002aec <MX_GPIO_Init>
	MX_TIM7_Init();
 80027ec:	f000 f948 	bl	8002a80 <MX_TIM7_Init>
	MX_TIM2_Init();
 80027f0:	f000 f8d0 	bl	8002994 <MX_TIM2_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 80027f4:	f000 f8aa 	bl	800294c <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */
	Init_Peripherals(&htim7);
 80027f8:	481d      	ldr	r0, [pc, #116]	@ (8002870 <main+0x94>)
 80027fa:	f7ff ff27 	bl	800264c <Init_Peripherals>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		switch (Watch_Mode) {
 80027fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002874 <main+0x98>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	3b01      	subs	r3, #1
 8002804:	2b03      	cmp	r3, #3
 8002806:	d827      	bhi.n	8002858 <main+0x7c>
 8002808:	a201      	add	r2, pc, #4	@ (adr r2, 8002810 <main+0x34>)
 800280a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800280e:	bf00      	nop
 8002810:	08002821 	.word	0x08002821
 8002814:	0800282f 	.word	0x0800282f
 8002818:	0800283d 	.word	0x0800283d
 800281c:	0800284b 	.word	0x0800284b
		case MODE_CLOCK:
			Clock_basic_operation();
 8002820:	f7ff fa06 	bl	8001c30 <Clock_basic_operation>
			Clock_display_operation();
 8002824:	f7ff fa4a 	bl	8001cbc <Clock_display_operation>
			Clock_button_operation();
 8002828:	f7ff fc64 	bl	80020f4 <Clock_button_operation>
			break;
 800282c:	e014      	b.n	8002858 <main+0x7c>
		case MODE_ALARM:
			Alarm_basic_operation();
 800282e:	f7fe fdb5 	bl	800139c <Alarm_basic_operation>
			Alarm_display_operation();
 8002832:	f7fe fde3 	bl	80013fc <Alarm_display_operation>
			Alarm_button_operation();
 8002836:	f7fe ff95 	bl	8001764 <Alarm_button_operation>
			break;
 800283a:	e00d      	b.n	8002858 <main+0x7c>
		case MODE_STOPWATCH:
			Stopwatch_basic_operation();
 800283c:	f000 fe72 	bl	8003524 <Stopwatch_basic_operation>
			Stopwatch_display_operation();
 8002840:	f000 fe78 	bl	8003534 <Stopwatch_display_operation>
			Stopwatch_button_operation();
 8002844:	f000 ff44 	bl	80036d0 <Stopwatch_button_operation>
			break;
 8002848:	e006      	b.n	8002858 <main+0x7c>
		case MODE_TIMER:
			Timer_basic_operation();
 800284a:	f001 fad1 	bl	8003df0 <Timer_basic_operation>
			Timer_display_operation();
 800284e:	f001 fb45 	bl	8003edc <Timer_display_operation>
			Timer_button_operation();
 8002852:	f001 f941 	bl	8003ad8 <Timer_button_operation>
			break;
 8002856:	bf00      	nop
		}
		if (Watch_Mode > MODE_TIMER) {
 8002858:	4b06      	ldr	r3, [pc, #24]	@ (8002874 <main+0x98>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b04      	cmp	r3, #4
 800285e:	d902      	bls.n	8002866 <main+0x8a>
			Watch_Mode = MODE_CLOCK;
 8002860:	4b04      	ldr	r3, [pc, #16]	@ (8002874 <main+0x98>)
 8002862:	2201      	movs	r2, #1
 8002864:	701a      	strb	r2, [r3, #0]
		}
		Alarm_Check();
 8002866:	f7ff f95b 	bl	8001b20 <Alarm_Check>
		Init_button_operation();
 800286a:	f7ff ff43 	bl	80026f4 <Init_button_operation>
		switch (Watch_Mode) {
 800286e:	e7c6      	b.n	80027fe <main+0x22>
 8002870:	200000d4 	.word	0x200000d4
 8002874:	20000004 	.word	0x20000004

08002878 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002878:	b580      	push	{r7, lr}
 800287a:	b094      	sub	sp, #80	@ 0x50
 800287c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800287e:	f107 0320 	add.w	r3, r7, #32
 8002882:	2230      	movs	r2, #48	@ 0x30
 8002884:	2100      	movs	r1, #0
 8002886:	4618      	mov	r0, r3
 8002888:	f003 fdee 	bl	8006468 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800288c:	f107 030c 	add.w	r3, r7, #12
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	605a      	str	r2, [r3, #4]
 8002896:	609a      	str	r2, [r3, #8]
 8002898:	60da      	str	r2, [r3, #12]
 800289a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800289c:	2300      	movs	r3, #0
 800289e:	60bb      	str	r3, [r7, #8]
 80028a0:	4b28      	ldr	r3, [pc, #160]	@ (8002944 <SystemClock_Config+0xcc>)
 80028a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a4:	4a27      	ldr	r2, [pc, #156]	@ (8002944 <SystemClock_Config+0xcc>)
 80028a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ac:	4b25      	ldr	r3, [pc, #148]	@ (8002944 <SystemClock_Config+0xcc>)
 80028ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028b8:	2300      	movs	r3, #0
 80028ba:	607b      	str	r3, [r7, #4]
 80028bc:	4b22      	ldr	r3, [pc, #136]	@ (8002948 <SystemClock_Config+0xd0>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a21      	ldr	r2, [pc, #132]	@ (8002948 <SystemClock_Config+0xd0>)
 80028c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028c6:	6013      	str	r3, [r2, #0]
 80028c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002948 <SystemClock_Config+0xd0>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028d0:	607b      	str	r3, [r7, #4]
 80028d2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028d4:	2301      	movs	r3, #1
 80028d6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028dc:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028de:	2302      	movs	r3, #2
 80028e0:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028e2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80028e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80028e8:	2304      	movs	r3, #4
 80028ea:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80028ec:	23a8      	movs	r3, #168	@ 0xa8
 80028ee:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028f0:	2302      	movs	r3, #2
 80028f2:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80028f4:	2304      	movs	r3, #4
 80028f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80028f8:	f107 0320 	add.w	r3, r7, #32
 80028fc:	4618      	mov	r0, r3
 80028fe:	f002 f88f 	bl	8004a20 <HAL_RCC_OscConfig>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <SystemClock_Config+0x94>
		Error_Handler();
 8002908:	f000 fd1c 	bl	8003344 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800290c:	230f      	movs	r3, #15
 800290e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002910:	2302      	movs	r3, #2
 8002912:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002918:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800291c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800291e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002922:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8002924:	f107 030c 	add.w	r3, r7, #12
 8002928:	2105      	movs	r1, #5
 800292a:	4618      	mov	r0, r3
 800292c:	f002 faf0 	bl	8004f10 <HAL_RCC_ClockConfig>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <SystemClock_Config+0xc2>
		Error_Handler();
 8002936:	f000 fd05 	bl	8003344 <Error_Handler>
	}
}
 800293a:	bf00      	nop
 800293c:	3750      	adds	r7, #80	@ 0x50
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40023800 	.word	0x40023800
 8002948:	40007000 	.word	0x40007000

0800294c <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
	/* TIM7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002950:	2200      	movs	r2, #0
 8002952:	2100      	movs	r1, #0
 8002954:	2037      	movs	r0, #55	@ 0x37
 8002956:	f001 fe2c 	bl	80045b2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800295a:	2037      	movs	r0, #55	@ 0x37
 800295c:	f001 fe45 	bl	80045ea <HAL_NVIC_EnableIRQ>
	/* EXTI3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002960:	2200      	movs	r2, #0
 8002962:	2100      	movs	r1, #0
 8002964:	2009      	movs	r0, #9
 8002966:	f001 fe24 	bl	80045b2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800296a:	2009      	movs	r0, #9
 800296c:	f001 fe3d 	bl	80045ea <HAL_NVIC_EnableIRQ>
	/* EXTI4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002970:	2200      	movs	r2, #0
 8002972:	2100      	movs	r1, #0
 8002974:	200a      	movs	r0, #10
 8002976:	f001 fe1c 	bl	80045b2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800297a:	200a      	movs	r0, #10
 800297c:	f001 fe35 	bl	80045ea <HAL_NVIC_EnableIRQ>
	/* EXTI15_10_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002980:	2200      	movs	r2, #0
 8002982:	2100      	movs	r1, #0
 8002984:	2028      	movs	r0, #40	@ 0x28
 8002986:	f001 fe14 	bl	80045b2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800298a:	2028      	movs	r0, #40	@ 0x28
 800298c:	f001 fe2d 	bl	80045ea <HAL_NVIC_EnableIRQ>
}
 8002990:	bf00      	nop
 8002992:	bd80      	pop	{r7, pc}

08002994 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002994:	b580      	push	{r7, lr}
 8002996:	b08e      	sub	sp, #56	@ 0x38
 8002998:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800299a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	605a      	str	r2, [r3, #4]
 80029a4:	609a      	str	r2, [r3, #8]
 80029a6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80029a8:	f107 0320 	add.w	r3, r7, #32
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80029b2:	1d3b      	adds	r3, r7, #4
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	611a      	str	r2, [r3, #16]
 80029c0:	615a      	str	r2, [r3, #20]
 80029c2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80029c4:	4b2d      	ldr	r3, [pc, #180]	@ (8002a7c <MX_TIM2_Init+0xe8>)
 80029c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80029ca:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 168 - 1;
 80029cc:	4b2b      	ldr	r3, [pc, #172]	@ (8002a7c <MX_TIM2_Init+0xe8>)
 80029ce:	22a7      	movs	r2, #167	@ 0xa7
 80029d0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029d2:	4b2a      	ldr	r3, [pc, #168]	@ (8002a7c <MX_TIM2_Init+0xe8>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000 - 1;
 80029d8:	4b28      	ldr	r3, [pc, #160]	@ (8002a7c <MX_TIM2_Init+0xe8>)
 80029da:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80029de:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029e0:	4b26      	ldr	r3, [pc, #152]	@ (8002a7c <MX_TIM2_Init+0xe8>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80029e6:	4b25      	ldr	r3, [pc, #148]	@ (8002a7c <MX_TIM2_Init+0xe8>)
 80029e8:	2280      	movs	r2, #128	@ 0x80
 80029ea:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80029ec:	4823      	ldr	r0, [pc, #140]	@ (8002a7c <MX_TIM2_Init+0xe8>)
 80029ee:	f002 fc7b 	bl	80052e8 <HAL_TIM_Base_Init>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_TIM2_Init+0x68>
		Error_Handler();
 80029f8:	f000 fca4 	bl	8003344 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a00:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8002a02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a06:	4619      	mov	r1, r3
 8002a08:	481c      	ldr	r0, [pc, #112]	@ (8002a7c <MX_TIM2_Init+0xe8>)
 8002a0a:	f003 f871 	bl	8005af0 <HAL_TIM_ConfigClockSource>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <MX_TIM2_Init+0x84>
		Error_Handler();
 8002a14:	f000 fc96 	bl	8003344 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8002a18:	4818      	ldr	r0, [pc, #96]	@ (8002a7c <MX_TIM2_Init+0xe8>)
 8002a1a:	f002 fd25 	bl	8005468 <HAL_TIM_PWM_Init>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_TIM2_Init+0x94>
		Error_Handler();
 8002a24:	f000 fc8e 	bl	8003344 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002a30:	f107 0320 	add.w	r3, r7, #32
 8002a34:	4619      	mov	r1, r3
 8002a36:	4811      	ldr	r0, [pc, #68]	@ (8002a7c <MX_TIM2_Init+0xe8>)
 8002a38:	f003 fc66 	bl	8006308 <HAL_TIMEx_MasterConfigSynchronization>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8002a42:	f000 fc7f 	bl	8003344 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a46:	2360      	movs	r3, #96	@ 0x60
 8002a48:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 500;
 8002a4a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002a4e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a50:	2300      	movs	r3, #0
 8002a52:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002a54:	2304      	movs	r3, #4
 8002a56:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8002a58:	1d3b      	adds	r3, r7, #4
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4807      	ldr	r0, [pc, #28]	@ (8002a7c <MX_TIM2_Init+0xe8>)
 8002a60:	f002 ff84 	bl	800596c <HAL_TIM_PWM_ConfigChannel>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <MX_TIM2_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 8002a6a:	f000 fc6b 	bl	8003344 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8002a6e:	4803      	ldr	r0, [pc, #12]	@ (8002a7c <MX_TIM2_Init+0xe8>)
 8002a70:	f000 fccc 	bl	800340c <HAL_TIM_MspPostInit>

}
 8002a74:	bf00      	nop
 8002a76:	3738      	adds	r7, #56	@ 0x38
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	2000008c 	.word	0x2000008c

08002a80 <MX_TIM7_Init>:
/**
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void) {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002a86:	463b      	mov	r3, r7
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 8002a8e:	4b15      	ldr	r3, [pc, #84]	@ (8002ae4 <MX_TIM7_Init+0x64>)
 8002a90:	4a15      	ldr	r2, [pc, #84]	@ (8002ae8 <MX_TIM7_Init+0x68>)
 8002a92:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 84 - 1;
 8002a94:	4b13      	ldr	r3, [pc, #76]	@ (8002ae4 <MX_TIM7_Init+0x64>)
 8002a96:	2253      	movs	r2, #83	@ 0x53
 8002a98:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a9a:	4b12      	ldr	r3, [pc, #72]	@ (8002ae4 <MX_TIM7_Init+0x64>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 1000 - 1;
 8002aa0:	4b10      	ldr	r3, [pc, #64]	@ (8002ae4 <MX_TIM7_Init+0x64>)
 8002aa2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002aa6:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae4 <MX_TIM7_Init+0x64>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8002aae:	480d      	ldr	r0, [pc, #52]	@ (8002ae4 <MX_TIM7_Init+0x64>)
 8002ab0:	f002 fc1a 	bl	80052e8 <HAL_TIM_Base_Init>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <MX_TIM7_Init+0x3e>
		Error_Handler();
 8002aba:	f000 fc43 	bl	8003344 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 8002ac6:	463b      	mov	r3, r7
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4806      	ldr	r0, [pc, #24]	@ (8002ae4 <MX_TIM7_Init+0x64>)
 8002acc:	f003 fc1c 	bl	8006308 <HAL_TIMEx_MasterConfigSynchronization>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <MX_TIM7_Init+0x5a>
			!= HAL_OK) {
		Error_Handler();
 8002ad6:	f000 fc35 	bl	8003344 <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	200000d4 	.word	0x200000d4
 8002ae8:	40001400 	.word	0x40001400

08002aec <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08c      	sub	sp, #48	@ 0x30
 8002af0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002af2:	f107 031c 	add.w	r3, r7, #28
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	605a      	str	r2, [r3, #4]
 8002afc:	609a      	str	r2, [r3, #8]
 8002afe:	60da      	str	r2, [r3, #12]
 8002b00:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	61bb      	str	r3, [r7, #24]
 8002b06:	4b66      	ldr	r3, [pc, #408]	@ (8002ca0 <MX_GPIO_Init+0x1b4>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0a:	4a65      	ldr	r2, [pc, #404]	@ (8002ca0 <MX_GPIO_Init+0x1b4>)
 8002b0c:	f043 0310 	orr.w	r3, r3, #16
 8002b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b12:	4b63      	ldr	r3, [pc, #396]	@ (8002ca0 <MX_GPIO_Init+0x1b4>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b16:	f003 0310 	and.w	r3, r3, #16
 8002b1a:	61bb      	str	r3, [r7, #24]
 8002b1c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	4b5f      	ldr	r3, [pc, #380]	@ (8002ca0 <MX_GPIO_Init+0x1b4>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b26:	4a5e      	ldr	r2, [pc, #376]	@ (8002ca0 <MX_GPIO_Init+0x1b4>)
 8002b28:	f043 0304 	orr.w	r3, r3, #4
 8002b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b2e:	4b5c      	ldr	r3, [pc, #368]	@ (8002ca0 <MX_GPIO_Init+0x1b4>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	4b58      	ldr	r3, [pc, #352]	@ (8002ca0 <MX_GPIO_Init+0x1b4>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b42:	4a57      	ldr	r2, [pc, #348]	@ (8002ca0 <MX_GPIO_Init+0x1b4>)
 8002b44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b4a:	4b55      	ldr	r3, [pc, #340]	@ (8002ca0 <MX_GPIO_Init+0x1b4>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b52:	613b      	str	r3, [r7, #16]
 8002b54:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	4b51      	ldr	r3, [pc, #324]	@ (8002ca0 <MX_GPIO_Init+0x1b4>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5e:	4a50      	ldr	r2, [pc, #320]	@ (8002ca0 <MX_GPIO_Init+0x1b4>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b66:	4b4e      	ldr	r3, [pc, #312]	@ (8002ca0 <MX_GPIO_Init+0x1b4>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	4b4a      	ldr	r3, [pc, #296]	@ (8002ca0 <MX_GPIO_Init+0x1b4>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7a:	4a49      	ldr	r2, [pc, #292]	@ (8002ca0 <MX_GPIO_Init+0x1b4>)
 8002b7c:	f043 0302 	orr.w	r3, r3, #2
 8002b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b82:	4b47      	ldr	r3, [pc, #284]	@ (8002ca0 <MX_GPIO_Init+0x1b4>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	60bb      	str	r3, [r7, #8]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	607b      	str	r3, [r7, #4]
 8002b92:	4b43      	ldr	r3, [pc, #268]	@ (8002ca0 <MX_GPIO_Init+0x1b4>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b96:	4a42      	ldr	r2, [pc, #264]	@ (8002ca0 <MX_GPIO_Init+0x1b4>)
 8002b98:	f043 0308 	orr.w	r3, r3, #8
 8002b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b9e:	4b40      	ldr	r3, [pc, #256]	@ (8002ca0 <MX_GPIO_Init+0x1b4>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba2:	f003 0308 	and.w	r3, r3, #8
 8002ba6:	607b      	str	r3, [r7, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 8002baa:	2200      	movs	r2, #0
 8002bac:	21f7      	movs	r1, #247	@ 0xf7
 8002bae:	483d      	ldr	r0, [pc, #244]	@ (8002ca4 <MX_GPIO_Init+0x1b8>)
 8002bb0:	f001 feea 	bl	8004988 <HAL_GPIO_WritePin>
			GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7
					| GPIO_PIN_0 | GPIO_PIN_1, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_5, GPIO_PIN_RESET);
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	2121      	movs	r1, #33	@ 0x21
 8002bb8:	483b      	ldr	r0, [pc, #236]	@ (8002ca8 <MX_GPIO_Init+0x1bc>)
 8002bba:	f001 fee5 	bl	8004988 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14,
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8002bc4:	4839      	ldr	r0, [pc, #228]	@ (8002cac <MX_GPIO_Init+0x1c0>)
 8002bc6:	f001 fedf 	bl	8004988 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2140      	movs	r1, #64	@ 0x40
 8002bce:	4838      	ldr	r0, [pc, #224]	@ (8002cb0 <MX_GPIO_Init+0x1c4>)
 8002bd0:	f001 feda 	bl	8004988 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PE2 PE4 PE5 PE6
	 PE7 PE0 PE1 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6
 8002bd4:	23f7      	movs	r3, #247	@ 0xf7
 8002bd6:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_7 | GPIO_PIN_0 | GPIO_PIN_1;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be0:	2300      	movs	r3, #0
 8002be2:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002be4:	f107 031c 	add.w	r3, r7, #28
 8002be8:	4619      	mov	r1, r3
 8002bea:	482e      	ldr	r0, [pc, #184]	@ (8002ca4 <MX_GPIO_Init+0x1b8>)
 8002bec:	f001 fd18 	bl	8004620 <HAL_GPIO_Init>

	/*Configure GPIO pin : PE3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002bf0:	2308      	movs	r3, #8
 8002bf2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002bf4:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002bf8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bfe:	f107 031c 	add.w	r3, r7, #28
 8002c02:	4619      	mov	r1, r3
 8002c04:	4827      	ldr	r0, [pc, #156]	@ (8002ca4 <MX_GPIO_Init+0x1b8>)
 8002c06:	f001 fd0b 	bl	8004620 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002c0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c0e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002c10:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002c14:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c1a:	f107 031c 	add.w	r3, r7, #28
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4823      	ldr	r0, [pc, #140]	@ (8002cb0 <MX_GPIO_Init+0x1c4>)
 8002c22:	f001 fcfd 	bl	8004620 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_5;
 8002c26:	2321      	movs	r3, #33	@ 0x21
 8002c28:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c32:	2300      	movs	r3, #0
 8002c34:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c36:	f107 031c 	add.w	r3, r7, #28
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	481a      	ldr	r0, [pc, #104]	@ (8002ca8 <MX_GPIO_Init+0x1bc>)
 8002c3e:	f001 fcef 	bl	8004620 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD10 PD4 */
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_4;
 8002c42:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8002c46:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002c48:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002c4c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c52:	f107 031c 	add.w	r3, r7, #28
 8002c56:	4619      	mov	r1, r3
 8002c58:	4814      	ldr	r0, [pc, #80]	@ (8002cac <MX_GPIO_Init+0x1c0>)
 8002c5a:	f001 fce1 	bl	8004620 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD12 PD13 PD14 */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
 8002c5e:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8002c62:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c64:	2301      	movs	r3, #1
 8002c66:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c70:	f107 031c 	add.w	r3, r7, #28
 8002c74:	4619      	mov	r1, r3
 8002c76:	480d      	ldr	r0, [pc, #52]	@ (8002cac <MX_GPIO_Init+0x1c0>)
 8002c78:	f001 fcd2 	bl	8004620 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002c7c:	2340      	movs	r3, #64	@ 0x40
 8002c7e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c80:	2301      	movs	r3, #1
 8002c82:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c8c:	f107 031c 	add.w	r3, r7, #28
 8002c90:	4619      	mov	r1, r3
 8002c92:	4807      	ldr	r0, [pc, #28]	@ (8002cb0 <MX_GPIO_Init+0x1c4>)
 8002c94:	f001 fcc4 	bl	8004620 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002c98:	bf00      	nop
 8002c9a:	3730      	adds	r7, #48	@ 0x30
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	40020400 	.word	0x40020400
 8002cac:	40020c00 	.word	0x40020c00
 8002cb0:	40020800 	.word	0x40020800

08002cb4 <updateBuzzer>:

/* USER CODE BEGIN 4 */

void updateBuzzer() {
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
    if (!buzzer) return;
 8002cb8:	4b28      	ldr	r3, [pc, #160]	@ (8002d5c <updateBuzzer+0xa8>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	f083 0301 	eor.w	r3, r3, #1
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d147      	bne.n	8002d56 <updateBuzzer+0xa2>
    if (Press_Time > 0 && Press_Time <= 100) {
 8002cc6:	4b26      	ldr	r3, [pc, #152]	@ (8002d60 <updateBuzzer+0xac>)
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00e      	beq.n	8002cec <updateBuzzer+0x38>
 8002cce:	4b24      	ldr	r3, [pc, #144]	@ (8002d60 <updateBuzzer+0xac>)
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	2b64      	cmp	r3, #100	@ 0x64
 8002cd4:	d80a      	bhi.n	8002cec <updateBuzzer+0x38>
        TIM2->ARR = 1000 - 1;
 8002cd6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002cda:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002cde:	62da      	str	r2, [r3, #44]	@ 0x2c
        TIM2->CCR1 = 500;
 8002ce0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002ce4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002ce8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002cea:	e02f      	b.n	8002d4c <updateBuzzer+0x98>
    } else if (Press_Time >= 700 && Press_Time <= 800) {
 8002cec:	4b1c      	ldr	r3, [pc, #112]	@ (8002d60 <updateBuzzer+0xac>)
 8002cee:	881b      	ldrh	r3, [r3, #0]
 8002cf0:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8002cf4:	d30f      	bcc.n	8002d16 <updateBuzzer+0x62>
 8002cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d60 <updateBuzzer+0xac>)
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8002cfe:	d80a      	bhi.n	8002d16 <updateBuzzer+0x62>
        TIM2->ARR = 800 - 1;
 8002d00:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002d04:	f240 321f 	movw	r2, #799	@ 0x31f
 8002d08:	62da      	str	r2, [r3, #44]	@ 0x2c
        TIM2->CCR1 = 400;
 8002d0a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002d0e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002d12:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d14:	e01a      	b.n	8002d4c <updateBuzzer+0x98>
    } else if (Press_Time >= 2500 && Press_Time <= 2600) {
 8002d16:	4b12      	ldr	r3, [pc, #72]	@ (8002d60 <updateBuzzer+0xac>)
 8002d18:	881b      	ldrh	r3, [r3, #0]
 8002d1a:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d910      	bls.n	8002d44 <updateBuzzer+0x90>
 8002d22:	4b0f      	ldr	r3, [pc, #60]	@ (8002d60 <updateBuzzer+0xac>)
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	f640 2228 	movw	r2, #2600	@ 0xa28
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d80a      	bhi.n	8002d44 <updateBuzzer+0x90>
        TIM2->ARR = 600 - 1;
 8002d2e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002d32:	f240 2257 	movw	r2, #599	@ 0x257
 8002d36:	62da      	str	r2, [r3, #44]	@ 0x2c
        TIM2->CCR1 = 300;
 8002d38:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002d3c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002d40:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d42:	e003      	b.n	8002d4c <updateBuzzer+0x98>
    } else {
        TIM2->CCR1 = 0;
 8002d44:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002d48:	2200      	movs	r2, #0
 8002d4a:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	4805      	ldr	r0, [pc, #20]	@ (8002d64 <updateBuzzer+0xb0>)
 8002d50:	f002 fbe4 	bl	800551c <HAL_TIM_PWM_Start>
 8002d54:	e000      	b.n	8002d58 <updateBuzzer+0xa4>
    if (!buzzer) return;
 8002d56:	bf00      	nop
}
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	20000009 	.word	0x20000009
 8002d60:	2000014c 	.word	0x2000014c
 8002d64:	2000008c 	.word	0x2000008c

08002d68 <update_Time>:
void update_Time() {
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
    if (++clock_time == 1000) {
 8002d6c:	4b24      	ldr	r3, [pc, #144]	@ (8002e00 <update_Time+0x98>)
 8002d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d72:	1c50      	adds	r0, r2, #1
 8002d74:	f143 0100 	adc.w	r1, r3, #0
 8002d78:	4b21      	ldr	r3, [pc, #132]	@ (8002e00 <update_Time+0x98>)
 8002d7a:	e9c3 0100 	strd	r0, r1, [r3]
 8002d7e:	4b20      	ldr	r3, [pc, #128]	@ (8002e00 <update_Time+0x98>)
 8002d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d84:	f5a2 717a 	sub.w	r1, r2, #1000	@ 0x3e8
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	d133      	bne.n	8002df4 <update_Time+0x8c>
        clock_time = 0;
 8002d8c:	491c      	ldr	r1, [pc, #112]	@ (8002e00 <update_Time+0x98>)
 8002d8e:	f04f 0200 	mov.w	r2, #0
 8002d92:	f04f 0300 	mov.w	r3, #0
 8002d96:	e9c1 2300 	strd	r2, r3, [r1]
        if (++second == 60) {
 8002d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8002e04 <update_Time+0x9c>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	4b18      	ldr	r3, [pc, #96]	@ (8002e04 <update_Time+0x9c>)
 8002da4:	701a      	strb	r2, [r3, #0]
 8002da6:	4b17      	ldr	r3, [pc, #92]	@ (8002e04 <update_Time+0x9c>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b3c      	cmp	r3, #60	@ 0x3c
 8002dac:	d122      	bne.n	8002df4 <update_Time+0x8c>
            second = 0;
 8002dae:	4b15      	ldr	r3, [pc, #84]	@ (8002e04 <update_Time+0x9c>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	701a      	strb	r2, [r3, #0]
            if (++minute == 60) {
 8002db4:	4b14      	ldr	r3, [pc, #80]	@ (8002e08 <update_Time+0xa0>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	3301      	adds	r3, #1
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	4b12      	ldr	r3, [pc, #72]	@ (8002e08 <update_Time+0xa0>)
 8002dbe:	701a      	strb	r2, [r3, #0]
 8002dc0:	4b11      	ldr	r3, [pc, #68]	@ (8002e08 <update_Time+0xa0>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b3c      	cmp	r3, #60	@ 0x3c
 8002dc6:	d115      	bne.n	8002df4 <update_Time+0x8c>
                minute = 0;
 8002dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002e08 <update_Time+0xa0>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	701a      	strb	r2, [r3, #0]
                if (++hour == 24) {
 8002dce:	4b0f      	ldr	r3, [pc, #60]	@ (8002e0c <update_Time+0xa4>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8002e0c <update_Time+0xa4>)
 8002dd8:	701a      	strb	r2, [r3, #0]
 8002dda:	4b0c      	ldr	r3, [pc, #48]	@ (8002e0c <update_Time+0xa4>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b18      	cmp	r3, #24
 8002de0:	d108      	bne.n	8002df4 <update_Time+0x8c>
                    hour = 0;
 8002de2:	4b0a      	ldr	r3, [pc, #40]	@ (8002e0c <update_Time+0xa4>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	701a      	strb	r2, [r3, #0]
                    day++;
 8002de8:	4b09      	ldr	r3, [pc, #36]	@ (8002e10 <update_Time+0xa8>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	3301      	adds	r3, #1
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	4b07      	ldr	r3, [pc, #28]	@ (8002e10 <update_Time+0xa8>)
 8002df2:	701a      	strb	r2, [r3, #0]
                }
            }
        }
    }
}
 8002df4:	bf00      	nop
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	20000150 	.word	0x20000150
 8002e04:	20000007 	.word	0x20000007
 8002e08:	20000006 	.word	0x20000006
 8002e0c:	20000005 	.word	0x20000005
 8002e10:	2000000d 	.word	0x2000000d

08002e14 <handleAlarmOrTimer>:
void handleAlarmOrTimer(bool condition, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	6039      	str	r1, [r7, #0]
 8002e1e:	71fb      	strb	r3, [r7, #7]
 8002e20:	4613      	mov	r3, r2
 8002e22:	80bb      	strh	r3, [r7, #4]
    if (condition) {
 8002e24:	79fb      	ldrb	r3, [r7, #7]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d035      	beq.n	8002e96 <handleAlarmOrTimer+0x82>
        if (clock_time % 100 < 50) {
 8002e2a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea0 <handleAlarmOrTimer+0x8c>)
 8002e2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e30:	f04f 0264 	mov.w	r2, #100	@ 0x64
 8002e34:	f04f 0300 	mov.w	r3, #0
 8002e38:	f7fd fa1a 	bl	8000270 <__aeabi_uldivmod>
 8002e3c:	2a32      	cmp	r2, #50	@ 0x32
 8002e3e:	f173 0300 	sbcs.w	r3, r3, #0
 8002e42:	d217      	bcs.n	8002e74 <handleAlarmOrTimer+0x60>
            HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 8002e44:	88bb      	ldrh	r3, [r7, #4]
 8002e46:	4619      	mov	r1, r3
 8002e48:	6838      	ldr	r0, [r7, #0]
 8002e4a:	f001 fdb6 	bl	80049ba <HAL_GPIO_TogglePin>
            if (buzzer){
 8002e4e:	4b15      	ldr	r3, [pc, #84]	@ (8002ea4 <handleAlarmOrTimer+0x90>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d01f      	beq.n	8002e96 <handleAlarmOrTimer+0x82>
            	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002e56:	2100      	movs	r1, #0
 8002e58:	4813      	ldr	r0, [pc, #76]	@ (8002ea8 <handleAlarmOrTimer+0x94>)
 8002e5a:	f002 fb5f 	bl	800551c <HAL_TIM_PWM_Start>
            	TIM2->ARR = 1000 - 1; // 주파수 초기값으로 되돌림
 8002e5e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002e62:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002e66:	62da      	str	r2, [r3, #44]	@ 0x2c
            	TIM2->CCR1 = 500; // 듀티 사이클 초기값으로 되돌림
 8002e68:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002e6c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002e70:	635a      	str	r2, [r3, #52]	@ 0x34
            	TIM2->CCR1 = 0; // 듀티 사이클 0으로 설정

            }
        }
    }
}
 8002e72:	e010      	b.n	8002e96 <handleAlarmOrTimer+0x82>
            if (buzzer){
 8002e74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea4 <handleAlarmOrTimer+0x90>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00c      	beq.n	8002e96 <handleAlarmOrTimer+0x82>
            	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	480a      	ldr	r0, [pc, #40]	@ (8002ea8 <handleAlarmOrTimer+0x94>)
 8002e80:	f002 fc14 	bl	80056ac <HAL_TIM_PWM_Stop>
            	TIM2->ARR = 1000 - 1; // 주파수 초기값으로 되돌림
 8002e84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002e88:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002e8c:	62da      	str	r2, [r3, #44]	@ 0x2c
            	TIM2->CCR1 = 0; // 듀티 사이클 0으로 설정
 8002e8e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002e92:	2200      	movs	r2, #0
 8002e94:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002e96:	bf00      	nop
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20000150 	.word	0x20000150
 8002ea4:	20000009 	.word	0x20000009
 8002ea8:	2000008c 	.word	0x2000008c

08002eac <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { //타이머 인터럽트 호출
 8002eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb0:	b082      	sub	sp, #8
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM7) { //1ms 마다 타이머 인터럽트
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a3e      	ldr	r2, [pc, #248]	@ (8002fb4 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d174      	bne.n	8002faa <HAL_TIM_PeriodElapsedCallback+0xfe>
		Run_Time++; //실행 시간 증가
 8002ec0:	4b3d      	ldr	r3, [pc, #244]	@ (8002fb8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec6:	f112 0a01 	adds.w	sl, r2, #1
 8002eca:	f143 0b00 	adc.w	fp, r3, #0
 8002ece:	4b3a      	ldr	r3, [pc, #232]	@ (8002fb8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002ed0:	e9c3 ab00 	strd	sl, fp, [r3]
		update_Time();
 8002ed4:	f7ff ff48 	bl	8002d68 <update_Time>
		if ((sw1 || sw2 || sw3 || sw4) && Press_Time <= 2610) {
 8002ed8:	4b38      	ldr	r3, [pc, #224]	@ (8002fbc <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10b      	bne.n	8002ef8 <HAL_TIM_PeriodElapsedCallback+0x4c>
 8002ee0:	4b37      	ldr	r3, [pc, #220]	@ (8002fc0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d107      	bne.n	8002ef8 <HAL_TIM_PeriodElapsedCallback+0x4c>
 8002ee8:	4b36      	ldr	r3, [pc, #216]	@ (8002fc4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d103      	bne.n	8002ef8 <HAL_TIM_PeriodElapsedCallback+0x4c>
 8002ef0:	4b35      	ldr	r3, [pc, #212]	@ (8002fc8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00b      	beq.n	8002f10 <HAL_TIM_PeriodElapsedCallback+0x64>
 8002ef8:	4b34      	ldr	r3, [pc, #208]	@ (8002fcc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	f640 2232 	movw	r2, #2610	@ 0xa32
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d805      	bhi.n	8002f10 <HAL_TIM_PeriodElapsedCallback+0x64>
		   Press_Time++;
 8002f04:	4b31      	ldr	r3, [pc, #196]	@ (8002fcc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	4b2f      	ldr	r3, [pc, #188]	@ (8002fcc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002f0e:	801a      	strh	r2, [r3, #0]
		}
		if (stopwatch_running) stopwatch_time++;
 8002f10:	4b2f      	ldr	r3, [pc, #188]	@ (8002fd0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d009      	beq.n	8002f2c <HAL_TIM_PeriodElapsedCallback+0x80>
 8002f18:	4b2e      	ldr	r3, [pc, #184]	@ (8002fd4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1e:	f112 0801 	adds.w	r8, r2, #1
 8002f22:	f143 0900 	adc.w	r9, r3, #0
 8002f26:	4b2b      	ldr	r3, [pc, #172]	@ (8002fd4 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002f28:	e9c3 8900 	strd	r8, r9, [r3]
		if (timer_start && timer_time_tmp > 0) timer_time_tmp--;
 8002f2c:	4b2a      	ldr	r3, [pc, #168]	@ (8002fd8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00d      	beq.n	8002f50 <HAL_TIM_PeriodElapsedCallback+0xa4>
 8002f34:	4b29      	ldr	r3, [pc, #164]	@ (8002fdc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	d008      	beq.n	8002f50 <HAL_TIM_PeriodElapsedCallback+0xa4>
 8002f3e:	4b27      	ldr	r3, [pc, #156]	@ (8002fdc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f44:	1e54      	subs	r4, r2, #1
 8002f46:	f143 35ff 	adc.w	r5, r3, #4294967295
 8002f4a:	4b24      	ldr	r3, [pc, #144]	@ (8002fdc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002f4c:	e9c3 4500 	strd	r4, r5, [r3]
		updateBuzzer();
 8002f50:	f7ff feb0 	bl	8002cb4 <updateBuzzer>
		handleAlarmOrTimer(alarm_ring && !alarm_setmode, GPIOB, GPIO_PIN_0);
 8002f54:	4b22      	ldr	r3, [pc, #136]	@ (8002fe0 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d008      	beq.n	8002f6e <HAL_TIM_PeriodElapsedCallback+0xc2>
 8002f5c:	4b21      	ldr	r3, [pc, #132]	@ (8002fe4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	f083 0301 	eor.w	r3, r3, #1
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <HAL_TIM_PeriodElapsedCallback+0xc2>
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e000      	b.n	8002f70 <HAL_TIM_PeriodElapsedCallback+0xc4>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2201      	movs	r2, #1
 8002f78:	491b      	ldr	r1, [pc, #108]	@ (8002fe8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff ff4a 	bl	8002e14 <handleAlarmOrTimer>
		handleAlarmOrTimer(timer_time_tmp == 0 && timer_start, GPIOD, GPIO_PIN_13);
 8002f80:	4b16      	ldr	r3, [pc, #88]	@ (8002fdc <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	d105      	bne.n	8002f96 <HAL_TIM_PeriodElapsedCallback+0xea>
 8002f8a:	4b13      	ldr	r3, [pc, #76]	@ (8002fd8 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_TIM_PeriodElapsedCallback+0xea>
 8002f92:	2301      	movs	r3, #1
 8002f94:	e000      	b.n	8002f98 <HAL_TIM_PeriodElapsedCallback+0xec>
 8002f96:	2300      	movs	r3, #0
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fa2:	4912      	ldr	r1, [pc, #72]	@ (8002fec <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7ff ff35 	bl	8002e14 <handleAlarmOrTimer>

	}
}
 8002faa:	bf00      	nop
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fb4:	40001400 	.word	0x40001400
 8002fb8:	20000130 	.word	0x20000130
 8002fbc:	20000120 	.word	0x20000120
 8002fc0:	20000121 	.word	0x20000121
 8002fc4:	20000122 	.word	0x20000122
 8002fc8:	20000123 	.word	0x20000123
 8002fcc:	2000014c 	.word	0x2000014c
 8002fd0:	200001ca 	.word	0x200001ca
 8002fd4:	20000170 	.word	0x20000170
 8002fd8:	200001e2 	.word	0x200001e2
 8002fdc:	200001d8 	.word	0x200001d8
 8002fe0:	2000016b 	.word	0x2000016b
 8002fe4:	2000015a 	.word	0x2000015a
 8002fe8:	40020400 	.word	0x40020400
 8002fec:	40020c00 	.word	0x40020c00

08002ff0 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) { //외부 인터럽트 호출
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_3) {
 8002ffa:	88fb      	ldrh	r3, [r7, #6]
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	f040 80ab 	bne.w	8003158 <HAL_GPIO_EXTI_Callback+0x168>
		if (HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3) == GPIO_PIN_SET) { // GPIOE 포트의 GPIO_PIN_3 핀이 현재 눌린 상태(높은 전압 상태)인지 확인
 8003002:	2108      	movs	r1, #8
 8003004:	4898      	ldr	r0, [pc, #608]	@ (8003268 <HAL_GPIO_EXTI_Callback+0x278>)
 8003006:	f001 fca7 	bl	8004958 <HAL_GPIO_ReadPin>
 800300a:	4603      	mov	r3, r0
 800300c:	2b01      	cmp	r3, #1
 800300e:	d113      	bne.n	8003038 <HAL_GPIO_EXTI_Callback+0x48>
			if (sw1 == false) { // 이전 상태는 눌리지 않은 상태
 8003010:	4b96      	ldr	r3, [pc, #600]	@ (800326c <HAL_GPIO_EXTI_Callback+0x27c>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	f083 0301 	eor.w	r3, r3, #1
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 8184 	beq.w	8003328 <HAL_GPIO_EXTI_Callback+0x338>
				sw1 = true; // 이전 상태를 현재 상태로 업데이트(스위치가 눌렸음을 표시)
 8003020:	4b92      	ldr	r3, [pc, #584]	@ (800326c <HAL_GPIO_EXTI_Callback+0x27c>)
 8003022:	2201      	movs	r2, #1
 8003024:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8003026:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800302a:	4891      	ldr	r0, [pc, #580]	@ (8003270 <HAL_GPIO_EXTI_Callback+0x280>)
 800302c:	f001 fcc5 	bl	80049ba <HAL_GPIO_TogglePin>
				Press_Time = 0; // sw1이 눌릴 때 Press_Time 초기화
 8003030:	4b90      	ldr	r3, [pc, #576]	@ (8003274 <HAL_GPIO_EXTI_Callback+0x284>)
 8003032:	2200      	movs	r2, #0
 8003034:	801a      	strh	r2, [r3, #0]
				sw4_released = true;
				Press_Time = 0;
			}
		}
	}
}
 8003036:	e177      	b.n	8003328 <HAL_GPIO_EXTI_Callback+0x338>
			if (sw1 == true) {	// 이전 상태는 눌린 상태
 8003038:	4b8c      	ldr	r3, [pc, #560]	@ (800326c <HAL_GPIO_EXTI_Callback+0x27c>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 8173 	beq.w	8003328 <HAL_GPIO_EXTI_Callback+0x338>
				sw1 = false; // 이전 상태를 현재 상태로 업데이트(스위치가 떼졌음을 표시)
 8003042:	4b8a      	ldr	r3, [pc, #552]	@ (800326c <HAL_GPIO_EXTI_Callback+0x27c>)
 8003044:	2200      	movs	r2, #0
 8003046:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8003048:	2140      	movs	r1, #64	@ 0x40
 800304a:	488b      	ldr	r0, [pc, #556]	@ (8003278 <HAL_GPIO_EXTI_Callback+0x288>)
 800304c:	f001 fcb5 	bl	80049ba <HAL_GPIO_TogglePin>
				sw1_released = true; // sw1_released 변수를 true로 설정하여 디바운스 처리 완료 표시
 8003050:	4b8a      	ldr	r3, [pc, #552]	@ (800327c <HAL_GPIO_EXTI_Callback+0x28c>)
 8003052:	2201      	movs	r2, #1
 8003054:	701a      	strb	r2, [r3, #0]
				Press_Time = 0;	// sw1이 떼질 때 Press_Time 초기화
 8003056:	4b87      	ldr	r3, [pc, #540]	@ (8003274 <HAL_GPIO_EXTI_Callback+0x284>)
 8003058:	2200      	movs	r2, #0
 800305a:	801a      	strh	r2, [r3, #0]
				if (!alarm_ring) {
 800305c:	4b88      	ldr	r3, [pc, #544]	@ (8003280 <HAL_GPIO_EXTI_Callback+0x290>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	f083 0301 	eor.w	r3, r3, #1
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d060      	beq.n	800312c <HAL_GPIO_EXTI_Callback+0x13c>
					if (Press_Mode == PRESS_SHORT && !clock_setmode && !timer_setmode
 800306a:	4b86      	ldr	r3, [pc, #536]	@ (8003284 <HAL_GPIO_EXTI_Callback+0x294>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d11d      	bne.n	80030ae <HAL_GPIO_EXTI_Callback+0xbe>
 8003072:	4b85      	ldr	r3, [pc, #532]	@ (8003288 <HAL_GPIO_EXTI_Callback+0x298>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	f083 0301 	eor.w	r3, r3, #1
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	d016      	beq.n	80030ae <HAL_GPIO_EXTI_Callback+0xbe>
 8003080:	4b82      	ldr	r3, [pc, #520]	@ (800328c <HAL_GPIO_EXTI_Callback+0x29c>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	f083 0301 	eor.w	r3, r3, #1
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00f      	beq.n	80030ae <HAL_GPIO_EXTI_Callback+0xbe>
							&& !alarm_setmode) { //짧게 누르고 수정상태 아니면 모드 변경
 800308e:	4b80      	ldr	r3, [pc, #512]	@ (8003290 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	f083 0301 	eor.w	r3, r3, #1
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	d008      	beq.n	80030ae <HAL_GPIO_EXTI_Callback+0xbe>
						Watch_Mode++;
 800309c:	4b7d      	ldr	r3, [pc, #500]	@ (8003294 <HAL_GPIO_EXTI_Callback+0x2a4>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	3301      	adds	r3, #1
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	4b7b      	ldr	r3, [pc, #492]	@ (8003294 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80030a6:	701a      	strb	r2, [r3, #0]
						mode_changed = true;
 80030a8:	4b7b      	ldr	r3, [pc, #492]	@ (8003298 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80030aa:	2201      	movs	r2, #1
 80030ac:	701a      	strb	r2, [r3, #0]
					if (Press_Mode == PRESS_SHORT && clock_setmode) { //짧게 누르고 수정상태이면 수정값 증가시키기
 80030ae:	4b75      	ldr	r3, [pc, #468]	@ (8003284 <HAL_GPIO_EXTI_Callback+0x294>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d110      	bne.n	80030d8 <HAL_GPIO_EXTI_Callback+0xe8>
 80030b6:	4b74      	ldr	r3, [pc, #464]	@ (8003288 <HAL_GPIO_EXTI_Callback+0x298>)
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00c      	beq.n	80030d8 <HAL_GPIO_EXTI_Callback+0xe8>
						item_select++;
 80030be:	4b77      	ldr	r3, [pc, #476]	@ (800329c <HAL_GPIO_EXTI_Callback+0x2ac>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	3301      	adds	r3, #1
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	4b75      	ldr	r3, [pc, #468]	@ (800329c <HAL_GPIO_EXTI_Callback+0x2ac>)
 80030c8:	701a      	strb	r2, [r3, #0]
						if (item_select == 6) {
 80030ca:	4b74      	ldr	r3, [pc, #464]	@ (800329c <HAL_GPIO_EXTI_Callback+0x2ac>)
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b06      	cmp	r3, #6
 80030d0:	d102      	bne.n	80030d8 <HAL_GPIO_EXTI_Callback+0xe8>
							item_select = 0;
 80030d2:	4b72      	ldr	r3, [pc, #456]	@ (800329c <HAL_GPIO_EXTI_Callback+0x2ac>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	701a      	strb	r2, [r3, #0]
					if (Press_Mode == PRESS_SHORT && timer_setmode) { //짧게 누르고 수정상태이면 수정값 증가시키기
 80030d8:	4b6a      	ldr	r3, [pc, #424]	@ (8003284 <HAL_GPIO_EXTI_Callback+0x294>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d110      	bne.n	8003102 <HAL_GPIO_EXTI_Callback+0x112>
 80030e0:	4b6a      	ldr	r3, [pc, #424]	@ (800328c <HAL_GPIO_EXTI_Callback+0x29c>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00c      	beq.n	8003102 <HAL_GPIO_EXTI_Callback+0x112>
						item_select2++;
 80030e8:	4b6d      	ldr	r3, [pc, #436]	@ (80032a0 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	3301      	adds	r3, #1
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	4b6b      	ldr	r3, [pc, #428]	@ (80032a0 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80030f2:	701a      	strb	r2, [r3, #0]
						if (item_select2 == 3) {
 80030f4:	4b6a      	ldr	r3, [pc, #424]	@ (80032a0 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b03      	cmp	r3, #3
 80030fa:	d102      	bne.n	8003102 <HAL_GPIO_EXTI_Callback+0x112>
							item_select2 = 0;
 80030fc:	4b68      	ldr	r3, [pc, #416]	@ (80032a0 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80030fe:	2200      	movs	r2, #0
 8003100:	701a      	strb	r2, [r3, #0]
					if (Press_Mode == PRESS_SHORT && alarm_setmode) { //짧게 누르고 수정상태이면 수정값 증가시키기
 8003102:	4b60      	ldr	r3, [pc, #384]	@ (8003284 <HAL_GPIO_EXTI_Callback+0x294>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d110      	bne.n	800312c <HAL_GPIO_EXTI_Callback+0x13c>
 800310a:	4b61      	ldr	r3, [pc, #388]	@ (8003290 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00c      	beq.n	800312c <HAL_GPIO_EXTI_Callback+0x13c>
						item_select3++;
 8003112:	4b64      	ldr	r3, [pc, #400]	@ (80032a4 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	3301      	adds	r3, #1
 8003118:	b2da      	uxtb	r2, r3
 800311a:	4b62      	ldr	r3, [pc, #392]	@ (80032a4 <HAL_GPIO_EXTI_Callback+0x2b4>)
 800311c:	701a      	strb	r2, [r3, #0]
						if (item_select3 == 4) {
 800311e:	4b61      	ldr	r3, [pc, #388]	@ (80032a4 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b04      	cmp	r3, #4
 8003124:	d102      	bne.n	800312c <HAL_GPIO_EXTI_Callback+0x13c>
							item_select3 = 0;
 8003126:	4b5f      	ldr	r3, [pc, #380]	@ (80032a4 <HAL_GPIO_EXTI_Callback+0x2b4>)
 8003128:	2200      	movs	r2, #0
 800312a:	701a      	strb	r2, [r3, #0]
				if (alarm_ring && !alarm_setmode) {
 800312c:	4b54      	ldr	r3, [pc, #336]	@ (8003280 <HAL_GPIO_EXTI_Callback+0x290>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 80f9 	beq.w	8003328 <HAL_GPIO_EXTI_Callback+0x338>
 8003136:	4b56      	ldr	r3, [pc, #344]	@ (8003290 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	f083 0301 	eor.w	r3, r3, #1
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 80f1 	beq.w	8003328 <HAL_GPIO_EXTI_Callback+0x338>
					alarm_ring = false;
 8003146:	4b4e      	ldr	r3, [pc, #312]	@ (8003280 <HAL_GPIO_EXTI_Callback+0x290>)
 8003148:	2200      	movs	r2, #0
 800314a:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800314c:	2201      	movs	r2, #1
 800314e:	2101      	movs	r1, #1
 8003150:	4855      	ldr	r0, [pc, #340]	@ (80032a8 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8003152:	f001 fc19 	bl	8004988 <HAL_GPIO_WritePin>
}
 8003156:	e0e7      	b.n	8003328 <HAL_GPIO_EXTI_Callback+0x338>
	else if (GPIO_Pin == GPIO_PIN_15) {
 8003158:	88fb      	ldrh	r3, [r7, #6]
 800315a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800315e:	d14d      	bne.n	80031fc <HAL_GPIO_EXTI_Callback+0x20c>
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == GPIO_PIN_SET) { // GPIOC 포트의 GPIO_PIN_15 핀이 현재 눌린 상태(높은 전압 상태)인지 확인
 8003160:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003164:	4844      	ldr	r0, [pc, #272]	@ (8003278 <HAL_GPIO_EXTI_Callback+0x288>)
 8003166:	f001 fbf7 	bl	8004958 <HAL_GPIO_ReadPin>
 800316a:	4603      	mov	r3, r0
 800316c:	2b01      	cmp	r3, #1
 800316e:	d113      	bne.n	8003198 <HAL_GPIO_EXTI_Callback+0x1a8>
			if (sw2 == false) { 	// 이전 상태는 눌리지 않은 상태
 8003170:	4b4e      	ldr	r3, [pc, #312]	@ (80032ac <HAL_GPIO_EXTI_Callback+0x2bc>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	f083 0301 	eor.w	r3, r3, #1
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 80d4 	beq.w	8003328 <HAL_GPIO_EXTI_Callback+0x338>
				sw2 = true; 	// 이전 상태를 현재 상태로 업데이트(스위치가 눌렸음을 표시)
 8003180:	4b4a      	ldr	r3, [pc, #296]	@ (80032ac <HAL_GPIO_EXTI_Callback+0x2bc>)
 8003182:	2201      	movs	r2, #1
 8003184:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8003186:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800318a:	4839      	ldr	r0, [pc, #228]	@ (8003270 <HAL_GPIO_EXTI_Callback+0x280>)
 800318c:	f001 fc15 	bl	80049ba <HAL_GPIO_TogglePin>
				Press_Time = 0; 	// sw2이 눌릴 때 Press_Time 초기화
 8003190:	4b38      	ldr	r3, [pc, #224]	@ (8003274 <HAL_GPIO_EXTI_Callback+0x284>)
 8003192:	2200      	movs	r2, #0
 8003194:	801a      	strh	r2, [r3, #0]
}
 8003196:	e0c7      	b.n	8003328 <HAL_GPIO_EXTI_Callback+0x338>
			if (sw2 == true) { 	// 이전 상태는 눌린 상태
 8003198:	4b44      	ldr	r3, [pc, #272]	@ (80032ac <HAL_GPIO_EXTI_Callback+0x2bc>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 80c3 	beq.w	8003328 <HAL_GPIO_EXTI_Callback+0x338>
				sw2 = false; 	// 이전 상태를 현재 상태로 업데이트(스위치가 떼졌음을 표시)
 80031a2:	4b42      	ldr	r3, [pc, #264]	@ (80032ac <HAL_GPIO_EXTI_Callback+0x2bc>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	701a      	strb	r2, [r3, #0]
				sw2_released = true; //
 80031a8:	4b41      	ldr	r3, [pc, #260]	@ (80032b0 <HAL_GPIO_EXTI_Callback+0x2c0>)
 80031aa:	2201      	movs	r2, #1
 80031ac:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 80031ae:	2140      	movs	r1, #64	@ 0x40
 80031b0:	4831      	ldr	r0, [pc, #196]	@ (8003278 <HAL_GPIO_EXTI_Callback+0x288>)
 80031b2:	f001 fc02 	bl	80049ba <HAL_GPIO_TogglePin>
				Press_Time = 0; 	// sw1이 떼질 때 Press_Time 초기화
 80031b6:	4b2f      	ldr	r3, [pc, #188]	@ (8003274 <HAL_GPIO_EXTI_Callback+0x284>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	801a      	strh	r2, [r3, #0]
				if (timer_time_tmp == 0 && timer_start && Watch_Mode != MODE_TIMER) {
 80031bc:	4b3d      	ldr	r3, [pc, #244]	@ (80032b4 <HAL_GPIO_EXTI_Callback+0x2c4>)
 80031be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	f040 80b0 	bne.w	8003328 <HAL_GPIO_EXTI_Callback+0x338>
 80031c8:	4b3b      	ldr	r3, [pc, #236]	@ (80032b8 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 80ab 	beq.w	8003328 <HAL_GPIO_EXTI_Callback+0x338>
 80031d2:	4b30      	ldr	r3, [pc, #192]	@ (8003294 <HAL_GPIO_EXTI_Callback+0x2a4>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	f000 80a6 	beq.w	8003328 <HAL_GPIO_EXTI_Callback+0x338>
					timer_start = !timer_start;
 80031dc:	4b36      	ldr	r3, [pc, #216]	@ (80032b8 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	bf14      	ite	ne
 80031e4:	2301      	movne	r3, #1
 80031e6:	2300      	moveq	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	f083 0301 	eor.w	r3, r3, #1
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	4b30      	ldr	r3, [pc, #192]	@ (80032b8 <HAL_GPIO_EXTI_Callback+0x2c8>)
 80031f8:	701a      	strb	r2, [r3, #0]
}
 80031fa:	e095      	b.n	8003328 <HAL_GPIO_EXTI_Callback+0x338>
	else if (GPIO_Pin == GPIO_PIN_4) {
 80031fc:	88fb      	ldrh	r3, [r7, #6]
 80031fe:	2b10      	cmp	r3, #16
 8003200:	d162      	bne.n	80032c8 <HAL_GPIO_EXTI_Callback+0x2d8>
		if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4) == GPIO_PIN_SET) {
 8003202:	2110      	movs	r1, #16
 8003204:	481a      	ldr	r0, [pc, #104]	@ (8003270 <HAL_GPIO_EXTI_Callback+0x280>)
 8003206:	f001 fba7 	bl	8004958 <HAL_GPIO_ReadPin>
 800320a:	4603      	mov	r3, r0
 800320c:	2b01      	cmp	r3, #1
 800320e:	d116      	bne.n	800323e <HAL_GPIO_EXTI_Callback+0x24e>
			if (sw3 == false) {
 8003210:	4b2a      	ldr	r3, [pc, #168]	@ (80032bc <HAL_GPIO_EXTI_Callback+0x2cc>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	f083 0301 	eor.w	r3, r3, #1
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 8084 	beq.w	8003328 <HAL_GPIO_EXTI_Callback+0x338>
				sw3 = true;
 8003220:	4b26      	ldr	r3, [pc, #152]	@ (80032bc <HAL_GPIO_EXTI_Callback+0x2cc>)
 8003222:	2201      	movs	r2, #1
 8003224:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8003226:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800322a:	4811      	ldr	r0, [pc, #68]	@ (8003270 <HAL_GPIO_EXTI_Callback+0x280>)
 800322c:	f001 fbc5 	bl	80049ba <HAL_GPIO_TogglePin>
				sw3_pressed = true;
 8003230:	4b23      	ldr	r3, [pc, #140]	@ (80032c0 <HAL_GPIO_EXTI_Callback+0x2d0>)
 8003232:	2201      	movs	r2, #1
 8003234:	701a      	strb	r2, [r3, #0]
				Press_Time = 0; // sw1이 눌릴 때 Press_Time 초기화
 8003236:	4b0f      	ldr	r3, [pc, #60]	@ (8003274 <HAL_GPIO_EXTI_Callback+0x284>)
 8003238:	2200      	movs	r2, #0
 800323a:	801a      	strh	r2, [r3, #0]
}
 800323c:	e074      	b.n	8003328 <HAL_GPIO_EXTI_Callback+0x338>
			if (sw3 == true) {
 800323e:	4b1f      	ldr	r3, [pc, #124]	@ (80032bc <HAL_GPIO_EXTI_Callback+0x2cc>)
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d070      	beq.n	8003328 <HAL_GPIO_EXTI_Callback+0x338>
				sw3 = false;
 8003246:	4b1d      	ldr	r3, [pc, #116]	@ (80032bc <HAL_GPIO_EXTI_Callback+0x2cc>)
 8003248:	2200      	movs	r2, #0
 800324a:	701a      	strb	r2, [r3, #0]
				sw3_pressed = false;
 800324c:	4b1c      	ldr	r3, [pc, #112]	@ (80032c0 <HAL_GPIO_EXTI_Callback+0x2d0>)
 800324e:	2200      	movs	r2, #0
 8003250:	701a      	strb	r2, [r3, #0]
				sw3_released = true;
 8003252:	4b1c      	ldr	r3, [pc, #112]	@ (80032c4 <HAL_GPIO_EXTI_Callback+0x2d4>)
 8003254:	2201      	movs	r2, #1
 8003256:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8003258:	2140      	movs	r1, #64	@ 0x40
 800325a:	4807      	ldr	r0, [pc, #28]	@ (8003278 <HAL_GPIO_EXTI_Callback+0x288>)
 800325c:	f001 fbad 	bl	80049ba <HAL_GPIO_TogglePin>
				Press_Time = 0;
 8003260:	4b04      	ldr	r3, [pc, #16]	@ (8003274 <HAL_GPIO_EXTI_Callback+0x284>)
 8003262:	2200      	movs	r2, #0
 8003264:	801a      	strh	r2, [r3, #0]
}
 8003266:	e05f      	b.n	8003328 <HAL_GPIO_EXTI_Callback+0x338>
 8003268:	40021000 	.word	0x40021000
 800326c:	20000120 	.word	0x20000120
 8003270:	40020c00 	.word	0x40020c00
 8003274:	2000014c 	.word	0x2000014c
 8003278:	40020800 	.word	0x40020800
 800327c:	20000124 	.word	0x20000124
 8003280:	2000016b 	.word	0x2000016b
 8003284:	2000014e 	.word	0x2000014e
 8003288:	20000158 	.word	0x20000158
 800328c:	200001e0 	.word	0x200001e0
 8003290:	2000015a 	.word	0x2000015a
 8003294:	20000004 	.word	0x20000004
 8003298:	2000014f 	.word	0x2000014f
 800329c:	20000159 	.word	0x20000159
 80032a0:	200001e1 	.word	0x200001e1
 80032a4:	2000016a 	.word	0x2000016a
 80032a8:	40020400 	.word	0x40020400
 80032ac:	20000121 	.word	0x20000121
 80032b0:	20000125 	.word	0x20000125
 80032b4:	200001d8 	.word	0x200001d8
 80032b8:	200001e2 	.word	0x200001e2
 80032bc:	20000122 	.word	0x20000122
 80032c0:	20000127 	.word	0x20000127
 80032c4:	20000126 	.word	0x20000126
	else if (GPIO_Pin == GPIO_PIN_10) {
 80032c8:	88fb      	ldrh	r3, [r7, #6]
 80032ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032ce:	d12b      	bne.n	8003328 <HAL_GPIO_EXTI_Callback+0x338>
		if (HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10) == GPIO_PIN_SET) {
 80032d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80032d4:	4816      	ldr	r0, [pc, #88]	@ (8003330 <HAL_GPIO_EXTI_Callback+0x340>)
 80032d6:	f001 fb3f 	bl	8004958 <HAL_GPIO_ReadPin>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d112      	bne.n	8003306 <HAL_GPIO_EXTI_Callback+0x316>
			if (sw4 == false) {
 80032e0:	4b14      	ldr	r3, [pc, #80]	@ (8003334 <HAL_GPIO_EXTI_Callback+0x344>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	f083 0301 	eor.w	r3, r3, #1
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d01c      	beq.n	8003328 <HAL_GPIO_EXTI_Callback+0x338>
				sw4 = true;
 80032ee:	4b11      	ldr	r3, [pc, #68]	@ (8003334 <HAL_GPIO_EXTI_Callback+0x344>)
 80032f0:	2201      	movs	r2, #1
 80032f2:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80032f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80032f8:	480d      	ldr	r0, [pc, #52]	@ (8003330 <HAL_GPIO_EXTI_Callback+0x340>)
 80032fa:	f001 fb5e 	bl	80049ba <HAL_GPIO_TogglePin>
				Press_Time = 0; // sw1이 눌릴 때 Press_Time 초기화
 80032fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003338 <HAL_GPIO_EXTI_Callback+0x348>)
 8003300:	2200      	movs	r2, #0
 8003302:	801a      	strh	r2, [r3, #0]
}
 8003304:	e010      	b.n	8003328 <HAL_GPIO_EXTI_Callback+0x338>
			if (sw4 == true) {
 8003306:	4b0b      	ldr	r3, [pc, #44]	@ (8003334 <HAL_GPIO_EXTI_Callback+0x344>)
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00c      	beq.n	8003328 <HAL_GPIO_EXTI_Callback+0x338>
				sw4 = false;
 800330e:	4b09      	ldr	r3, [pc, #36]	@ (8003334 <HAL_GPIO_EXTI_Callback+0x344>)
 8003310:	2200      	movs	r2, #0
 8003312:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8003314:	2140      	movs	r1, #64	@ 0x40
 8003316:	4809      	ldr	r0, [pc, #36]	@ (800333c <HAL_GPIO_EXTI_Callback+0x34c>)
 8003318:	f001 fb4f 	bl	80049ba <HAL_GPIO_TogglePin>
				sw4_released = true;
 800331c:	4b08      	ldr	r3, [pc, #32]	@ (8003340 <HAL_GPIO_EXTI_Callback+0x350>)
 800331e:	2201      	movs	r2, #1
 8003320:	701a      	strb	r2, [r3, #0]
				Press_Time = 0;
 8003322:	4b05      	ldr	r3, [pc, #20]	@ (8003338 <HAL_GPIO_EXTI_Callback+0x348>)
 8003324:	2200      	movs	r2, #0
 8003326:	801a      	strh	r2, [r3, #0]
}
 8003328:	bf00      	nop
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40020c00 	.word	0x40020c00
 8003334:	20000123 	.word	0x20000123
 8003338:	2000014c 	.word	0x2000014c
 800333c:	40020800 	.word	0x40020800
 8003340:	20000128 	.word	0x20000128

08003344 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003348:	b672      	cpsid	i
}
 800334a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800334c:	bf00      	nop
 800334e:	e7fd      	b.n	800334c <Error_Handler+0x8>

08003350 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	607b      	str	r3, [r7, #4]
 800335a:	4b10      	ldr	r3, [pc, #64]	@ (800339c <HAL_MspInit+0x4c>)
 800335c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800335e:	4a0f      	ldr	r2, [pc, #60]	@ (800339c <HAL_MspInit+0x4c>)
 8003360:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003364:	6453      	str	r3, [r2, #68]	@ 0x44
 8003366:	4b0d      	ldr	r3, [pc, #52]	@ (800339c <HAL_MspInit+0x4c>)
 8003368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800336e:	607b      	str	r3, [r7, #4]
 8003370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003372:	2300      	movs	r3, #0
 8003374:	603b      	str	r3, [r7, #0]
 8003376:	4b09      	ldr	r3, [pc, #36]	@ (800339c <HAL_MspInit+0x4c>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337a:	4a08      	ldr	r2, [pc, #32]	@ (800339c <HAL_MspInit+0x4c>)
 800337c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003380:	6413      	str	r3, [r2, #64]	@ 0x40
 8003382:	4b06      	ldr	r3, [pc, #24]	@ (800339c <HAL_MspInit+0x4c>)
 8003384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800338a:	603b      	str	r3, [r7, #0]
 800338c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	40023800 	.word	0x40023800

080033a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033b0:	d10e      	bne.n	80033d0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	4b13      	ldr	r3, [pc, #76]	@ (8003404 <HAL_TIM_Base_MspInit+0x64>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ba:	4a12      	ldr	r2, [pc, #72]	@ (8003404 <HAL_TIM_Base_MspInit+0x64>)
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033c2:	4b10      	ldr	r3, [pc, #64]	@ (8003404 <HAL_TIM_Base_MspInit+0x64>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80033ce:	e012      	b.n	80033f6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM7)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a0c      	ldr	r2, [pc, #48]	@ (8003408 <HAL_TIM_Base_MspInit+0x68>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d10d      	bne.n	80033f6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	60bb      	str	r3, [r7, #8]
 80033de:	4b09      	ldr	r3, [pc, #36]	@ (8003404 <HAL_TIM_Base_MspInit+0x64>)
 80033e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e2:	4a08      	ldr	r2, [pc, #32]	@ (8003404 <HAL_TIM_Base_MspInit+0x64>)
 80033e4:	f043 0320 	orr.w	r3, r3, #32
 80033e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80033ea:	4b06      	ldr	r3, [pc, #24]	@ (8003404 <HAL_TIM_Base_MspInit+0x64>)
 80033ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ee:	f003 0320 	and.w	r3, r3, #32
 80033f2:	60bb      	str	r3, [r7, #8]
 80033f4:	68bb      	ldr	r3, [r7, #8]
}
 80033f6:	bf00      	nop
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40023800 	.word	0x40023800
 8003408:	40001400 	.word	0x40001400

0800340c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b088      	sub	sp, #32
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003414:	f107 030c 	add.w	r3, r7, #12
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	605a      	str	r2, [r3, #4]
 800341e:	609a      	str	r2, [r3, #8]
 8003420:	60da      	str	r2, [r3, #12]
 8003422:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800342c:	d11d      	bne.n	800346a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800342e:	2300      	movs	r3, #0
 8003430:	60bb      	str	r3, [r7, #8]
 8003432:	4b10      	ldr	r3, [pc, #64]	@ (8003474 <HAL_TIM_MspPostInit+0x68>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003436:	4a0f      	ldr	r2, [pc, #60]	@ (8003474 <HAL_TIM_MspPostInit+0x68>)
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	6313      	str	r3, [r2, #48]	@ 0x30
 800343e:	4b0d      	ldr	r3, [pc, #52]	@ (8003474 <HAL_TIM_MspPostInit+0x68>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	60bb      	str	r3, [r7, #8]
 8003448:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800344a:	2320      	movs	r3, #32
 800344c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344e:	2302      	movs	r3, #2
 8003450:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003452:	2300      	movs	r3, #0
 8003454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003456:	2300      	movs	r3, #0
 8003458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800345a:	2301      	movs	r3, #1
 800345c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800345e:	f107 030c 	add.w	r3, r7, #12
 8003462:	4619      	mov	r1, r3
 8003464:	4804      	ldr	r0, [pc, #16]	@ (8003478 <HAL_TIM_MspPostInit+0x6c>)
 8003466:	f001 f8db 	bl	8004620 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800346a:	bf00      	nop
 800346c:	3720      	adds	r7, #32
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40023800 	.word	0x40023800
 8003478:	40020000 	.word	0x40020000

0800347c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003480:	bf00      	nop
 8003482:	e7fd      	b.n	8003480 <NMI_Handler+0x4>

08003484 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003488:	bf00      	nop
 800348a:	e7fd      	b.n	8003488 <HardFault_Handler+0x4>

0800348c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003490:	bf00      	nop
 8003492:	e7fd      	b.n	8003490 <MemManage_Handler+0x4>

08003494 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003498:	bf00      	nop
 800349a:	e7fd      	b.n	8003498 <BusFault_Handler+0x4>

0800349c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034a0:	bf00      	nop
 80034a2:	e7fd      	b.n	80034a0 <UsageFault_Handler+0x4>

080034a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034a8:	bf00      	nop
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034b2:	b480      	push	{r7}
 80034b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034b6:	bf00      	nop
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034c4:	bf00      	nop
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034d2:	f000 ff4f 	bl	8004374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034d6:	bf00      	nop
 80034d8:	bd80      	pop	{r7, pc}

080034da <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80034de:	2008      	movs	r0, #8
 80034e0:	f001 fa86 	bl	80049f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80034e4:	bf00      	nop
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80034ec:	2010      	movs	r0, #16
 80034ee:	f001 fa7f 	bl	80049f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80034f2:	bf00      	nop
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80034fa:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80034fe:	f001 fa77 	bl	80049f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003502:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003506:	f001 fa73 	bl	80049f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800350a:	bf00      	nop
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003514:	4802      	ldr	r0, [pc, #8]	@ (8003520 <TIM7_IRQHandler+0x10>)
 8003516:	f002 f939 	bl	800578c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800351a:	bf00      	nop
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	200000d4 	.word	0x200000d4

08003524 <Stopwatch_basic_operation>:
#include "variables.h"
#include "7SEG.h"
#include "CLCD.h"


void Stopwatch_basic_operation() {
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0

}
 8003528:	bf00      	nop
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
	...

08003534 <Stopwatch_display_operation>:

void Stopwatch_display_operation() {
 8003534:	b5b0      	push	{r4, r5, r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af04      	add	r7, sp, #16
	sprintf(str, "%4s%02d:%02d:%02d.%03d", "STW ",
			(int) (stopwatch_time / 1000) / 3600,
 800353a:	4b5e      	ldr	r3, [pc, #376]	@ (80036b4 <Stopwatch_display_operation+0x180>)
 800353c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003540:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003544:	f04f 0300 	mov.w	r3, #0
 8003548:	f7fc fe92 	bl	8000270 <__aeabi_uldivmod>
 800354c:	4602      	mov	r2, r0
 800354e:	460b      	mov	r3, r1
 8003550:	4613      	mov	r3, r2
	sprintf(str, "%4s%02d:%02d:%02d.%03d", "STW ",
 8003552:	4a59      	ldr	r2, [pc, #356]	@ (80036b8 <Stopwatch_display_operation+0x184>)
 8003554:	fb82 1203 	smull	r1, r2, r2, r3
 8003558:	441a      	add	r2, r3
 800355a:	12d2      	asrs	r2, r2, #11
 800355c:	17db      	asrs	r3, r3, #31
 800355e:	1ad5      	subs	r5, r2, r3
			(int) ((stopwatch_time / 1000) / 60) % 60,
 8003560:	4b54      	ldr	r3, [pc, #336]	@ (80036b4 <Stopwatch_display_operation+0x180>)
 8003562:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003566:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800356a:	f04f 0300 	mov.w	r3, #0
 800356e:	f7fc fe7f 	bl	8000270 <__aeabi_uldivmod>
 8003572:	4602      	mov	r2, r0
 8003574:	460b      	mov	r3, r1
	sprintf(str, "%4s%02d:%02d:%02d.%03d", "STW ",
 8003576:	4b51      	ldr	r3, [pc, #324]	@ (80036bc <Stopwatch_display_operation+0x188>)
 8003578:	fb83 1302 	smull	r1, r3, r3, r2
 800357c:	4413      	add	r3, r2
 800357e:	1159      	asrs	r1, r3, #5
 8003580:	17d3      	asrs	r3, r2, #31
 8003582:	1acc      	subs	r4, r1, r3
 8003584:	4623      	mov	r3, r4
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	1b1b      	subs	r3, r3, r4
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	1ad4      	subs	r4, r2, r3
			(int) (stopwatch_time / 1000) % 60, (int) stopwatch_time % 1000);
 800358e:	4b49      	ldr	r3, [pc, #292]	@ (80036b4 <Stopwatch_display_operation+0x180>)
 8003590:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003594:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003598:	f04f 0300 	mov.w	r3, #0
 800359c:	f7fc fe68 	bl	8000270 <__aeabi_uldivmod>
 80035a0:	4602      	mov	r2, r0
 80035a2:	460b      	mov	r3, r1
 80035a4:	4611      	mov	r1, r2
	sprintf(str, "%4s%02d:%02d:%02d.%03d", "STW ",
 80035a6:	4b45      	ldr	r3, [pc, #276]	@ (80036bc <Stopwatch_display_operation+0x188>)
 80035a8:	fb83 2301 	smull	r2, r3, r3, r1
 80035ac:	440b      	add	r3, r1
 80035ae:	115a      	asrs	r2, r3, #5
 80035b0:	17cb      	asrs	r3, r1, #31
 80035b2:	1ad2      	subs	r2, r2, r3
 80035b4:	4613      	mov	r3, r2
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	1a9b      	subs	r3, r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	1aca      	subs	r2, r1, r3
			(int) (stopwatch_time / 1000) % 60, (int) stopwatch_time % 1000);
 80035be:	4b3d      	ldr	r3, [pc, #244]	@ (80036b4 <Stopwatch_display_operation+0x180>)
 80035c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035c4:	4601      	mov	r1, r0
	sprintf(str, "%4s%02d:%02d:%02d.%03d", "STW ",
 80035c6:	4b3e      	ldr	r3, [pc, #248]	@ (80036c0 <Stopwatch_display_operation+0x18c>)
 80035c8:	fb83 0301 	smull	r0, r3, r3, r1
 80035cc:	1198      	asrs	r0, r3, #6
 80035ce:	17cb      	asrs	r3, r1, #31
 80035d0:	1ac3      	subs	r3, r0, r3
 80035d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80035d6:	fb00 f303 	mul.w	r3, r0, r3
 80035da:	1acb      	subs	r3, r1, r3
 80035dc:	9302      	str	r3, [sp, #8]
 80035de:	9201      	str	r2, [sp, #4]
 80035e0:	9400      	str	r4, [sp, #0]
 80035e2:	462b      	mov	r3, r5
 80035e4:	4a37      	ldr	r2, [pc, #220]	@ (80036c4 <Stopwatch_display_operation+0x190>)
 80035e6:	4938      	ldr	r1, [pc, #224]	@ (80036c8 <Stopwatch_display_operation+0x194>)
 80035e8:	4838      	ldr	r0, [pc, #224]	@ (80036cc <Stopwatch_display_operation+0x198>)
 80035ea:	f002 ff1d 	bl	8006428 <siprintf>
	CLCD_Puts(0, 0, str);
 80035ee:	4a37      	ldr	r2, [pc, #220]	@ (80036cc <Stopwatch_display_operation+0x198>)
 80035f0:	2100      	movs	r1, #0
 80035f2:	2000      	movs	r0, #0
 80035f4:	f7fd fe80 	bl	80012f8 <CLCD_Puts>

	//0.1, 0.01초 단위 7SEG 출력
	if (stopwatch_time % 1000 / 100 > 4) { // 0.5초간 7SEG 깜박임
 80035f8:	4b2e      	ldr	r3, [pc, #184]	@ (80036b4 <Stopwatch_display_operation+0x180>)
 80035fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003602:	f04f 0300 	mov.w	r3, #0
 8003606:	f7fc fe33 	bl	8000270 <__aeabi_uldivmod>
 800360a:	f5b2 7ffa 	cmp.w	r2, #500	@ 0x1f4
 800360e:	f173 0300 	sbcs.w	r3, r3, #0
 8003612:	d319      	bcc.n	8003648 <Stopwatch_display_operation+0x114>
		_7SEG_SetNumber(DGT1, stopwatch_time / 1000 % 10, OFF);
 8003614:	4b27      	ldr	r3, [pc, #156]	@ (80036b4 <Stopwatch_display_operation+0x180>)
 8003616:	e9d3 0100 	ldrd	r0, r1, [r3]
 800361a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800361e:	f04f 0300 	mov.w	r3, #0
 8003622:	f7fc fe25 	bl	8000270 <__aeabi_uldivmod>
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	4610      	mov	r0, r2
 800362c:	4619      	mov	r1, r3
 800362e:	f04f 020a 	mov.w	r2, #10
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	f7fc fe1b 	bl	8000270 <__aeabi_uldivmod>
 800363a:	4613      	mov	r3, r2
 800363c:	2200      	movs	r2, #0
 800363e:	4619      	mov	r1, r3
 8003640:	2000      	movs	r0, #0
 8003642:	f7fd f873 	bl	800072c <_7SEG_SetNumber>
 8003646:	e018      	b.n	800367a <Stopwatch_display_operation+0x146>
	} else {
		_7SEG_SetNumber(DGT1, stopwatch_time / 1000 % 10, ON);
 8003648:	4b1a      	ldr	r3, [pc, #104]	@ (80036b4 <Stopwatch_display_operation+0x180>)
 800364a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800364e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003652:	f04f 0300 	mov.w	r3, #0
 8003656:	f7fc fe0b 	bl	8000270 <__aeabi_uldivmod>
 800365a:	4602      	mov	r2, r0
 800365c:	460b      	mov	r3, r1
 800365e:	4610      	mov	r0, r2
 8003660:	4619      	mov	r1, r3
 8003662:	f04f 020a 	mov.w	r2, #10
 8003666:	f04f 0300 	mov.w	r3, #0
 800366a:	f7fc fe01 	bl	8000270 <__aeabi_uldivmod>
 800366e:	4613      	mov	r3, r2
 8003670:	2201      	movs	r2, #1
 8003672:	4619      	mov	r1, r3
 8003674:	2000      	movs	r0, #0
 8003676:	f7fd f859 	bl	800072c <_7SEG_SetNumber>
	}
	_7SEG_SetNumber(DGT2, stopwatch_time % 1000 / 100, OFF);
 800367a:	4b0e      	ldr	r3, [pc, #56]	@ (80036b4 <Stopwatch_display_operation+0x180>)
 800367c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003680:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	f7fc fdf2 	bl	8000270 <__aeabi_uldivmod>
 800368c:	4610      	mov	r0, r2
 800368e:	4619      	mov	r1, r3
 8003690:	f04f 0264 	mov.w	r2, #100	@ 0x64
 8003694:	f04f 0300 	mov.w	r3, #0
 8003698:	f7fc fdea 	bl	8000270 <__aeabi_uldivmod>
 800369c:	4602      	mov	r2, r0
 800369e:	460b      	mov	r3, r1
 80036a0:	4613      	mov	r3, r2
 80036a2:	2200      	movs	r2, #0
 80036a4:	4619      	mov	r1, r3
 80036a6:	2001      	movs	r0, #1
 80036a8:	f7fd f840 	bl	800072c <_7SEG_SetNumber>
}
 80036ac:	bf00      	nop
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bdb0      	pop	{r4, r5, r7, pc}
 80036b2:	bf00      	nop
 80036b4:	20000170 	.word	0x20000170
 80036b8:	91a2b3c5 	.word	0x91a2b3c5
 80036bc:	88888889 	.word	0x88888889
 80036c0:	10624dd3 	.word	0x10624dd3
 80036c4:	08006e8c 	.word	0x08006e8c
 80036c8:	08006e94 	.word	0x08006e94
 80036cc:	20000138 	.word	0x20000138

080036d0 <Stopwatch_button_operation>:

void Stopwatch_button_operation() {
 80036d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036d4:	b084      	sub	sp, #16
 80036d6:	af04      	add	r7, sp, #16
	if (sw2_released == true) {
 80036d8:	4bb8      	ldr	r3, [pc, #736]	@ (80039bc <Stopwatch_button_operation+0x2ec>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d01f      	beq.n	8003720 <Stopwatch_button_operation+0x50>
		if (lap_time_index == 0) {
 80036e0:	4bb7      	ldr	r3, [pc, #732]	@ (80039c0 <Stopwatch_button_operation+0x2f0>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d109      	bne.n	80036fc <Stopwatch_button_operation+0x2c>
			sprintf(str, "%16s", ""); // 스톱워치 시간 1ms 단위 LCD 출력
 80036e8:	4ab6      	ldr	r2, [pc, #728]	@ (80039c4 <Stopwatch_button_operation+0x2f4>)
 80036ea:	49b7      	ldr	r1, [pc, #732]	@ (80039c8 <Stopwatch_button_operation+0x2f8>)
 80036ec:	48b7      	ldr	r0, [pc, #732]	@ (80039cc <Stopwatch_button_operation+0x2fc>)
 80036ee:	f002 fe9b 	bl	8006428 <siprintf>
			CLCD_Puts(0, 1, str);
 80036f2:	4ab6      	ldr	r2, [pc, #728]	@ (80039cc <Stopwatch_button_operation+0x2fc>)
 80036f4:	2101      	movs	r1, #1
 80036f6:	2000      	movs	r0, #0
 80036f8:	f7fd fdfe 	bl	80012f8 <CLCD_Puts>
		}
		stopwatch_running = !stopwatch_running;
 80036fc:	4bb4      	ldr	r3, [pc, #720]	@ (80039d0 <Stopwatch_button_operation+0x300>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	bf14      	ite	ne
 8003704:	2301      	movne	r3, #1
 8003706:	2300      	moveq	r3, #0
 8003708:	b2db      	uxtb	r3, r3
 800370a:	f083 0301 	eor.w	r3, r3, #1
 800370e:	b2db      	uxtb	r3, r3
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	b2da      	uxtb	r2, r3
 8003716:	4bae      	ldr	r3, [pc, #696]	@ (80039d0 <Stopwatch_button_operation+0x300>)
 8003718:	701a      	strb	r2, [r3, #0]
		sw2_released = false;
 800371a:	4ba8      	ldr	r3, [pc, #672]	@ (80039bc <Stopwatch_button_operation+0x2ec>)
 800371c:	2200      	movs	r2, #0
 800371e:	701a      	strb	r2, [r3, #0]
	}

	if (stopwatch_running == false && sw3_pressed == true) {
 8003720:	4bab      	ldr	r3, [pc, #684]	@ (80039d0 <Stopwatch_button_operation+0x300>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	f083 0301 	eor.w	r3, r3, #1
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d01b      	beq.n	8003766 <Stopwatch_button_operation+0x96>
 800372e:	4ba9      	ldr	r3, [pc, #676]	@ (80039d4 <Stopwatch_button_operation+0x304>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d017      	beq.n	8003766 <Stopwatch_button_operation+0x96>
		stopwatch_time = 0;
 8003736:	49a8      	ldr	r1, [pc, #672]	@ (80039d8 <Stopwatch_button_operation+0x308>)
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	e9c1 2300 	strd	r2, r3, [r1]
		lap_time_index = 0;
 8003744:	4b9e      	ldr	r3, [pc, #632]	@ (80039c0 <Stopwatch_button_operation+0x2f0>)
 8003746:	2200      	movs	r2, #0
 8003748:	701a      	strb	r2, [r3, #0]
		sprintf(str, "%16s", ""); // 스톱워치 시간 1ms 단위 LCD 출력
 800374a:	4a9e      	ldr	r2, [pc, #632]	@ (80039c4 <Stopwatch_button_operation+0x2f4>)
 800374c:	499e      	ldr	r1, [pc, #632]	@ (80039c8 <Stopwatch_button_operation+0x2f8>)
 800374e:	489f      	ldr	r0, [pc, #636]	@ (80039cc <Stopwatch_button_operation+0x2fc>)
 8003750:	f002 fe6a 	bl	8006428 <siprintf>
		CLCD_Puts(0, 1, str);
 8003754:	4a9d      	ldr	r2, [pc, #628]	@ (80039cc <Stopwatch_button_operation+0x2fc>)
 8003756:	2101      	movs	r1, #1
 8003758:	2000      	movs	r0, #0
 800375a:	f7fd fdcd 	bl	80012f8 <CLCD_Puts>
		sw3_pressed = false;
 800375e:	4b9d      	ldr	r3, [pc, #628]	@ (80039d4 <Stopwatch_button_operation+0x304>)
 8003760:	2200      	movs	r2, #0
 8003762:	701a      	strb	r2, [r3, #0]
 8003764:	e091      	b.n	800388a <Stopwatch_button_operation+0x1ba>
	}

	else if (stopwatch_running == true && sw3_pressed == true) {
 8003766:	4b9a      	ldr	r3, [pc, #616]	@ (80039d0 <Stopwatch_button_operation+0x300>)
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 808d 	beq.w	800388a <Stopwatch_button_operation+0x1ba>
 8003770:	4b98      	ldr	r3, [pc, #608]	@ (80039d4 <Stopwatch_button_operation+0x304>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 8088 	beq.w	800388a <Stopwatch_button_operation+0x1ba>
		lap_time_click = 0;
 800377a:	4b98      	ldr	r3, [pc, #608]	@ (80039dc <Stopwatch_button_operation+0x30c>)
 800377c:	2200      	movs	r2, #0
 800377e:	701a      	strb	r2, [r3, #0]

		if (lap_time_index < 9) {
 8003780:	4b8f      	ldr	r3, [pc, #572]	@ (80039c0 <Stopwatch_button_operation+0x2f0>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b08      	cmp	r3, #8
 8003786:	d873      	bhi.n	8003870 <Stopwatch_button_operation+0x1a0>
			lap_time_index++;
 8003788:	4b8d      	ldr	r3, [pc, #564]	@ (80039c0 <Stopwatch_button_operation+0x2f0>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	3301      	adds	r3, #1
 800378e:	b2da      	uxtb	r2, r3
 8003790:	4b8b      	ldr	r3, [pc, #556]	@ (80039c0 <Stopwatch_button_operation+0x2f0>)
 8003792:	701a      	strb	r2, [r3, #0]
			lap_time[lap_time_index] = stopwatch_time;
 8003794:	4b8a      	ldr	r3, [pc, #552]	@ (80039c0 <Stopwatch_button_operation+0x2f0>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	4619      	mov	r1, r3
 800379a:	4b8f      	ldr	r3, [pc, #572]	@ (80039d8 <Stopwatch_button_operation+0x308>)
 800379c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a0:	488f      	ldr	r0, [pc, #572]	@ (80039e0 <Stopwatch_button_operation+0x310>)
 80037a2:	00c9      	lsls	r1, r1, #3
 80037a4:	4401      	add	r1, r0
 80037a6:	e9c1 2300 	strd	r2, r3, [r1]
			sprintf(str, "LP%d %02d:%02d:%02d.%03d", lap_time_index,
 80037aa:	4b85      	ldr	r3, [pc, #532]	@ (80039c0 <Stopwatch_button_operation+0x2f0>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	461e      	mov	r6, r3
					(int) (stopwatch_time / 1000) / 3600,
 80037b0:	4b89      	ldr	r3, [pc, #548]	@ (80039d8 <Stopwatch_button_operation+0x308>)
 80037b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80037ba:	f04f 0300 	mov.w	r3, #0
 80037be:	f7fc fd57 	bl	8000270 <__aeabi_uldivmod>
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	4613      	mov	r3, r2
			sprintf(str, "LP%d %02d:%02d:%02d.%03d", lap_time_index,
 80037c8:	4a86      	ldr	r2, [pc, #536]	@ (80039e4 <Stopwatch_button_operation+0x314>)
 80037ca:	fb82 1203 	smull	r1, r2, r2, r3
 80037ce:	441a      	add	r2, r3
 80037d0:	12d2      	asrs	r2, r2, #11
 80037d2:	17db      	asrs	r3, r3, #31
 80037d4:	1ad5      	subs	r5, r2, r3
					(int) ((stopwatch_time / 1000) / 60) % 60,
 80037d6:	4b80      	ldr	r3, [pc, #512]	@ (80039d8 <Stopwatch_button_operation+0x308>)
 80037d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037dc:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80037e0:	f04f 0300 	mov.w	r3, #0
 80037e4:	f7fc fd44 	bl	8000270 <__aeabi_uldivmod>
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
			sprintf(str, "LP%d %02d:%02d:%02d.%03d", lap_time_index,
 80037ec:	4b7e      	ldr	r3, [pc, #504]	@ (80039e8 <Stopwatch_button_operation+0x318>)
 80037ee:	fb83 1302 	smull	r1, r3, r3, r2
 80037f2:	4413      	add	r3, r2
 80037f4:	1159      	asrs	r1, r3, #5
 80037f6:	17d3      	asrs	r3, r2, #31
 80037f8:	1acc      	subs	r4, r1, r3
 80037fa:	4623      	mov	r3, r4
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	1b1b      	subs	r3, r3, r4
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	1ad4      	subs	r4, r2, r3
					(int) (stopwatch_time / 1000) % 60,
 8003804:	4b74      	ldr	r3, [pc, #464]	@ (80039d8 <Stopwatch_button_operation+0x308>)
 8003806:	e9d3 0100 	ldrd	r0, r1, [r3]
 800380a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800380e:	f04f 0300 	mov.w	r3, #0
 8003812:	f7fc fd2d 	bl	8000270 <__aeabi_uldivmod>
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	4611      	mov	r1, r2
			sprintf(str, "LP%d %02d:%02d:%02d.%03d", lap_time_index,
 800381c:	4b72      	ldr	r3, [pc, #456]	@ (80039e8 <Stopwatch_button_operation+0x318>)
 800381e:	fb83 2301 	smull	r2, r3, r3, r1
 8003822:	440b      	add	r3, r1
 8003824:	115a      	asrs	r2, r3, #5
 8003826:	17cb      	asrs	r3, r1, #31
 8003828:	1ad2      	subs	r2, r2, r3
 800382a:	4613      	mov	r3, r2
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	1a9b      	subs	r3, r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	1aca      	subs	r2, r1, r3
					(int) stopwatch_time % 1000);
 8003834:	4b68      	ldr	r3, [pc, #416]	@ (80039d8 <Stopwatch_button_operation+0x308>)
 8003836:	e9d3 0100 	ldrd	r0, r1, [r3]
 800383a:	4601      	mov	r1, r0
			sprintf(str, "LP%d %02d:%02d:%02d.%03d", lap_time_index,
 800383c:	4b6b      	ldr	r3, [pc, #428]	@ (80039ec <Stopwatch_button_operation+0x31c>)
 800383e:	fb83 0301 	smull	r0, r3, r3, r1
 8003842:	1198      	asrs	r0, r3, #6
 8003844:	17cb      	asrs	r3, r1, #31
 8003846:	1ac3      	subs	r3, r0, r3
 8003848:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800384c:	fb00 f303 	mul.w	r3, r0, r3
 8003850:	1acb      	subs	r3, r1, r3
 8003852:	9302      	str	r3, [sp, #8]
 8003854:	9201      	str	r2, [sp, #4]
 8003856:	9400      	str	r4, [sp, #0]
 8003858:	462b      	mov	r3, r5
 800385a:	4632      	mov	r2, r6
 800385c:	4964      	ldr	r1, [pc, #400]	@ (80039f0 <Stopwatch_button_operation+0x320>)
 800385e:	485b      	ldr	r0, [pc, #364]	@ (80039cc <Stopwatch_button_operation+0x2fc>)
 8003860:	f002 fde2 	bl	8006428 <siprintf>
			CLCD_Puts(0, 1, str);
 8003864:	4a59      	ldr	r2, [pc, #356]	@ (80039cc <Stopwatch_button_operation+0x2fc>)
 8003866:	2101      	movs	r1, #1
 8003868:	2000      	movs	r0, #0
 800386a:	f7fd fd45 	bl	80012f8 <CLCD_Puts>
 800386e:	e009      	b.n	8003884 <Stopwatch_button_operation+0x1b4>

		}

		else {
			sprintf(str, "%16s", "LAP FULL(9/9)   "); // 스톱워치 시간 1ms 단위 LCD 출력
 8003870:	4a60      	ldr	r2, [pc, #384]	@ (80039f4 <Stopwatch_button_operation+0x324>)
 8003872:	4955      	ldr	r1, [pc, #340]	@ (80039c8 <Stopwatch_button_operation+0x2f8>)
 8003874:	4855      	ldr	r0, [pc, #340]	@ (80039cc <Stopwatch_button_operation+0x2fc>)
 8003876:	f002 fdd7 	bl	8006428 <siprintf>
			CLCD_Puts(0, 1, str);
 800387a:	4a54      	ldr	r2, [pc, #336]	@ (80039cc <Stopwatch_button_operation+0x2fc>)
 800387c:	2101      	movs	r1, #1
 800387e:	2000      	movs	r0, #0
 8003880:	f7fd fd3a 	bl	80012f8 <CLCD_Puts>
		}
		sw3_pressed = false;
 8003884:	4b53      	ldr	r3, [pc, #332]	@ (80039d4 <Stopwatch_button_operation+0x304>)
 8003886:	2200      	movs	r2, #0
 8003888:	701a      	strb	r2, [r3, #0]
	}

	if (lap_time_index != 0 && sw4_released == true) {
 800388a:	4b4d      	ldr	r3, [pc, #308]	@ (80039c0 <Stopwatch_button_operation+0x2f0>)
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 80b6 	beq.w	8003a00 <Stopwatch_button_operation+0x330>
 8003894:	4b58      	ldr	r3, [pc, #352]	@ (80039f8 <Stopwatch_button_operation+0x328>)
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 80b1 	beq.w	8003a00 <Stopwatch_button_operation+0x330>
		lap_time_click++;
 800389e:	4b4f      	ldr	r3, [pc, #316]	@ (80039dc <Stopwatch_button_operation+0x30c>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	3301      	adds	r3, #1
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	4b4d      	ldr	r3, [pc, #308]	@ (80039dc <Stopwatch_button_operation+0x30c>)
 80038a8:	701a      	strb	r2, [r3, #0]
		if (lap_time_click <= lap_time_index) {
 80038aa:	4b4c      	ldr	r3, [pc, #304]	@ (80039dc <Stopwatch_button_operation+0x30c>)
 80038ac:	781a      	ldrb	r2, [r3, #0]
 80038ae:	4b44      	ldr	r3, [pc, #272]	@ (80039c0 <Stopwatch_button_operation+0x2f0>)
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d87e      	bhi.n	80039b4 <Stopwatch_button_operation+0x2e4>
			sprintf(str, "%1d/%1d %02d:%02d:%02d.%03d", lap_time_click,
 80038b6:	4b49      	ldr	r3, [pc, #292]	@ (80039dc <Stopwatch_button_operation+0x30c>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	461e      	mov	r6, r3
 80038bc:	4b40      	ldr	r3, [pc, #256]	@ (80039c0 <Stopwatch_button_operation+0x2f0>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	4698      	mov	r8, r3
					lap_time_index,
					(int) (lap_time[lap_time_click] / 1000) / 3600,
 80038c2:	4b46      	ldr	r3, [pc, #280]	@ (80039dc <Stopwatch_button_operation+0x30c>)
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	4a46      	ldr	r2, [pc, #280]	@ (80039e0 <Stopwatch_button_operation+0x310>)
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	4413      	add	r3, r2
 80038cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038d0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80038d4:	f04f 0300 	mov.w	r3, #0
 80038d8:	f7fc fcca 	bl	8000270 <__aeabi_uldivmod>
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	4613      	mov	r3, r2
			sprintf(str, "%1d/%1d %02d:%02d:%02d.%03d", lap_time_click,
 80038e2:	4a40      	ldr	r2, [pc, #256]	@ (80039e4 <Stopwatch_button_operation+0x314>)
 80038e4:	fb82 1203 	smull	r1, r2, r2, r3
 80038e8:	441a      	add	r2, r3
 80038ea:	12d2      	asrs	r2, r2, #11
 80038ec:	17db      	asrs	r3, r3, #31
 80038ee:	1ad5      	subs	r5, r2, r3
					(int) ((lap_time[lap_time_click] / 1000) / 60) % 60,
 80038f0:	4b3a      	ldr	r3, [pc, #232]	@ (80039dc <Stopwatch_button_operation+0x30c>)
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	4a3a      	ldr	r2, [pc, #232]	@ (80039e0 <Stopwatch_button_operation+0x310>)
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	4413      	add	r3, r2
 80038fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038fe:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8003902:	f04f 0300 	mov.w	r3, #0
 8003906:	f7fc fcb3 	bl	8000270 <__aeabi_uldivmod>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
			sprintf(str, "%1d/%1d %02d:%02d:%02d.%03d", lap_time_click,
 800390e:	4b36      	ldr	r3, [pc, #216]	@ (80039e8 <Stopwatch_button_operation+0x318>)
 8003910:	fb83 1302 	smull	r1, r3, r3, r2
 8003914:	4413      	add	r3, r2
 8003916:	1159      	asrs	r1, r3, #5
 8003918:	17d3      	asrs	r3, r2, #31
 800391a:	1acc      	subs	r4, r1, r3
 800391c:	4623      	mov	r3, r4
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	1b1b      	subs	r3, r3, r4
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	1ad4      	subs	r4, r2, r3
					(int) (lap_time[lap_time_click] / 1000) % 60,
 8003926:	4b2d      	ldr	r3, [pc, #180]	@ (80039dc <Stopwatch_button_operation+0x30c>)
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	4a2d      	ldr	r2, [pc, #180]	@ (80039e0 <Stopwatch_button_operation+0x310>)
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	4413      	add	r3, r2
 8003930:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003934:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003938:	f04f 0300 	mov.w	r3, #0
 800393c:	f7fc fc98 	bl	8000270 <__aeabi_uldivmod>
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	4611      	mov	r1, r2
			sprintf(str, "%1d/%1d %02d:%02d:%02d.%03d", lap_time_click,
 8003946:	4b28      	ldr	r3, [pc, #160]	@ (80039e8 <Stopwatch_button_operation+0x318>)
 8003948:	fb83 2301 	smull	r2, r3, r3, r1
 800394c:	440b      	add	r3, r1
 800394e:	115a      	asrs	r2, r3, #5
 8003950:	17cb      	asrs	r3, r1, #31
 8003952:	1ad2      	subs	r2, r2, r3
 8003954:	4613      	mov	r3, r2
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	1a9b      	subs	r3, r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	1aca      	subs	r2, r1, r3
					(int) lap_time[lap_time_click] % 1000);
 800395e:	4b1f      	ldr	r3, [pc, #124]	@ (80039dc <Stopwatch_button_operation+0x30c>)
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	491f      	ldr	r1, [pc, #124]	@ (80039e0 <Stopwatch_button_operation+0x310>)
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	440b      	add	r3, r1
 8003968:	e9d3 0100 	ldrd	r0, r1, [r3]
 800396c:	4601      	mov	r1, r0
			sprintf(str, "%1d/%1d %02d:%02d:%02d.%03d", lap_time_click,
 800396e:	4b1f      	ldr	r3, [pc, #124]	@ (80039ec <Stopwatch_button_operation+0x31c>)
 8003970:	fb83 0301 	smull	r0, r3, r3, r1
 8003974:	1198      	asrs	r0, r3, #6
 8003976:	17cb      	asrs	r3, r1, #31
 8003978:	1ac3      	subs	r3, r0, r3
 800397a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800397e:	fb00 f303 	mul.w	r3, r0, r3
 8003982:	1acb      	subs	r3, r1, r3
 8003984:	9303      	str	r3, [sp, #12]
 8003986:	9202      	str	r2, [sp, #8]
 8003988:	9401      	str	r4, [sp, #4]
 800398a:	9500      	str	r5, [sp, #0]
 800398c:	4643      	mov	r3, r8
 800398e:	4632      	mov	r2, r6
 8003990:	491a      	ldr	r1, [pc, #104]	@ (80039fc <Stopwatch_button_operation+0x32c>)
 8003992:	480e      	ldr	r0, [pc, #56]	@ (80039cc <Stopwatch_button_operation+0x2fc>)
 8003994:	f002 fd48 	bl	8006428 <siprintf>
			CLCD_Puts(0, 1, str);
 8003998:	4a0c      	ldr	r2, [pc, #48]	@ (80039cc <Stopwatch_button_operation+0x2fc>)
 800399a:	2101      	movs	r1, #1
 800399c:	2000      	movs	r0, #0
 800399e:	f7fd fcab 	bl	80012f8 <CLCD_Puts>
			if (lap_time_click == lap_time_index) {
 80039a2:	4b0e      	ldr	r3, [pc, #56]	@ (80039dc <Stopwatch_button_operation+0x30c>)
 80039a4:	781a      	ldrb	r2, [r3, #0]
 80039a6:	4b06      	ldr	r3, [pc, #24]	@ (80039c0 <Stopwatch_button_operation+0x2f0>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d102      	bne.n	80039b4 <Stopwatch_button_operation+0x2e4>
				lap_time_click = 0;
 80039ae:	4b0b      	ldr	r3, [pc, #44]	@ (80039dc <Stopwatch_button_operation+0x30c>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	701a      	strb	r2, [r3, #0]
			}
		}
		sw4_released = false;
 80039b4:	4b10      	ldr	r3, [pc, #64]	@ (80039f8 <Stopwatch_button_operation+0x328>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	701a      	strb	r2, [r3, #0]
		sprintf(str, "%16s", "NO LAP          "); // 스톱워치 시간 1ms 단위 LCD 출력
		CLCD_Puts(0, 1, str);
		sw4_released = false;
	}

}
 80039ba:	e036      	b.n	8003a2a <Stopwatch_button_operation+0x35a>
 80039bc:	20000125 	.word	0x20000125
 80039c0:	200001c8 	.word	0x200001c8
 80039c4:	08006eac 	.word	0x08006eac
 80039c8:	08006eb0 	.word	0x08006eb0
 80039cc:	20000138 	.word	0x20000138
 80039d0:	200001ca 	.word	0x200001ca
 80039d4:	20000127 	.word	0x20000127
 80039d8:	20000170 	.word	0x20000170
 80039dc:	200001c9 	.word	0x200001c9
 80039e0:	20000178 	.word	0x20000178
 80039e4:	91a2b3c5 	.word	0x91a2b3c5
 80039e8:	88888889 	.word	0x88888889
 80039ec:	10624dd3 	.word	0x10624dd3
 80039f0:	08006eb8 	.word	0x08006eb8
 80039f4:	08006ed4 	.word	0x08006ed4
 80039f8:	20000128 	.word	0x20000128
 80039fc:	08006ee8 	.word	0x08006ee8
	else if (lap_time_index == 0 && sw4_released == true) {
 8003a00:	4b0c      	ldr	r3, [pc, #48]	@ (8003a34 <Stopwatch_button_operation+0x364>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d110      	bne.n	8003a2a <Stopwatch_button_operation+0x35a>
 8003a08:	4b0b      	ldr	r3, [pc, #44]	@ (8003a38 <Stopwatch_button_operation+0x368>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00c      	beq.n	8003a2a <Stopwatch_button_operation+0x35a>
		sprintf(str, "%16s", "NO LAP          "); // 스톱워치 시간 1ms 단위 LCD 출력
 8003a10:	4a0a      	ldr	r2, [pc, #40]	@ (8003a3c <Stopwatch_button_operation+0x36c>)
 8003a12:	490b      	ldr	r1, [pc, #44]	@ (8003a40 <Stopwatch_button_operation+0x370>)
 8003a14:	480b      	ldr	r0, [pc, #44]	@ (8003a44 <Stopwatch_button_operation+0x374>)
 8003a16:	f002 fd07 	bl	8006428 <siprintf>
		CLCD_Puts(0, 1, str);
 8003a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a44 <Stopwatch_button_operation+0x374>)
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	2000      	movs	r0, #0
 8003a20:	f7fd fc6a 	bl	80012f8 <CLCD_Puts>
		sw4_released = false;
 8003a24:	4b04      	ldr	r3, [pc, #16]	@ (8003a38 <Stopwatch_button_operation+0x368>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	701a      	strb	r2, [r3, #0]
}
 8003a2a:	bf00      	nop
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a32:	bf00      	nop
 8003a34:	200001c8 	.word	0x200001c8
 8003a38:	20000128 	.word	0x20000128
 8003a3c:	08006f04 	.word	0x08006f04
 8003a40:	08006eb0 	.word	0x08006eb0
 8003a44:	20000138 	.word	0x20000138

08003a48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a50:	4a14      	ldr	r2, [pc, #80]	@ (8003aa4 <_sbrk+0x5c>)
 8003a52:	4b15      	ldr	r3, [pc, #84]	@ (8003aa8 <_sbrk+0x60>)
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a5c:	4b13      	ldr	r3, [pc, #76]	@ (8003aac <_sbrk+0x64>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d102      	bne.n	8003a6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a64:	4b11      	ldr	r3, [pc, #68]	@ (8003aac <_sbrk+0x64>)
 8003a66:	4a12      	ldr	r2, [pc, #72]	@ (8003ab0 <_sbrk+0x68>)
 8003a68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a6a:	4b10      	ldr	r3, [pc, #64]	@ (8003aac <_sbrk+0x64>)
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4413      	add	r3, r2
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d207      	bcs.n	8003a88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a78:	f002 fcfe 	bl	8006478 <__errno>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	220c      	movs	r2, #12
 8003a80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a82:	f04f 33ff 	mov.w	r3, #4294967295
 8003a86:	e009      	b.n	8003a9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a88:	4b08      	ldr	r3, [pc, #32]	@ (8003aac <_sbrk+0x64>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a8e:	4b07      	ldr	r3, [pc, #28]	@ (8003aac <_sbrk+0x64>)
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4413      	add	r3, r2
 8003a96:	4a05      	ldr	r2, [pc, #20]	@ (8003aac <_sbrk+0x64>)
 8003a98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3718      	adds	r7, #24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	20020000 	.word	0x20020000
 8003aa8:	00000400 	.word	0x00000400
 8003aac:	2000011c 	.word	0x2000011c
 8003ab0:	20000330 	.word	0x20000330

08003ab4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ab8:	4b06      	ldr	r3, [pc, #24]	@ (8003ad4 <SystemInit+0x20>)
 8003aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003abe:	4a05      	ldr	r2, [pc, #20]	@ (8003ad4 <SystemInit+0x20>)
 8003ac0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003ac4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ac8:	bf00      	nop
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	e000ed00 	.word	0xe000ed00

08003ad8 <Timer_button_operation>:
#include "variables.h"
#include "7SEG.h"
#include "CLCD.h"


void Timer_button_operation() {
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
// Enter timer setting mode on long press of button 1 (sw1)
	if (sw1_released) {
 8003adc:	4b6b      	ldr	r3, [pc, #428]	@ (8003c8c <Timer_button_operation+0x1b4>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d01a      	beq.n	8003b1a <Timer_button_operation+0x42>
		if (Press_Mode >= PRESS_MID) {
 8003ae4:	4b6a      	ldr	r3, [pc, #424]	@ (8003c90 <Timer_button_operation+0x1b8>)
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d913      	bls.n	8003b14 <Timer_button_operation+0x3c>
			CLCD_Clear();
 8003aec:	f7fd fc4b 	bl	8001386 <CLCD_Clear>
			timer_setmode = !timer_setmode; // Toggle timer setting mode
 8003af0:	4b68      	ldr	r3, [pc, #416]	@ (8003c94 <Timer_button_operation+0x1bc>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	bf14      	ite	ne
 8003af8:	2301      	movne	r3, #1
 8003afa:	2300      	moveq	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	f083 0301 	eor.w	r3, r3, #1
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	4b62      	ldr	r3, [pc, #392]	@ (8003c94 <Timer_button_operation+0x1bc>)
 8003b0c:	701a      	strb	r2, [r3, #0]
			Press_Mode = PRESS_NOT;
 8003b0e:	4b60      	ldr	r3, [pc, #384]	@ (8003c90 <Timer_button_operation+0x1b8>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	701a      	strb	r2, [r3, #0]
		}
		sw1_released = false;
 8003b14:	4b5d      	ldr	r3, [pc, #372]	@ (8003c8c <Timer_button_operation+0x1b4>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	701a      	strb	r2, [r3, #0]
	}

// Setting mode adjustments
	if (timer_setmode) {
 8003b1a:	4b5e      	ldr	r3, [pc, #376]	@ (8003c94 <Timer_button_operation+0x1bc>)
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d074      	beq.n	8003c0c <Timer_button_operation+0x134>
		// Adjusting the timer settings using buttons (assuming sw2 to increase hours, sw3 to increase minutes, sw4 to increase seconds)
		if (sw2_released) {
 8003b22:	4b5d      	ldr	r3, [pc, #372]	@ (8003c98 <Timer_button_operation+0x1c0>)
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d004      	beq.n	8003b34 <Timer_button_operation+0x5c>
			updateTime3();
 8003b2a:	f000 f8c7 	bl	8003cbc <updateTime3>
			sw2_released = false;
 8003b2e:	4b5a      	ldr	r3, [pc, #360]	@ (8003c98 <Timer_button_operation+0x1c0>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	701a      	strb	r2, [r3, #0]
		}

		if (sw2 == true) {
 8003b34:	4b59      	ldr	r3, [pc, #356]	@ (8003c9c <Timer_button_operation+0x1c4>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d029      	beq.n	8003b90 <Timer_button_operation+0xb8>
			if (Press_Mode == PRESS_MID) {
 8003b3c:	4b54      	ldr	r3, [pc, #336]	@ (8003c90 <Timer_button_operation+0x1b8>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d111      	bne.n	8003b68 <Timer_button_operation+0x90>
				if (Run_Time >= 500) {
 8003b44:	4b56      	ldr	r3, [pc, #344]	@ (8003ca0 <Timer_button_operation+0x1c8>)
 8003b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4a:	f5b2 7ffa 	cmp.w	r2, #500	@ 0x1f4
 8003b4e:	f173 0300 	sbcs.w	r3, r3, #0
 8003b52:	d31d      	bcc.n	8003b90 <Timer_button_operation+0xb8>
					updateTime3();
 8003b54:	f000 f8b2 	bl	8003cbc <updateTime3>
					Run_Time = 0;
 8003b58:	4951      	ldr	r1, [pc, #324]	@ (8003ca0 <Timer_button_operation+0x1c8>)
 8003b5a:	f04f 0200 	mov.w	r2, #0
 8003b5e:	f04f 0300 	mov.w	r3, #0
 8003b62:	e9c1 2300 	strd	r2, r3, [r1]
 8003b66:	e013      	b.n	8003b90 <Timer_button_operation+0xb8>
				}
			} else if (Press_Mode == PRESS_LONG) {
 8003b68:	4b49      	ldr	r3, [pc, #292]	@ (8003c90 <Timer_button_operation+0x1b8>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b03      	cmp	r3, #3
 8003b6e:	d10f      	bne.n	8003b90 <Timer_button_operation+0xb8>
				if (Run_Time >= 200) {
 8003b70:	4b4b      	ldr	r3, [pc, #300]	@ (8003ca0 <Timer_button_operation+0x1c8>)
 8003b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b76:	2ac8      	cmp	r2, #200	@ 0xc8
 8003b78:	f173 0300 	sbcs.w	r3, r3, #0
 8003b7c:	d308      	bcc.n	8003b90 <Timer_button_operation+0xb8>
					updateTime3();
 8003b7e:	f000 f89d 	bl	8003cbc <updateTime3>
					Run_Time = 0;
 8003b82:	4947      	ldr	r1, [pc, #284]	@ (8003ca0 <Timer_button_operation+0x1c8>)
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	f04f 0300 	mov.w	r3, #0
 8003b8c:	e9c1 2300 	strd	r2, r3, [r1]
				}
			}
		}

		if (sw3_released) {
 8003b90:	4b44      	ldr	r3, [pc, #272]	@ (8003ca4 <Timer_button_operation+0x1cc>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d004      	beq.n	8003ba2 <Timer_button_operation+0xca>
			updateTime4();
 8003b98:	f000 f8cc 	bl	8003d34 <updateTime4>
			sw3_released = false;
 8003b9c:	4b41      	ldr	r3, [pc, #260]	@ (8003ca4 <Timer_button_operation+0x1cc>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	701a      	strb	r2, [r3, #0]
		}

		if (sw3 == true) {
 8003ba2:	4b41      	ldr	r3, [pc, #260]	@ (8003ca8 <Timer_button_operation+0x1d0>)
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d029      	beq.n	8003bfe <Timer_button_operation+0x126>
			if (Press_Mode == PRESS_MID) {
 8003baa:	4b39      	ldr	r3, [pc, #228]	@ (8003c90 <Timer_button_operation+0x1b8>)
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d111      	bne.n	8003bd6 <Timer_button_operation+0xfe>
				if (Run_Time >= 500) {
 8003bb2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ca0 <Timer_button_operation+0x1c8>)
 8003bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb8:	f5b2 7ffa 	cmp.w	r2, #500	@ 0x1f4
 8003bbc:	f173 0300 	sbcs.w	r3, r3, #0
 8003bc0:	d31d      	bcc.n	8003bfe <Timer_button_operation+0x126>
					updateTime4();
 8003bc2:	f000 f8b7 	bl	8003d34 <updateTime4>
					Run_Time = 0;
 8003bc6:	4936      	ldr	r1, [pc, #216]	@ (8003ca0 <Timer_button_operation+0x1c8>)
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	f04f 0300 	mov.w	r3, #0
 8003bd0:	e9c1 2300 	strd	r2, r3, [r1]
 8003bd4:	e013      	b.n	8003bfe <Timer_button_operation+0x126>
				}
			} else if (Press_Mode == PRESS_LONG) {
 8003bd6:	4b2e      	ldr	r3, [pc, #184]	@ (8003c90 <Timer_button_operation+0x1b8>)
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	2b03      	cmp	r3, #3
 8003bdc:	d10f      	bne.n	8003bfe <Timer_button_operation+0x126>
				if (Run_Time >= 200) {
 8003bde:	4b30      	ldr	r3, [pc, #192]	@ (8003ca0 <Timer_button_operation+0x1c8>)
 8003be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be4:	2ac8      	cmp	r2, #200	@ 0xc8
 8003be6:	f173 0300 	sbcs.w	r3, r3, #0
 8003bea:	d308      	bcc.n	8003bfe <Timer_button_operation+0x126>
					updateTime4();
 8003bec:	f000 f8a2 	bl	8003d34 <updateTime4>
					Run_Time = 0;
 8003bf0:	492b      	ldr	r1, [pc, #172]	@ (8003ca0 <Timer_button_operation+0x1c8>)
 8003bf2:	f04f 0200 	mov.w	r2, #0
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	e9c1 2300 	strd	r2, r3, [r1]
				}
			}
		}
		timer_time = timer_time_tmp;
 8003bfe:	4b2b      	ldr	r3, [pc, #172]	@ (8003cac <Timer_button_operation+0x1d4>)
 8003c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c04:	492a      	ldr	r1, [pc, #168]	@ (8003cb0 <Timer_button_operation+0x1d8>)
 8003c06:	e9c1 2300 	strd	r2, r3, [r1]
		if (sw4_released) {
			sw4_released = false;
		}
	}

}
 8003c0a:	e03d      	b.n	8003c88 <Timer_button_operation+0x1b0>
		if (sw2_released) {
 8003c0c:	4b22      	ldr	r3, [pc, #136]	@ (8003c98 <Timer_button_operation+0x1c0>)
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d016      	beq.n	8003c42 <Timer_button_operation+0x16a>
			if (timer_time != 0) {
 8003c14:	4b26      	ldr	r3, [pc, #152]	@ (8003cb0 <Timer_button_operation+0x1d8>)
 8003c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	d00e      	beq.n	8003c3c <Timer_button_operation+0x164>
				timer_start = !timer_start;
 8003c1e:	4b25      	ldr	r3, [pc, #148]	@ (8003cb4 <Timer_button_operation+0x1dc>)
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	bf14      	ite	ne
 8003c26:	2301      	movne	r3, #1
 8003c28:	2300      	moveq	r3, #0
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	f083 0301 	eor.w	r3, r3, #1
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	4b1e      	ldr	r3, [pc, #120]	@ (8003cb4 <Timer_button_operation+0x1dc>)
 8003c3a:	701a      	strb	r2, [r3, #0]
			sw2_released = false;
 8003c3c:	4b16      	ldr	r3, [pc, #88]	@ (8003c98 <Timer_button_operation+0x1c0>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	701a      	strb	r2, [r3, #0]
		if (sw3_released) {
 8003c42:	4b18      	ldr	r3, [pc, #96]	@ (8003ca4 <Timer_button_operation+0x1cc>)
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d017      	beq.n	8003c7a <Timer_button_operation+0x1a2>
			if (!timer_start) {
 8003c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8003cb4 <Timer_button_operation+0x1dc>)
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	f083 0301 	eor.w	r3, r3, #1
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00d      	beq.n	8003c74 <Timer_button_operation+0x19c>
				timer_time = 0;
 8003c58:	4915      	ldr	r1, [pc, #84]	@ (8003cb0 <Timer_button_operation+0x1d8>)
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	f04f 0300 	mov.w	r3, #0
 8003c62:	e9c1 2300 	strd	r2, r3, [r1]
				timer_time_tmp = 0;
 8003c66:	4911      	ldr	r1, [pc, #68]	@ (8003cac <Timer_button_operation+0x1d4>)
 8003c68:	f04f 0200 	mov.w	r2, #0
 8003c6c:	f04f 0300 	mov.w	r3, #0
 8003c70:	e9c1 2300 	strd	r2, r3, [r1]
			sw3_released = false;
 8003c74:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca4 <Timer_button_operation+0x1cc>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	701a      	strb	r2, [r3, #0]
		if (sw4_released) {
 8003c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8003cb8 <Timer_button_operation+0x1e0>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d002      	beq.n	8003c88 <Timer_button_operation+0x1b0>
			sw4_released = false;
 8003c82:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb8 <Timer_button_operation+0x1e0>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	701a      	strb	r2, [r3, #0]
}
 8003c88:	bf00      	nop
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	20000124 	.word	0x20000124
 8003c90:	2000014e 	.word	0x2000014e
 8003c94:	200001e0 	.word	0x200001e0
 8003c98:	20000125 	.word	0x20000125
 8003c9c:	20000121 	.word	0x20000121
 8003ca0:	20000130 	.word	0x20000130
 8003ca4:	20000126 	.word	0x20000126
 8003ca8:	20000122 	.word	0x20000122
 8003cac:	200001d8 	.word	0x200001d8
 8003cb0:	200001d0 	.word	0x200001d0
 8003cb4:	200001e2 	.word	0x200001e2
 8003cb8:	20000128 	.word	0x20000128

08003cbc <updateTime3>:

void updateTime3() {
 8003cbc:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8003cc0:	af00      	add	r7, sp, #0
	switch (item_select2) {
 8003cc2:	4b19      	ldr	r3, [pc, #100]	@ (8003d28 <updateTime3+0x6c>)
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d01e      	beq.n	8003d08 <updateTime3+0x4c>
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	dc27      	bgt.n	8003d1e <updateTime3+0x62>
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <updateTime3+0x1c>
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d00c      	beq.n	8003cf0 <updateTime3+0x34>
		break;
	case 2:
		timer_time_tmp += 1000;
		break;
	}
}
 8003cd6:	e022      	b.n	8003d1e <updateTime3+0x62>
		timer_time_tmp += 3600000; // Increase hours
 8003cd8:	4b14      	ldr	r3, [pc, #80]	@ (8003d2c <updateTime3+0x70>)
 8003cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cde:	4914      	ldr	r1, [pc, #80]	@ (8003d30 <updateTime3+0x74>)
 8003ce0:	eb12 0801 	adds.w	r8, r2, r1
 8003ce4:	f143 0900 	adc.w	r9, r3, #0
 8003ce8:	4b10      	ldr	r3, [pc, #64]	@ (8003d2c <updateTime3+0x70>)
 8003cea:	e9c3 8900 	strd	r8, r9, [r3]
		break;
 8003cee:	e016      	b.n	8003d1e <updateTime3+0x62>
		timer_time_tmp += 60000;
 8003cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8003d2c <updateTime3+0x70>)
 8003cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf6:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8003cfa:	1854      	adds	r4, r2, r1
 8003cfc:	f143 0500 	adc.w	r5, r3, #0
 8003d00:	4b0a      	ldr	r3, [pc, #40]	@ (8003d2c <updateTime3+0x70>)
 8003d02:	e9c3 4500 	strd	r4, r5, [r3]
		break;
 8003d06:	e00a      	b.n	8003d1e <updateTime3+0x62>
		timer_time_tmp += 1000;
 8003d08:	4b08      	ldr	r3, [pc, #32]	@ (8003d2c <updateTime3+0x70>)
 8003d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0e:	f512 707a 	adds.w	r0, r2, #1000	@ 0x3e8
 8003d12:	f143 0100 	adc.w	r1, r3, #0
 8003d16:	4b05      	ldr	r3, [pc, #20]	@ (8003d2c <updateTime3+0x70>)
 8003d18:	e9c3 0100 	strd	r0, r1, [r3]
		break;
 8003d1c:	bf00      	nop
}
 8003d1e:	bf00      	nop
 8003d20:	46bd      	mov	sp, r7
 8003d22:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8003d26:	4770      	bx	lr
 8003d28:	200001e1 	.word	0x200001e1
 8003d2c:	200001d8 	.word	0x200001d8
 8003d30:	0036ee80 	.word	0x0036ee80

08003d34 <updateTime4>:
void updateTime4() {
 8003d34:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8003d38:	af00      	add	r7, sp, #0
	switch (item_select2) {
 8003d3a:	4b28      	ldr	r3, [pc, #160]	@ (8003ddc <updateTime4+0xa8>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d02e      	beq.n	8003da0 <updateTime4+0x6c>
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	dc44      	bgt.n	8003dd0 <updateTime4+0x9c>
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d002      	beq.n	8003d50 <updateTime4+0x1c>
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d014      	beq.n	8003d78 <updateTime4+0x44>
		if (timer_time_tmp >= 1000) {
			timer_time_tmp -= 1000; // Increase hours
		}
		break;
	}
}
 8003d4e:	e03f      	b.n	8003dd0 <updateTime4+0x9c>
		if (timer_time_tmp >= 3600000) {
 8003d50:	4b23      	ldr	r3, [pc, #140]	@ (8003de0 <updateTime4+0xac>)
 8003d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d56:	4923      	ldr	r1, [pc, #140]	@ (8003de4 <updateTime4+0xb0>)
 8003d58:	428a      	cmp	r2, r1
 8003d5a:	f173 0300 	sbcs.w	r3, r3, #0
 8003d5e:	d332      	bcc.n	8003dc6 <updateTime4+0x92>
			timer_time_tmp -= 3600000; // Increase hours
 8003d60:	4b1f      	ldr	r3, [pc, #124]	@ (8003de0 <updateTime4+0xac>)
 8003d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d66:	4920      	ldr	r1, [pc, #128]	@ (8003de8 <updateTime4+0xb4>)
 8003d68:	eb12 0801 	adds.w	r8, r2, r1
 8003d6c:	f143 39ff 	adc.w	r9, r3, #4294967295
 8003d70:	4b1b      	ldr	r3, [pc, #108]	@ (8003de0 <updateTime4+0xac>)
 8003d72:	e9c3 8900 	strd	r8, r9, [r3]
		break;
 8003d76:	e026      	b.n	8003dc6 <updateTime4+0x92>
		if (timer_time_tmp >= 60000) {
 8003d78:	4b19      	ldr	r3, [pc, #100]	@ (8003de0 <updateTime4+0xac>)
 8003d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7e:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8003d82:	428a      	cmp	r2, r1
 8003d84:	f173 0300 	sbcs.w	r3, r3, #0
 8003d88:	d31f      	bcc.n	8003dca <updateTime4+0x96>
			timer_time_tmp -= 60000; // Increase hours
 8003d8a:	4b15      	ldr	r3, [pc, #84]	@ (8003de0 <updateTime4+0xac>)
 8003d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d90:	4916      	ldr	r1, [pc, #88]	@ (8003dec <updateTime4+0xb8>)
 8003d92:	1854      	adds	r4, r2, r1
 8003d94:	f143 35ff 	adc.w	r5, r3, #4294967295
 8003d98:	4b11      	ldr	r3, [pc, #68]	@ (8003de0 <updateTime4+0xac>)
 8003d9a:	e9c3 4500 	strd	r4, r5, [r3]
		break;
 8003d9e:	e014      	b.n	8003dca <updateTime4+0x96>
		if (timer_time_tmp >= 1000) {
 8003da0:	4b0f      	ldr	r3, [pc, #60]	@ (8003de0 <updateTime4+0xac>)
 8003da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da6:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 8003daa:	f173 0300 	sbcs.w	r3, r3, #0
 8003dae:	d30e      	bcc.n	8003dce <updateTime4+0x9a>
			timer_time_tmp -= 1000; // Increase hours
 8003db0:	4b0b      	ldr	r3, [pc, #44]	@ (8003de0 <updateTime4+0xac>)
 8003db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db6:	f5b2 707a 	subs.w	r0, r2, #1000	@ 0x3e8
 8003dba:	f143 31ff 	adc.w	r1, r3, #4294967295
 8003dbe:	4b08      	ldr	r3, [pc, #32]	@ (8003de0 <updateTime4+0xac>)
 8003dc0:	e9c3 0100 	strd	r0, r1, [r3]
		break;
 8003dc4:	e003      	b.n	8003dce <updateTime4+0x9a>
		break;
 8003dc6:	bf00      	nop
 8003dc8:	e002      	b.n	8003dd0 <updateTime4+0x9c>
		break;
 8003dca:	bf00      	nop
 8003dcc:	e000      	b.n	8003dd0 <updateTime4+0x9c>
		break;
 8003dce:	bf00      	nop
}
 8003dd0:	bf00      	nop
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	200001e1 	.word	0x200001e1
 8003de0:	200001d8 	.word	0x200001d8
 8003de4:	0036ee80 	.word	0x0036ee80
 8003de8:	ffc91180 	.word	0xffc91180
 8003dec:	ffff15a0 	.word	0xffff15a0

08003df0 <Timer_basic_operation>:
void Timer_basic_operation() {
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
// If the timer is running, decrement the timer

	if (!timer_start) {
 8003df4:	4b2d      	ldr	r3, [pc, #180]	@ (8003eac <Timer_basic_operation+0xbc>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	f083 0301 	eor.w	r3, r3, #1
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d033      	beq.n	8003e6a <Timer_basic_operation+0x7a>
		if (timer_setmode) {
 8003e02:	4b2b      	ldr	r3, [pc, #172]	@ (8003eb0 <Timer_basic_operation+0xc0>)
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d013      	beq.n	8003e32 <Timer_basic_operation+0x42>
			sprintf(str, "SET");
 8003e0a:	492a      	ldr	r1, [pc, #168]	@ (8003eb4 <Timer_basic_operation+0xc4>)
 8003e0c:	482a      	ldr	r0, [pc, #168]	@ (8003eb8 <Timer_basic_operation+0xc8>)
 8003e0e:	f002 fb0b 	bl	8006428 <siprintf>
			CLCD_Puts(0, 1, str);
 8003e12:	4a29      	ldr	r2, [pc, #164]	@ (8003eb8 <Timer_basic_operation+0xc8>)
 8003e14:	2101      	movs	r1, #1
 8003e16:	2000      	movs	r0, #0
 8003e18:	f7fd fa6e 	bl	80012f8 <CLCD_Puts>
			sprintf(str, "%16s", "TIMER           ");
 8003e1c:	4a27      	ldr	r2, [pc, #156]	@ (8003ebc <Timer_basic_operation+0xcc>)
 8003e1e:	4928      	ldr	r1, [pc, #160]	@ (8003ec0 <Timer_basic_operation+0xd0>)
 8003e20:	4825      	ldr	r0, [pc, #148]	@ (8003eb8 <Timer_basic_operation+0xc8>)
 8003e22:	f002 fb01 	bl	8006428 <siprintf>
			CLCD_Puts(0, 0, str);
 8003e26:	4a24      	ldr	r2, [pc, #144]	@ (8003eb8 <Timer_basic_operation+0xc8>)
 8003e28:	2100      	movs	r1, #0
 8003e2a:	2000      	movs	r0, #0
 8003e2c:	f7fd fa64 	bl	80012f8 <CLCD_Puts>
			sprintf(str, "%16s", "TIMER    RUNNING");
			CLCD_Puts(0, 0, str);
		}
	}

}
 8003e30:	e03a      	b.n	8003ea8 <Timer_basic_operation+0xb8>
			sprintf(str, "%16s", "TIMER      START");
 8003e32:	4a24      	ldr	r2, [pc, #144]	@ (8003ec4 <Timer_basic_operation+0xd4>)
 8003e34:	4922      	ldr	r1, [pc, #136]	@ (8003ec0 <Timer_basic_operation+0xd0>)
 8003e36:	4820      	ldr	r0, [pc, #128]	@ (8003eb8 <Timer_basic_operation+0xc8>)
 8003e38:	f002 faf6 	bl	8006428 <siprintf>
			CLCD_Puts(0, 0, str);
 8003e3c:	4a1e      	ldr	r2, [pc, #120]	@ (8003eb8 <Timer_basic_operation+0xc8>)
 8003e3e:	2100      	movs	r1, #0
 8003e40:	2000      	movs	r0, #0
 8003e42:	f7fd fa59 	bl	80012f8 <CLCD_Puts>
			if (timer_time_tmp == 0) {
 8003e46:	4b20      	ldr	r3, [pc, #128]	@ (8003ec8 <Timer_basic_operation+0xd8>)
 8003e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	d105      	bne.n	8003e5c <Timer_basic_operation+0x6c>
				timer_time_tmp = timer_time;
 8003e50:	4b1e      	ldr	r3, [pc, #120]	@ (8003ecc <Timer_basic_operation+0xdc>)
 8003e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e56:	491c      	ldr	r1, [pc, #112]	@ (8003ec8 <Timer_basic_operation+0xd8>)
 8003e58:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003e62:	481b      	ldr	r0, [pc, #108]	@ (8003ed0 <Timer_basic_operation+0xe0>)
 8003e64:	f000 fd90 	bl	8004988 <HAL_GPIO_WritePin>
}
 8003e68:	e01e      	b.n	8003ea8 <Timer_basic_operation+0xb8>
		if (timer_time_tmp == 0) {
 8003e6a:	4b17      	ldr	r3, [pc, #92]	@ (8003ec8 <Timer_basic_operation+0xd8>)
 8003e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	d10a      	bne.n	8003e8a <Timer_basic_operation+0x9a>
			sprintf(str, "%16s", "TIMER   FINISHED");
 8003e74:	4a17      	ldr	r2, [pc, #92]	@ (8003ed4 <Timer_basic_operation+0xe4>)
 8003e76:	4912      	ldr	r1, [pc, #72]	@ (8003ec0 <Timer_basic_operation+0xd0>)
 8003e78:	480f      	ldr	r0, [pc, #60]	@ (8003eb8 <Timer_basic_operation+0xc8>)
 8003e7a:	f002 fad5 	bl	8006428 <siprintf>
			CLCD_Puts(0, 0, str);
 8003e7e:	4a0e      	ldr	r2, [pc, #56]	@ (8003eb8 <Timer_basic_operation+0xc8>)
 8003e80:	2100      	movs	r1, #0
 8003e82:	2000      	movs	r0, #0
 8003e84:	f7fd fa38 	bl	80012f8 <CLCD_Puts>
}
 8003e88:	e00e      	b.n	8003ea8 <Timer_basic_operation+0xb8>
		else if (timer_time_tmp != 0) {
 8003e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8003ec8 <Timer_basic_operation+0xd8>)
 8003e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	d009      	beq.n	8003ea8 <Timer_basic_operation+0xb8>
			sprintf(str, "%16s", "TIMER    RUNNING");
 8003e94:	4a10      	ldr	r2, [pc, #64]	@ (8003ed8 <Timer_basic_operation+0xe8>)
 8003e96:	490a      	ldr	r1, [pc, #40]	@ (8003ec0 <Timer_basic_operation+0xd0>)
 8003e98:	4807      	ldr	r0, [pc, #28]	@ (8003eb8 <Timer_basic_operation+0xc8>)
 8003e9a:	f002 fac5 	bl	8006428 <siprintf>
			CLCD_Puts(0, 0, str);
 8003e9e:	4a06      	ldr	r2, [pc, #24]	@ (8003eb8 <Timer_basic_operation+0xc8>)
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	2000      	movs	r0, #0
 8003ea4:	f7fd fa28 	bl	80012f8 <CLCD_Puts>
}
 8003ea8:	bf00      	nop
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	200001e2 	.word	0x200001e2
 8003eb0:	200001e0 	.word	0x200001e0
 8003eb4:	08006f18 	.word	0x08006f18
 8003eb8:	20000138 	.word	0x20000138
 8003ebc:	08006f1c 	.word	0x08006f1c
 8003ec0:	08006f30 	.word	0x08006f30
 8003ec4:	08006f38 	.word	0x08006f38
 8003ec8:	200001d8 	.word	0x200001d8
 8003ecc:	200001d0 	.word	0x200001d0
 8003ed0:	40020c00 	.word	0x40020c00
 8003ed4:	08006f4c 	.word	0x08006f4c
 8003ed8:	08006f60 	.word	0x08006f60

08003edc <Timer_display_operation>:

void Timer_display_operation() {
 8003edc:	b5b0      	push	{r4, r5, r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af02      	add	r7, sp, #8
// Display the timer settings or countdown based on mode
	if (timer_setmode) {
 8003ee2:	4bbe      	ldr	r3, [pc, #760]	@ (80041dc <Timer_display_operation+0x300>)
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 80f2 	beq.w	80040d0 <Timer_display_operation+0x1f4>

		if (clock_time / 100 > 5) {
 8003eec:	4bbc      	ldr	r3, [pc, #752]	@ (80041e0 <Timer_display_operation+0x304>)
 8003eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef2:	f5b2 7f16 	cmp.w	r2, #600	@ 0x258
 8003ef6:	f173 0300 	sbcs.w	r3, r3, #0
 8003efa:	f0c0 808a 	bcc.w	8004012 <Timer_display_operation+0x136>
			if (item_select2 == 0) {
 8003efe:	4bb9      	ldr	r3, [pc, #740]	@ (80041e4 <Timer_display_operation+0x308>)
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d12a      	bne.n	8003f5c <Timer_display_operation+0x80>
				sprintf(str, "%02d", (int) (timer_time_tmp / 1000) % 60);
 8003f06:	4bb8      	ldr	r3, [pc, #736]	@ (80041e8 <Timer_display_operation+0x30c>)
 8003f08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f0c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003f10:	f04f 0300 	mov.w	r3, #0
 8003f14:	f7fc f9ac 	bl	8000270 <__aeabi_uldivmod>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4bb3      	ldr	r3, [pc, #716]	@ (80041ec <Timer_display_operation+0x310>)
 8003f1e:	fb83 1302 	smull	r1, r3, r3, r2
 8003f22:	4413      	add	r3, r2
 8003f24:	1159      	asrs	r1, r3, #5
 8003f26:	17d3      	asrs	r3, r2, #31
 8003f28:	1ac9      	subs	r1, r1, r3
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	011b      	lsls	r3, r3, #4
 8003f2e:	1a5b      	subs	r3, r3, r1
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	1ad1      	subs	r1, r2, r3
 8003f34:	460a      	mov	r2, r1
 8003f36:	49ae      	ldr	r1, [pc, #696]	@ (80041f0 <Timer_display_operation+0x314>)
 8003f38:	48ae      	ldr	r0, [pc, #696]	@ (80041f4 <Timer_display_operation+0x318>)
 8003f3a:	f002 fa75 	bl	8006428 <siprintf>
				CLCD_Puts(14, 1, str);
 8003f3e:	4aad      	ldr	r2, [pc, #692]	@ (80041f4 <Timer_display_operation+0x318>)
 8003f40:	2101      	movs	r1, #1
 8003f42:	200e      	movs	r0, #14
 8003f44:	f7fd f9d8 	bl	80012f8 <CLCD_Puts>
				sprintf(str, "  ");
 8003f48:	49ab      	ldr	r1, [pc, #684]	@ (80041f8 <Timer_display_operation+0x31c>)
 8003f4a:	48aa      	ldr	r0, [pc, #680]	@ (80041f4 <Timer_display_operation+0x318>)
 8003f4c:	f002 fa6c 	bl	8006428 <siprintf>
				CLCD_Puts(8, 1, str);
 8003f50:	4aa8      	ldr	r2, [pc, #672]	@ (80041f4 <Timer_display_operation+0x318>)
 8003f52:	2101      	movs	r1, #1
 8003f54:	2008      	movs	r0, #8
 8003f56:	f7fd f9cf 	bl	80012f8 <CLCD_Puts>
 8003f5a:	e117      	b.n	800418c <Timer_display_operation+0x2b0>
			}

			else if (item_select2 == 1) {
 8003f5c:	4ba1      	ldr	r3, [pc, #644]	@ (80041e4 <Timer_display_operation+0x308>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d126      	bne.n	8003fb2 <Timer_display_operation+0xd6>
				sprintf(str, "%02d", (int) (timer_time_tmp / 1000) / 3600);
 8003f64:	4ba0      	ldr	r3, [pc, #640]	@ (80041e8 <Timer_display_operation+0x30c>)
 8003f66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f6a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003f6e:	f04f 0300 	mov.w	r3, #0
 8003f72:	f7fc f97d 	bl	8000270 <__aeabi_uldivmod>
 8003f76:	4602      	mov	r2, r0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	4a9f      	ldr	r2, [pc, #636]	@ (80041fc <Timer_display_operation+0x320>)
 8003f7e:	fb82 1203 	smull	r1, r2, r2, r3
 8003f82:	441a      	add	r2, r3
 8003f84:	12d2      	asrs	r2, r2, #11
 8003f86:	17db      	asrs	r3, r3, #31
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	4998      	ldr	r1, [pc, #608]	@ (80041f0 <Timer_display_operation+0x314>)
 8003f8e:	4899      	ldr	r0, [pc, #612]	@ (80041f4 <Timer_display_operation+0x318>)
 8003f90:	f002 fa4a 	bl	8006428 <siprintf>
				CLCD_Puts(8, 1, str);
 8003f94:	4a97      	ldr	r2, [pc, #604]	@ (80041f4 <Timer_display_operation+0x318>)
 8003f96:	2101      	movs	r1, #1
 8003f98:	2008      	movs	r0, #8
 8003f9a:	f7fd f9ad 	bl	80012f8 <CLCD_Puts>
				sprintf(str, "  ");
 8003f9e:	4996      	ldr	r1, [pc, #600]	@ (80041f8 <Timer_display_operation+0x31c>)
 8003fa0:	4894      	ldr	r0, [pc, #592]	@ (80041f4 <Timer_display_operation+0x318>)
 8003fa2:	f002 fa41 	bl	8006428 <siprintf>
				CLCD_Puts(11, 1, str);
 8003fa6:	4a93      	ldr	r2, [pc, #588]	@ (80041f4 <Timer_display_operation+0x318>)
 8003fa8:	2101      	movs	r1, #1
 8003faa:	200b      	movs	r0, #11
 8003fac:	f7fd f9a4 	bl	80012f8 <CLCD_Puts>
 8003fb0:	e0ec      	b.n	800418c <Timer_display_operation+0x2b0>
			}

			else if (item_select2 == 2) {
 8003fb2:	4b8c      	ldr	r3, [pc, #560]	@ (80041e4 <Timer_display_operation+0x308>)
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	f040 80e8 	bne.w	800418c <Timer_display_operation+0x2b0>
				sprintf(str, "%02d", (int) ((timer_time_tmp / 1000) / 60) % 60);
 8003fbc:	4b8a      	ldr	r3, [pc, #552]	@ (80041e8 <Timer_display_operation+0x30c>)
 8003fbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003fc2:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8003fc6:	f04f 0300 	mov.w	r3, #0
 8003fca:	f7fc f951 	bl	8000270 <__aeabi_uldivmod>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	4b86      	ldr	r3, [pc, #536]	@ (80041ec <Timer_display_operation+0x310>)
 8003fd4:	fb83 1302 	smull	r1, r3, r3, r2
 8003fd8:	4413      	add	r3, r2
 8003fda:	1159      	asrs	r1, r3, #5
 8003fdc:	17d3      	asrs	r3, r2, #31
 8003fde:	1ac9      	subs	r1, r1, r3
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	011b      	lsls	r3, r3, #4
 8003fe4:	1a5b      	subs	r3, r3, r1
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	1ad1      	subs	r1, r2, r3
 8003fea:	460a      	mov	r2, r1
 8003fec:	4980      	ldr	r1, [pc, #512]	@ (80041f0 <Timer_display_operation+0x314>)
 8003fee:	4881      	ldr	r0, [pc, #516]	@ (80041f4 <Timer_display_operation+0x318>)
 8003ff0:	f002 fa1a 	bl	8006428 <siprintf>
				CLCD_Puts(11, 1, str);
 8003ff4:	4a7f      	ldr	r2, [pc, #508]	@ (80041f4 <Timer_display_operation+0x318>)
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	200b      	movs	r0, #11
 8003ffa:	f7fd f97d 	bl	80012f8 <CLCD_Puts>
				sprintf(str, "  ");
 8003ffe:	497e      	ldr	r1, [pc, #504]	@ (80041f8 <Timer_display_operation+0x31c>)
 8004000:	487c      	ldr	r0, [pc, #496]	@ (80041f4 <Timer_display_operation+0x318>)
 8004002:	f002 fa11 	bl	8006428 <siprintf>
				CLCD_Puts(14, 1, str);
 8004006:	4a7b      	ldr	r2, [pc, #492]	@ (80041f4 <Timer_display_operation+0x318>)
 8004008:	2101      	movs	r1, #1
 800400a:	200e      	movs	r0, #14
 800400c:	f7fd f974 	bl	80012f8 <CLCD_Puts>
 8004010:	e0bc      	b.n	800418c <Timer_display_operation+0x2b0>
			}
		}

		else {
			sprintf(str, "%02d:%02d:%02d", (int) (timer_time_tmp / 1000) / 3600,
 8004012:	4b75      	ldr	r3, [pc, #468]	@ (80041e8 <Timer_display_operation+0x30c>)
 8004014:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004018:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800401c:	f04f 0300 	mov.w	r3, #0
 8004020:	f7fc f926 	bl	8000270 <__aeabi_uldivmod>
 8004024:	4602      	mov	r2, r0
 8004026:	460b      	mov	r3, r1
 8004028:	4613      	mov	r3, r2
 800402a:	4a74      	ldr	r2, [pc, #464]	@ (80041fc <Timer_display_operation+0x320>)
 800402c:	fb82 1203 	smull	r1, r2, r2, r3
 8004030:	441a      	add	r2, r3
 8004032:	12d2      	asrs	r2, r2, #11
 8004034:	17db      	asrs	r3, r3, #31
 8004036:	1ad5      	subs	r5, r2, r3
					(int) ((timer_time_tmp / 1000) / 60) % 60,
 8004038:	4b6b      	ldr	r3, [pc, #428]	@ (80041e8 <Timer_display_operation+0x30c>)
 800403a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800403e:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8004042:	f04f 0300 	mov.w	r3, #0
 8004046:	f7fc f913 	bl	8000270 <__aeabi_uldivmod>
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
			sprintf(str, "%02d:%02d:%02d", (int) (timer_time_tmp / 1000) / 3600,
 800404e:	4b67      	ldr	r3, [pc, #412]	@ (80041ec <Timer_display_operation+0x310>)
 8004050:	fb83 1302 	smull	r1, r3, r3, r2
 8004054:	4413      	add	r3, r2
 8004056:	1159      	asrs	r1, r3, #5
 8004058:	17d3      	asrs	r3, r2, #31
 800405a:	1acc      	subs	r4, r1, r3
 800405c:	4623      	mov	r3, r4
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	1b1b      	subs	r3, r3, r4
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	1ad4      	subs	r4, r2, r3
					(int) (timer_time_tmp / 1000) % 60,
 8004066:	4b60      	ldr	r3, [pc, #384]	@ (80041e8 <Timer_display_operation+0x30c>)
 8004068:	e9d3 0100 	ldrd	r0, r1, [r3]
 800406c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004070:	f04f 0300 	mov.w	r3, #0
 8004074:	f7fc f8fc 	bl	8000270 <__aeabi_uldivmod>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4611      	mov	r1, r2
			sprintf(str, "%02d:%02d:%02d", (int) (timer_time_tmp / 1000) / 3600,
 800407e:	4b5b      	ldr	r3, [pc, #364]	@ (80041ec <Timer_display_operation+0x310>)
 8004080:	fb83 2301 	smull	r2, r3, r3, r1
 8004084:	440b      	add	r3, r1
 8004086:	115a      	asrs	r2, r3, #5
 8004088:	17cb      	asrs	r3, r1, #31
 800408a:	1ad2      	subs	r2, r2, r3
 800408c:	4613      	mov	r3, r2
 800408e:	011b      	lsls	r3, r3, #4
 8004090:	1a9b      	subs	r3, r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	1aca      	subs	r2, r1, r3
					(int) timer_time_tmp % 1000);
 8004096:	4b54      	ldr	r3, [pc, #336]	@ (80041e8 <Timer_display_operation+0x30c>)
 8004098:	e9d3 0100 	ldrd	r0, r1, [r3]
 800409c:	4601      	mov	r1, r0
			sprintf(str, "%02d:%02d:%02d", (int) (timer_time_tmp / 1000) / 3600,
 800409e:	4b58      	ldr	r3, [pc, #352]	@ (8004200 <Timer_display_operation+0x324>)
 80040a0:	fb83 0301 	smull	r0, r3, r3, r1
 80040a4:	1198      	asrs	r0, r3, #6
 80040a6:	17cb      	asrs	r3, r1, #31
 80040a8:	1ac3      	subs	r3, r0, r3
 80040aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80040ae:	fb00 f303 	mul.w	r3, r0, r3
 80040b2:	1acb      	subs	r3, r1, r3
 80040b4:	9301      	str	r3, [sp, #4]
 80040b6:	9200      	str	r2, [sp, #0]
 80040b8:	4623      	mov	r3, r4
 80040ba:	462a      	mov	r2, r5
 80040bc:	4951      	ldr	r1, [pc, #324]	@ (8004204 <Timer_display_operation+0x328>)
 80040be:	484d      	ldr	r0, [pc, #308]	@ (80041f4 <Timer_display_operation+0x318>)
 80040c0:	f002 f9b2 	bl	8006428 <siprintf>
			CLCD_Puts(8, 1, str);
 80040c4:	4a4b      	ldr	r2, [pc, #300]	@ (80041f4 <Timer_display_operation+0x318>)
 80040c6:	2101      	movs	r1, #1
 80040c8:	2008      	movs	r0, #8
 80040ca:	f7fd f915 	bl	80012f8 <CLCD_Puts>
 80040ce:	e05d      	b.n	800418c <Timer_display_operation+0x2b0>
		}
	}

	else {
		sprintf(str, "    %02d:%02d:%02d.%03d",
				(int) (timer_time_tmp / 1000) / 3600,
 80040d0:	4b45      	ldr	r3, [pc, #276]	@ (80041e8 <Timer_display_operation+0x30c>)
 80040d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80040d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80040da:	f04f 0300 	mov.w	r3, #0
 80040de:	f7fc f8c7 	bl	8000270 <__aeabi_uldivmod>
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	4613      	mov	r3, r2
		sprintf(str, "    %02d:%02d:%02d.%03d",
 80040e8:	4a44      	ldr	r2, [pc, #272]	@ (80041fc <Timer_display_operation+0x320>)
 80040ea:	fb82 1203 	smull	r1, r2, r2, r3
 80040ee:	441a      	add	r2, r3
 80040f0:	12d2      	asrs	r2, r2, #11
 80040f2:	17db      	asrs	r3, r3, #31
 80040f4:	1ad5      	subs	r5, r2, r3
				(int) ((timer_time_tmp / 1000) / 60) % 60,
 80040f6:	4b3c      	ldr	r3, [pc, #240]	@ (80041e8 <Timer_display_operation+0x30c>)
 80040f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80040fc:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8004100:	f04f 0300 	mov.w	r3, #0
 8004104:	f7fc f8b4 	bl	8000270 <__aeabi_uldivmod>
 8004108:	4602      	mov	r2, r0
 800410a:	460b      	mov	r3, r1
		sprintf(str, "    %02d:%02d:%02d.%03d",
 800410c:	4b37      	ldr	r3, [pc, #220]	@ (80041ec <Timer_display_operation+0x310>)
 800410e:	fb83 1302 	smull	r1, r3, r3, r2
 8004112:	4413      	add	r3, r2
 8004114:	1159      	asrs	r1, r3, #5
 8004116:	17d3      	asrs	r3, r2, #31
 8004118:	1acc      	subs	r4, r1, r3
 800411a:	4623      	mov	r3, r4
 800411c:	011b      	lsls	r3, r3, #4
 800411e:	1b1b      	subs	r3, r3, r4
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	1ad4      	subs	r4, r2, r3
				(int) (timer_time_tmp / 1000) % 60,
 8004124:	4b30      	ldr	r3, [pc, #192]	@ (80041e8 <Timer_display_operation+0x30c>)
 8004126:	e9d3 0100 	ldrd	r0, r1, [r3]
 800412a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800412e:	f04f 0300 	mov.w	r3, #0
 8004132:	f7fc f89d 	bl	8000270 <__aeabi_uldivmod>
 8004136:	4602      	mov	r2, r0
 8004138:	460b      	mov	r3, r1
 800413a:	4611      	mov	r1, r2
		sprintf(str, "    %02d:%02d:%02d.%03d",
 800413c:	4b2b      	ldr	r3, [pc, #172]	@ (80041ec <Timer_display_operation+0x310>)
 800413e:	fb83 2301 	smull	r2, r3, r3, r1
 8004142:	440b      	add	r3, r1
 8004144:	115a      	asrs	r2, r3, #5
 8004146:	17cb      	asrs	r3, r1, #31
 8004148:	1ad2      	subs	r2, r2, r3
 800414a:	4613      	mov	r3, r2
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	1a9b      	subs	r3, r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	1aca      	subs	r2, r1, r3
				(int) timer_time_tmp % 1000);
 8004154:	4b24      	ldr	r3, [pc, #144]	@ (80041e8 <Timer_display_operation+0x30c>)
 8004156:	e9d3 0100 	ldrd	r0, r1, [r3]
 800415a:	4601      	mov	r1, r0
		sprintf(str, "    %02d:%02d:%02d.%03d",
 800415c:	4b28      	ldr	r3, [pc, #160]	@ (8004200 <Timer_display_operation+0x324>)
 800415e:	fb83 0301 	smull	r0, r3, r3, r1
 8004162:	1198      	asrs	r0, r3, #6
 8004164:	17cb      	asrs	r3, r1, #31
 8004166:	1ac3      	subs	r3, r0, r3
 8004168:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800416c:	fb00 f303 	mul.w	r3, r0, r3
 8004170:	1acb      	subs	r3, r1, r3
 8004172:	9301      	str	r3, [sp, #4]
 8004174:	9200      	str	r2, [sp, #0]
 8004176:	4623      	mov	r3, r4
 8004178:	462a      	mov	r2, r5
 800417a:	4923      	ldr	r1, [pc, #140]	@ (8004208 <Timer_display_operation+0x32c>)
 800417c:	481d      	ldr	r0, [pc, #116]	@ (80041f4 <Timer_display_operation+0x318>)
 800417e:	f002 f953 	bl	8006428 <siprintf>
		CLCD_Puts(0, 1, str);
 8004182:	4a1c      	ldr	r2, [pc, #112]	@ (80041f4 <Timer_display_operation+0x318>)
 8004184:	2101      	movs	r1, #1
 8004186:	2000      	movs	r0, #0
 8004188:	f7fd f8b6 	bl	80012f8 <CLCD_Puts>
	}

//0.1, 0.01초 단위 7SEG 출력

	if (timer_time_tmp % 1000 / 100 > 5) { // 0.5초간 7SEG 깜박임
 800418c:	4b16      	ldr	r3, [pc, #88]	@ (80041e8 <Timer_display_operation+0x30c>)
 800418e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004192:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004196:	f04f 0300 	mov.w	r3, #0
 800419a:	f7fc f869 	bl	8000270 <__aeabi_uldivmod>
 800419e:	f5b2 7f16 	cmp.w	r2, #600	@ 0x258
 80041a2:	f173 0300 	sbcs.w	r3, r3, #0
 80041a6:	d331      	bcc.n	800420c <Timer_display_operation+0x330>
		_7SEG_SetNumber(DGT1, timer_time_tmp % 1000 / 100, OFF);
 80041a8:	4b0f      	ldr	r3, [pc, #60]	@ (80041e8 <Timer_display_operation+0x30c>)
 80041aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80041b2:	f04f 0300 	mov.w	r3, #0
 80041b6:	f7fc f85b 	bl	8000270 <__aeabi_uldivmod>
 80041ba:	4610      	mov	r0, r2
 80041bc:	4619      	mov	r1, r3
 80041be:	f04f 0264 	mov.w	r2, #100	@ 0x64
 80041c2:	f04f 0300 	mov.w	r3, #0
 80041c6:	f7fc f853 	bl	8000270 <__aeabi_uldivmod>
 80041ca:	4602      	mov	r2, r0
 80041cc:	460b      	mov	r3, r1
 80041ce:	4613      	mov	r3, r2
 80041d0:	2200      	movs	r2, #0
 80041d2:	4619      	mov	r1, r3
 80041d4:	2000      	movs	r0, #0
 80041d6:	f7fc faa9 	bl	800072c <_7SEG_SetNumber>
 80041da:	e030      	b.n	800423e <Timer_display_operation+0x362>
 80041dc:	200001e0 	.word	0x200001e0
 80041e0:	20000150 	.word	0x20000150
 80041e4:	200001e1 	.word	0x200001e1
 80041e8:	200001d8 	.word	0x200001d8
 80041ec:	88888889 	.word	0x88888889
 80041f0:	08006f74 	.word	0x08006f74
 80041f4:	20000138 	.word	0x20000138
 80041f8:	08006f7c 	.word	0x08006f7c
 80041fc:	91a2b3c5 	.word	0x91a2b3c5
 8004200:	10624dd3 	.word	0x10624dd3
 8004204:	08006f80 	.word	0x08006f80
 8004208:	08006f90 	.word	0x08006f90
	} else {
		_7SEG_SetNumber(DGT1, timer_time_tmp % 1000 / 100, ON);
 800420c:	4b1a      	ldr	r3, [pc, #104]	@ (8004278 <Timer_display_operation+0x39c>)
 800420e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004212:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004216:	f04f 0300 	mov.w	r3, #0
 800421a:	f7fc f829 	bl	8000270 <__aeabi_uldivmod>
 800421e:	4610      	mov	r0, r2
 8004220:	4619      	mov	r1, r3
 8004222:	f04f 0264 	mov.w	r2, #100	@ 0x64
 8004226:	f04f 0300 	mov.w	r3, #0
 800422a:	f7fc f821 	bl	8000270 <__aeabi_uldivmod>
 800422e:	4602      	mov	r2, r0
 8004230:	460b      	mov	r3, r1
 8004232:	4613      	mov	r3, r2
 8004234:	2201      	movs	r2, #1
 8004236:	4619      	mov	r1, r3
 8004238:	2000      	movs	r0, #0
 800423a:	f7fc fa77 	bl	800072c <_7SEG_SetNumber>
	}
	_7SEG_SetNumber(DGT2, timer_time_tmp % 100 / 10, OFF);
 800423e:	4b0e      	ldr	r3, [pc, #56]	@ (8004278 <Timer_display_operation+0x39c>)
 8004240:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004244:	f04f 0264 	mov.w	r2, #100	@ 0x64
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	f7fc f810 	bl	8000270 <__aeabi_uldivmod>
 8004250:	4610      	mov	r0, r2
 8004252:	4619      	mov	r1, r3
 8004254:	f04f 020a 	mov.w	r2, #10
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	f7fc f808 	bl	8000270 <__aeabi_uldivmod>
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	4613      	mov	r3, r2
 8004266:	2200      	movs	r2, #0
 8004268:	4619      	mov	r1, r3
 800426a:	2001      	movs	r0, #1
 800426c:	f7fc fa5e 	bl	800072c <_7SEG_SetNumber>
}
 8004270:	bf00      	nop
 8004272:	46bd      	mov	sp, r7
 8004274:	bdb0      	pop	{r4, r5, r7, pc}
 8004276:	bf00      	nop
 8004278:	200001d8 	.word	0x200001d8

0800427c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800427c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80042b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004280:	f7ff fc18 	bl	8003ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004284:	480c      	ldr	r0, [pc, #48]	@ (80042b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004286:	490d      	ldr	r1, [pc, #52]	@ (80042bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004288:	4a0d      	ldr	r2, [pc, #52]	@ (80042c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800428a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800428c:	e002      	b.n	8004294 <LoopCopyDataInit>

0800428e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800428e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004292:	3304      	adds	r3, #4

08004294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004298:	d3f9      	bcc.n	800428e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800429a:	4a0a      	ldr	r2, [pc, #40]	@ (80042c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800429c:	4c0a      	ldr	r4, [pc, #40]	@ (80042c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800429e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042a0:	e001      	b.n	80042a6 <LoopFillZerobss>

080042a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042a4:	3204      	adds	r2, #4

080042a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042a8:	d3fb      	bcc.n	80042a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80042aa:	f002 f8eb 	bl	8006484 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042ae:	f7fe fa95 	bl	80027dc <main>
  bx  lr    
 80042b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80042b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80042b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042bc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80042c0:	08006ffc 	.word	0x08006ffc
  ldr r2, =_sbss
 80042c4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80042c8:	20000330 	.word	0x20000330

080042cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042cc:	e7fe      	b.n	80042cc <ADC_IRQHandler>
	...

080042d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042d4:	4b0e      	ldr	r3, [pc, #56]	@ (8004310 <HAL_Init+0x40>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a0d      	ldr	r2, [pc, #52]	@ (8004310 <HAL_Init+0x40>)
 80042da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80042e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004310 <HAL_Init+0x40>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a0a      	ldr	r2, [pc, #40]	@ (8004310 <HAL_Init+0x40>)
 80042e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80042ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042ec:	4b08      	ldr	r3, [pc, #32]	@ (8004310 <HAL_Init+0x40>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a07      	ldr	r2, [pc, #28]	@ (8004310 <HAL_Init+0x40>)
 80042f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042f8:	2003      	movs	r0, #3
 80042fa:	f000 f94f 	bl	800459c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042fe:	200f      	movs	r0, #15
 8004300:	f000 f808 	bl	8004314 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004304:	f7ff f824 	bl	8003350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	40023c00 	.word	0x40023c00

08004314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800431c:	4b12      	ldr	r3, [pc, #72]	@ (8004368 <HAL_InitTick+0x54>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	4b12      	ldr	r3, [pc, #72]	@ (800436c <HAL_InitTick+0x58>)
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	4619      	mov	r1, r3
 8004326:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800432a:	fbb3 f3f1 	udiv	r3, r3, r1
 800432e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004332:	4618      	mov	r0, r3
 8004334:	f000 f967 	bl	8004606 <HAL_SYSTICK_Config>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e00e      	b.n	8004360 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b0f      	cmp	r3, #15
 8004346:	d80a      	bhi.n	800435e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004348:	2200      	movs	r2, #0
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	f04f 30ff 	mov.w	r0, #4294967295
 8004350:	f000 f92f 	bl	80045b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004354:	4a06      	ldr	r2, [pc, #24]	@ (8004370 <HAL_InitTick+0x5c>)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	e000      	b.n	8004360 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
}
 8004360:	4618      	mov	r0, r3
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	20000000 	.word	0x20000000
 800436c:	2000001c 	.word	0x2000001c
 8004370:	20000018 	.word	0x20000018

08004374 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004378:	4b06      	ldr	r3, [pc, #24]	@ (8004394 <HAL_IncTick+0x20>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	461a      	mov	r2, r3
 800437e:	4b06      	ldr	r3, [pc, #24]	@ (8004398 <HAL_IncTick+0x24>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4413      	add	r3, r2
 8004384:	4a04      	ldr	r2, [pc, #16]	@ (8004398 <HAL_IncTick+0x24>)
 8004386:	6013      	str	r3, [r2, #0]
}
 8004388:	bf00      	nop
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	2000001c 	.word	0x2000001c
 8004398:	200001e4 	.word	0x200001e4

0800439c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  return uwTick;
 80043a0:	4b03      	ldr	r3, [pc, #12]	@ (80043b0 <HAL_GetTick+0x14>)
 80043a2:	681b      	ldr	r3, [r3, #0]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	200001e4 	.word	0x200001e4

080043b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043bc:	f7ff ffee 	bl	800439c <HAL_GetTick>
 80043c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043cc:	d005      	beq.n	80043da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043ce:	4b0a      	ldr	r3, [pc, #40]	@ (80043f8 <HAL_Delay+0x44>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	461a      	mov	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4413      	add	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80043da:	bf00      	nop
 80043dc:	f7ff ffde 	bl	800439c <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d8f7      	bhi.n	80043dc <HAL_Delay+0x28>
  {
  }
}
 80043ec:	bf00      	nop
 80043ee:	bf00      	nop
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	2000001c 	.word	0x2000001c

080043fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800440c:	4b0c      	ldr	r3, [pc, #48]	@ (8004440 <__NVIC_SetPriorityGrouping+0x44>)
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004418:	4013      	ands	r3, r2
 800441a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004424:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004428:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800442c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800442e:	4a04      	ldr	r2, [pc, #16]	@ (8004440 <__NVIC_SetPriorityGrouping+0x44>)
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	60d3      	str	r3, [r2, #12]
}
 8004434:	bf00      	nop
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	e000ed00 	.word	0xe000ed00

08004444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004448:	4b04      	ldr	r3, [pc, #16]	@ (800445c <__NVIC_GetPriorityGrouping+0x18>)
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	0a1b      	lsrs	r3, r3, #8
 800444e:	f003 0307 	and.w	r3, r3, #7
}
 8004452:	4618      	mov	r0, r3
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	e000ed00 	.word	0xe000ed00

08004460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	4603      	mov	r3, r0
 8004468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800446a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800446e:	2b00      	cmp	r3, #0
 8004470:	db0b      	blt.n	800448a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004472:	79fb      	ldrb	r3, [r7, #7]
 8004474:	f003 021f 	and.w	r2, r3, #31
 8004478:	4907      	ldr	r1, [pc, #28]	@ (8004498 <__NVIC_EnableIRQ+0x38>)
 800447a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447e:	095b      	lsrs	r3, r3, #5
 8004480:	2001      	movs	r0, #1
 8004482:	fa00 f202 	lsl.w	r2, r0, r2
 8004486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800448a:	bf00      	nop
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	e000e100 	.word	0xe000e100

0800449c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	4603      	mov	r3, r0
 80044a4:	6039      	str	r1, [r7, #0]
 80044a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	db0a      	blt.n	80044c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	490c      	ldr	r1, [pc, #48]	@ (80044e8 <__NVIC_SetPriority+0x4c>)
 80044b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ba:	0112      	lsls	r2, r2, #4
 80044bc:	b2d2      	uxtb	r2, r2
 80044be:	440b      	add	r3, r1
 80044c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044c4:	e00a      	b.n	80044dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	4908      	ldr	r1, [pc, #32]	@ (80044ec <__NVIC_SetPriority+0x50>)
 80044cc:	79fb      	ldrb	r3, [r7, #7]
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	3b04      	subs	r3, #4
 80044d4:	0112      	lsls	r2, r2, #4
 80044d6:	b2d2      	uxtb	r2, r2
 80044d8:	440b      	add	r3, r1
 80044da:	761a      	strb	r2, [r3, #24]
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	e000e100 	.word	0xe000e100
 80044ec:	e000ed00 	.word	0xe000ed00

080044f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b089      	sub	sp, #36	@ 0x24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	f1c3 0307 	rsb	r3, r3, #7
 800450a:	2b04      	cmp	r3, #4
 800450c:	bf28      	it	cs
 800450e:	2304      	movcs	r3, #4
 8004510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	3304      	adds	r3, #4
 8004516:	2b06      	cmp	r3, #6
 8004518:	d902      	bls.n	8004520 <NVIC_EncodePriority+0x30>
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	3b03      	subs	r3, #3
 800451e:	e000      	b.n	8004522 <NVIC_EncodePriority+0x32>
 8004520:	2300      	movs	r3, #0
 8004522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004524:	f04f 32ff 	mov.w	r2, #4294967295
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	fa02 f303 	lsl.w	r3, r2, r3
 800452e:	43da      	mvns	r2, r3
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	401a      	ands	r2, r3
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004538:	f04f 31ff 	mov.w	r1, #4294967295
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	fa01 f303 	lsl.w	r3, r1, r3
 8004542:	43d9      	mvns	r1, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004548:	4313      	orrs	r3, r2
         );
}
 800454a:	4618      	mov	r0, r3
 800454c:	3724      	adds	r7, #36	@ 0x24
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
	...

08004558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3b01      	subs	r3, #1
 8004564:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004568:	d301      	bcc.n	800456e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800456a:	2301      	movs	r3, #1
 800456c:	e00f      	b.n	800458e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800456e:	4a0a      	ldr	r2, [pc, #40]	@ (8004598 <SysTick_Config+0x40>)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	3b01      	subs	r3, #1
 8004574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004576:	210f      	movs	r1, #15
 8004578:	f04f 30ff 	mov.w	r0, #4294967295
 800457c:	f7ff ff8e 	bl	800449c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004580:	4b05      	ldr	r3, [pc, #20]	@ (8004598 <SysTick_Config+0x40>)
 8004582:	2200      	movs	r2, #0
 8004584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004586:	4b04      	ldr	r3, [pc, #16]	@ (8004598 <SysTick_Config+0x40>)
 8004588:	2207      	movs	r2, #7
 800458a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	e000e010 	.word	0xe000e010

0800459c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f7ff ff29 	bl	80043fc <__NVIC_SetPriorityGrouping>
}
 80045aa:	bf00      	nop
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b086      	sub	sp, #24
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	4603      	mov	r3, r0
 80045ba:	60b9      	str	r1, [r7, #8]
 80045bc:	607a      	str	r2, [r7, #4]
 80045be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045c4:	f7ff ff3e 	bl	8004444 <__NVIC_GetPriorityGrouping>
 80045c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	68b9      	ldr	r1, [r7, #8]
 80045ce:	6978      	ldr	r0, [r7, #20]
 80045d0:	f7ff ff8e 	bl	80044f0 <NVIC_EncodePriority>
 80045d4:	4602      	mov	r2, r0
 80045d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045da:	4611      	mov	r1, r2
 80045dc:	4618      	mov	r0, r3
 80045de:	f7ff ff5d 	bl	800449c <__NVIC_SetPriority>
}
 80045e2:	bf00      	nop
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b082      	sub	sp, #8
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	4603      	mov	r3, r0
 80045f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff ff31 	bl	8004460 <__NVIC_EnableIRQ>
}
 80045fe:	bf00      	nop
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b082      	sub	sp, #8
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7ff ffa2 	bl	8004558 <SysTick_Config>
 8004614:	4603      	mov	r3, r0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
	...

08004620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004620:	b480      	push	{r7}
 8004622:	b089      	sub	sp, #36	@ 0x24
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800462a:	2300      	movs	r3, #0
 800462c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800462e:	2300      	movs	r3, #0
 8004630:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004632:	2300      	movs	r3, #0
 8004634:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004636:	2300      	movs	r3, #0
 8004638:	61fb      	str	r3, [r7, #28]
 800463a:	e16b      	b.n	8004914 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800463c:	2201      	movs	r2, #1
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	fa02 f303 	lsl.w	r3, r2, r3
 8004644:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	4013      	ands	r3, r2
 800464e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	429a      	cmp	r2, r3
 8004656:	f040 815a 	bne.w	800490e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f003 0303 	and.w	r3, r3, #3
 8004662:	2b01      	cmp	r3, #1
 8004664:	d005      	beq.n	8004672 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800466e:	2b02      	cmp	r3, #2
 8004670:	d130      	bne.n	80046d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	2203      	movs	r2, #3
 800467e:	fa02 f303 	lsl.w	r3, r2, r3
 8004682:	43db      	mvns	r3, r3
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	4013      	ands	r3, r2
 8004688:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68da      	ldr	r2, [r3, #12]
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	fa02 f303 	lsl.w	r3, r2, r3
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	4313      	orrs	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046a8:	2201      	movs	r2, #1
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	43db      	mvns	r3, r3
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	4013      	ands	r3, r2
 80046b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	091b      	lsrs	r3, r3, #4
 80046be:	f003 0201 	and.w	r2, r3, #1
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f003 0303 	and.w	r3, r3, #3
 80046dc:	2b03      	cmp	r3, #3
 80046de:	d017      	beq.n	8004710 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	2203      	movs	r2, #3
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	43db      	mvns	r3, r3
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	4013      	ands	r3, r2
 80046f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	4313      	orrs	r3, r2
 8004708:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f003 0303 	and.w	r3, r3, #3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d123      	bne.n	8004764 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	08da      	lsrs	r2, r3, #3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3208      	adds	r2, #8
 8004724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004728:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	220f      	movs	r2, #15
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	43db      	mvns	r3, r3
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	4013      	ands	r3, r2
 800473e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	691a      	ldr	r2, [r3, #16]
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	fa02 f303 	lsl.w	r3, r2, r3
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	4313      	orrs	r3, r2
 8004754:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	08da      	lsrs	r2, r3, #3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	3208      	adds	r2, #8
 800475e:	69b9      	ldr	r1, [r7, #24]
 8004760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	2203      	movs	r2, #3
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	43db      	mvns	r3, r3
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	4013      	ands	r3, r2
 800477a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f003 0203 	and.w	r2, r3, #3
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	4313      	orrs	r3, r2
 8004790:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 80b4 	beq.w	800490e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]
 80047aa:	4b60      	ldr	r3, [pc, #384]	@ (800492c <HAL_GPIO_Init+0x30c>)
 80047ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ae:	4a5f      	ldr	r2, [pc, #380]	@ (800492c <HAL_GPIO_Init+0x30c>)
 80047b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80047b6:	4b5d      	ldr	r3, [pc, #372]	@ (800492c <HAL_GPIO_Init+0x30c>)
 80047b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047c2:	4a5b      	ldr	r2, [pc, #364]	@ (8004930 <HAL_GPIO_Init+0x310>)
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	089b      	lsrs	r3, r3, #2
 80047c8:	3302      	adds	r3, #2
 80047ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	f003 0303 	and.w	r3, r3, #3
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	220f      	movs	r2, #15
 80047da:	fa02 f303 	lsl.w	r3, r2, r3
 80047de:	43db      	mvns	r3, r3
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	4013      	ands	r3, r2
 80047e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a52      	ldr	r2, [pc, #328]	@ (8004934 <HAL_GPIO_Init+0x314>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d02b      	beq.n	8004846 <HAL_GPIO_Init+0x226>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a51      	ldr	r2, [pc, #324]	@ (8004938 <HAL_GPIO_Init+0x318>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d025      	beq.n	8004842 <HAL_GPIO_Init+0x222>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a50      	ldr	r2, [pc, #320]	@ (800493c <HAL_GPIO_Init+0x31c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d01f      	beq.n	800483e <HAL_GPIO_Init+0x21e>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a4f      	ldr	r2, [pc, #316]	@ (8004940 <HAL_GPIO_Init+0x320>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d019      	beq.n	800483a <HAL_GPIO_Init+0x21a>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a4e      	ldr	r2, [pc, #312]	@ (8004944 <HAL_GPIO_Init+0x324>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d013      	beq.n	8004836 <HAL_GPIO_Init+0x216>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a4d      	ldr	r2, [pc, #308]	@ (8004948 <HAL_GPIO_Init+0x328>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d00d      	beq.n	8004832 <HAL_GPIO_Init+0x212>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a4c      	ldr	r2, [pc, #304]	@ (800494c <HAL_GPIO_Init+0x32c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d007      	beq.n	800482e <HAL_GPIO_Init+0x20e>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a4b      	ldr	r2, [pc, #300]	@ (8004950 <HAL_GPIO_Init+0x330>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d101      	bne.n	800482a <HAL_GPIO_Init+0x20a>
 8004826:	2307      	movs	r3, #7
 8004828:	e00e      	b.n	8004848 <HAL_GPIO_Init+0x228>
 800482a:	2308      	movs	r3, #8
 800482c:	e00c      	b.n	8004848 <HAL_GPIO_Init+0x228>
 800482e:	2306      	movs	r3, #6
 8004830:	e00a      	b.n	8004848 <HAL_GPIO_Init+0x228>
 8004832:	2305      	movs	r3, #5
 8004834:	e008      	b.n	8004848 <HAL_GPIO_Init+0x228>
 8004836:	2304      	movs	r3, #4
 8004838:	e006      	b.n	8004848 <HAL_GPIO_Init+0x228>
 800483a:	2303      	movs	r3, #3
 800483c:	e004      	b.n	8004848 <HAL_GPIO_Init+0x228>
 800483e:	2302      	movs	r3, #2
 8004840:	e002      	b.n	8004848 <HAL_GPIO_Init+0x228>
 8004842:	2301      	movs	r3, #1
 8004844:	e000      	b.n	8004848 <HAL_GPIO_Init+0x228>
 8004846:	2300      	movs	r3, #0
 8004848:	69fa      	ldr	r2, [r7, #28]
 800484a:	f002 0203 	and.w	r2, r2, #3
 800484e:	0092      	lsls	r2, r2, #2
 8004850:	4093      	lsls	r3, r2
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	4313      	orrs	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004858:	4935      	ldr	r1, [pc, #212]	@ (8004930 <HAL_GPIO_Init+0x310>)
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	089b      	lsrs	r3, r3, #2
 800485e:	3302      	adds	r3, #2
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004866:	4b3b      	ldr	r3, [pc, #236]	@ (8004954 <HAL_GPIO_Init+0x334>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	43db      	mvns	r3, r3
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	4013      	ands	r3, r2
 8004874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	4313      	orrs	r3, r2
 8004888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800488a:	4a32      	ldr	r2, [pc, #200]	@ (8004954 <HAL_GPIO_Init+0x334>)
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004890:	4b30      	ldr	r3, [pc, #192]	@ (8004954 <HAL_GPIO_Init+0x334>)
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	43db      	mvns	r3, r3
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	4013      	ands	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048b4:	4a27      	ldr	r2, [pc, #156]	@ (8004954 <HAL_GPIO_Init+0x334>)
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048ba:	4b26      	ldr	r3, [pc, #152]	@ (8004954 <HAL_GPIO_Init+0x334>)
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	43db      	mvns	r3, r3
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	4013      	ands	r3, r2
 80048c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	4313      	orrs	r3, r2
 80048dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048de:	4a1d      	ldr	r2, [pc, #116]	@ (8004954 <HAL_GPIO_Init+0x334>)
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004954 <HAL_GPIO_Init+0x334>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	43db      	mvns	r3, r3
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	4013      	ands	r3, r2
 80048f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d003      	beq.n	8004908 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	4313      	orrs	r3, r2
 8004906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004908:	4a12      	ldr	r2, [pc, #72]	@ (8004954 <HAL_GPIO_Init+0x334>)
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	3301      	adds	r3, #1
 8004912:	61fb      	str	r3, [r7, #28]
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	2b0f      	cmp	r3, #15
 8004918:	f67f ae90 	bls.w	800463c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800491c:	bf00      	nop
 800491e:	bf00      	nop
 8004920:	3724      	adds	r7, #36	@ 0x24
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40023800 	.word	0x40023800
 8004930:	40013800 	.word	0x40013800
 8004934:	40020000 	.word	0x40020000
 8004938:	40020400 	.word	0x40020400
 800493c:	40020800 	.word	0x40020800
 8004940:	40020c00 	.word	0x40020c00
 8004944:	40021000 	.word	0x40021000
 8004948:	40021400 	.word	0x40021400
 800494c:	40021800 	.word	0x40021800
 8004950:	40021c00 	.word	0x40021c00
 8004954:	40013c00 	.word	0x40013c00

08004958 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	460b      	mov	r3, r1
 8004962:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	691a      	ldr	r2, [r3, #16]
 8004968:	887b      	ldrh	r3, [r7, #2]
 800496a:	4013      	ands	r3, r2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d002      	beq.n	8004976 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004970:	2301      	movs	r3, #1
 8004972:	73fb      	strb	r3, [r7, #15]
 8004974:	e001      	b.n	800497a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004976:	2300      	movs	r3, #0
 8004978:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800497a:	7bfb      	ldrb	r3, [r7, #15]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	460b      	mov	r3, r1
 8004992:	807b      	strh	r3, [r7, #2]
 8004994:	4613      	mov	r3, r2
 8004996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004998:	787b      	ldrb	r3, [r7, #1]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800499e:	887a      	ldrh	r2, [r7, #2]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049a4:	e003      	b.n	80049ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049a6:	887b      	ldrh	r3, [r7, #2]
 80049a8:	041a      	lsls	r2, r3, #16
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	619a      	str	r2, [r3, #24]
}
 80049ae:	bf00      	nop
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b085      	sub	sp, #20
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	460b      	mov	r3, r1
 80049c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049cc:	887a      	ldrh	r2, [r7, #2]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	4013      	ands	r3, r2
 80049d2:	041a      	lsls	r2, r3, #16
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	43d9      	mvns	r1, r3
 80049d8:	887b      	ldrh	r3, [r7, #2]
 80049da:	400b      	ands	r3, r1
 80049dc:	431a      	orrs	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	619a      	str	r2, [r3, #24]
}
 80049e2:	bf00      	nop
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
	...

080049f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	4603      	mov	r3, r0
 80049f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80049fa:	4b08      	ldr	r3, [pc, #32]	@ (8004a1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049fc:	695a      	ldr	r2, [r3, #20]
 80049fe:	88fb      	ldrh	r3, [r7, #6]
 8004a00:	4013      	ands	r3, r2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d006      	beq.n	8004a14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a06:	4a05      	ldr	r2, [pc, #20]	@ (8004a1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a08:	88fb      	ldrh	r3, [r7, #6]
 8004a0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a0c:	88fb      	ldrh	r3, [r7, #6]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fe faee 	bl	8002ff0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a14:	bf00      	nop
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40013c00 	.word	0x40013c00

08004a20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e267      	b.n	8004f02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d075      	beq.n	8004b2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a3e:	4b88      	ldr	r3, [pc, #544]	@ (8004c60 <HAL_RCC_OscConfig+0x240>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f003 030c 	and.w	r3, r3, #12
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	d00c      	beq.n	8004a64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a4a:	4b85      	ldr	r3, [pc, #532]	@ (8004c60 <HAL_RCC_OscConfig+0x240>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a52:	2b08      	cmp	r3, #8
 8004a54:	d112      	bne.n	8004a7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a56:	4b82      	ldr	r3, [pc, #520]	@ (8004c60 <HAL_RCC_OscConfig+0x240>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a62:	d10b      	bne.n	8004a7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a64:	4b7e      	ldr	r3, [pc, #504]	@ (8004c60 <HAL_RCC_OscConfig+0x240>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d05b      	beq.n	8004b28 <HAL_RCC_OscConfig+0x108>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d157      	bne.n	8004b28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e242      	b.n	8004f02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a84:	d106      	bne.n	8004a94 <HAL_RCC_OscConfig+0x74>
 8004a86:	4b76      	ldr	r3, [pc, #472]	@ (8004c60 <HAL_RCC_OscConfig+0x240>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a75      	ldr	r2, [pc, #468]	@ (8004c60 <HAL_RCC_OscConfig+0x240>)
 8004a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a90:	6013      	str	r3, [r2, #0]
 8004a92:	e01d      	b.n	8004ad0 <HAL_RCC_OscConfig+0xb0>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a9c:	d10c      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x98>
 8004a9e:	4b70      	ldr	r3, [pc, #448]	@ (8004c60 <HAL_RCC_OscConfig+0x240>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a6f      	ldr	r2, [pc, #444]	@ (8004c60 <HAL_RCC_OscConfig+0x240>)
 8004aa4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	4b6d      	ldr	r3, [pc, #436]	@ (8004c60 <HAL_RCC_OscConfig+0x240>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a6c      	ldr	r2, [pc, #432]	@ (8004c60 <HAL_RCC_OscConfig+0x240>)
 8004ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ab4:	6013      	str	r3, [r2, #0]
 8004ab6:	e00b      	b.n	8004ad0 <HAL_RCC_OscConfig+0xb0>
 8004ab8:	4b69      	ldr	r3, [pc, #420]	@ (8004c60 <HAL_RCC_OscConfig+0x240>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a68      	ldr	r2, [pc, #416]	@ (8004c60 <HAL_RCC_OscConfig+0x240>)
 8004abe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ac2:	6013      	str	r3, [r2, #0]
 8004ac4:	4b66      	ldr	r3, [pc, #408]	@ (8004c60 <HAL_RCC_OscConfig+0x240>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a65      	ldr	r2, [pc, #404]	@ (8004c60 <HAL_RCC_OscConfig+0x240>)
 8004aca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ace:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d013      	beq.n	8004b00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad8:	f7ff fc60 	bl	800439c <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ae0:	f7ff fc5c 	bl	800439c <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b64      	cmp	r3, #100	@ 0x64
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e207      	b.n	8004f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004af2:	4b5b      	ldr	r3, [pc, #364]	@ (8004c60 <HAL_RCC_OscConfig+0x240>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d0f0      	beq.n	8004ae0 <HAL_RCC_OscConfig+0xc0>
 8004afe:	e014      	b.n	8004b2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b00:	f7ff fc4c 	bl	800439c <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b08:	f7ff fc48 	bl	800439c <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b64      	cmp	r3, #100	@ 0x64
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e1f3      	b.n	8004f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b1a:	4b51      	ldr	r3, [pc, #324]	@ (8004c60 <HAL_RCC_OscConfig+0x240>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1f0      	bne.n	8004b08 <HAL_RCC_OscConfig+0xe8>
 8004b26:	e000      	b.n	8004b2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d063      	beq.n	8004bfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b36:	4b4a      	ldr	r3, [pc, #296]	@ (8004c60 <HAL_RCC_OscConfig+0x240>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 030c 	and.w	r3, r3, #12
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00b      	beq.n	8004b5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b42:	4b47      	ldr	r3, [pc, #284]	@ (8004c60 <HAL_RCC_OscConfig+0x240>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b4a:	2b08      	cmp	r3, #8
 8004b4c:	d11c      	bne.n	8004b88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b4e:	4b44      	ldr	r3, [pc, #272]	@ (8004c60 <HAL_RCC_OscConfig+0x240>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d116      	bne.n	8004b88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b5a:	4b41      	ldr	r3, [pc, #260]	@ (8004c60 <HAL_RCC_OscConfig+0x240>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d005      	beq.n	8004b72 <HAL_RCC_OscConfig+0x152>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d001      	beq.n	8004b72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e1c7      	b.n	8004f02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b72:	4b3b      	ldr	r3, [pc, #236]	@ (8004c60 <HAL_RCC_OscConfig+0x240>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	4937      	ldr	r1, [pc, #220]	@ (8004c60 <HAL_RCC_OscConfig+0x240>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b86:	e03a      	b.n	8004bfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d020      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b90:	4b34      	ldr	r3, [pc, #208]	@ (8004c64 <HAL_RCC_OscConfig+0x244>)
 8004b92:	2201      	movs	r2, #1
 8004b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b96:	f7ff fc01 	bl	800439c <HAL_GetTick>
 8004b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b9c:	e008      	b.n	8004bb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b9e:	f7ff fbfd 	bl	800439c <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d901      	bls.n	8004bb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e1a8      	b.n	8004f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8004c60 <HAL_RCC_OscConfig+0x240>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d0f0      	beq.n	8004b9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bbc:	4b28      	ldr	r3, [pc, #160]	@ (8004c60 <HAL_RCC_OscConfig+0x240>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	00db      	lsls	r3, r3, #3
 8004bca:	4925      	ldr	r1, [pc, #148]	@ (8004c60 <HAL_RCC_OscConfig+0x240>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	600b      	str	r3, [r1, #0]
 8004bd0:	e015      	b.n	8004bfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bd2:	4b24      	ldr	r3, [pc, #144]	@ (8004c64 <HAL_RCC_OscConfig+0x244>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd8:	f7ff fbe0 	bl	800439c <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004be0:	f7ff fbdc 	bl	800439c <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e187      	b.n	8004f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8004c60 <HAL_RCC_OscConfig+0x240>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1f0      	bne.n	8004be0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d036      	beq.n	8004c78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d016      	beq.n	8004c40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c12:	4b15      	ldr	r3, [pc, #84]	@ (8004c68 <HAL_RCC_OscConfig+0x248>)
 8004c14:	2201      	movs	r2, #1
 8004c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c18:	f7ff fbc0 	bl	800439c <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c20:	f7ff fbbc 	bl	800439c <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e167      	b.n	8004f02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c32:	4b0b      	ldr	r3, [pc, #44]	@ (8004c60 <HAL_RCC_OscConfig+0x240>)
 8004c34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f0      	beq.n	8004c20 <HAL_RCC_OscConfig+0x200>
 8004c3e:	e01b      	b.n	8004c78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c40:	4b09      	ldr	r3, [pc, #36]	@ (8004c68 <HAL_RCC_OscConfig+0x248>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c46:	f7ff fba9 	bl	800439c <HAL_GetTick>
 8004c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c4c:	e00e      	b.n	8004c6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c4e:	f7ff fba5 	bl	800439c <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d907      	bls.n	8004c6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e150      	b.n	8004f02 <HAL_RCC_OscConfig+0x4e2>
 8004c60:	40023800 	.word	0x40023800
 8004c64:	42470000 	.word	0x42470000
 8004c68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c6c:	4b88      	ldr	r3, [pc, #544]	@ (8004e90 <HAL_RCC_OscConfig+0x470>)
 8004c6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1ea      	bne.n	8004c4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 8097 	beq.w	8004db4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c86:	2300      	movs	r3, #0
 8004c88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c8a:	4b81      	ldr	r3, [pc, #516]	@ (8004e90 <HAL_RCC_OscConfig+0x470>)
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10f      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c96:	2300      	movs	r3, #0
 8004c98:	60bb      	str	r3, [r7, #8]
 8004c9a:	4b7d      	ldr	r3, [pc, #500]	@ (8004e90 <HAL_RCC_OscConfig+0x470>)
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9e:	4a7c      	ldr	r2, [pc, #496]	@ (8004e90 <HAL_RCC_OscConfig+0x470>)
 8004ca0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ca6:	4b7a      	ldr	r3, [pc, #488]	@ (8004e90 <HAL_RCC_OscConfig+0x470>)
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cae:	60bb      	str	r3, [r7, #8]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb6:	4b77      	ldr	r3, [pc, #476]	@ (8004e94 <HAL_RCC_OscConfig+0x474>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d118      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cc2:	4b74      	ldr	r3, [pc, #464]	@ (8004e94 <HAL_RCC_OscConfig+0x474>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a73      	ldr	r2, [pc, #460]	@ (8004e94 <HAL_RCC_OscConfig+0x474>)
 8004cc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cce:	f7ff fb65 	bl	800439c <HAL_GetTick>
 8004cd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cd6:	f7ff fb61 	bl	800439c <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e10c      	b.n	8004f02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce8:	4b6a      	ldr	r3, [pc, #424]	@ (8004e94 <HAL_RCC_OscConfig+0x474>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f0      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d106      	bne.n	8004d0a <HAL_RCC_OscConfig+0x2ea>
 8004cfc:	4b64      	ldr	r3, [pc, #400]	@ (8004e90 <HAL_RCC_OscConfig+0x470>)
 8004cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d00:	4a63      	ldr	r2, [pc, #396]	@ (8004e90 <HAL_RCC_OscConfig+0x470>)
 8004d02:	f043 0301 	orr.w	r3, r3, #1
 8004d06:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d08:	e01c      	b.n	8004d44 <HAL_RCC_OscConfig+0x324>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	2b05      	cmp	r3, #5
 8004d10:	d10c      	bne.n	8004d2c <HAL_RCC_OscConfig+0x30c>
 8004d12:	4b5f      	ldr	r3, [pc, #380]	@ (8004e90 <HAL_RCC_OscConfig+0x470>)
 8004d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d16:	4a5e      	ldr	r2, [pc, #376]	@ (8004e90 <HAL_RCC_OscConfig+0x470>)
 8004d18:	f043 0304 	orr.w	r3, r3, #4
 8004d1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d1e:	4b5c      	ldr	r3, [pc, #368]	@ (8004e90 <HAL_RCC_OscConfig+0x470>)
 8004d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d22:	4a5b      	ldr	r2, [pc, #364]	@ (8004e90 <HAL_RCC_OscConfig+0x470>)
 8004d24:	f043 0301 	orr.w	r3, r3, #1
 8004d28:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d2a:	e00b      	b.n	8004d44 <HAL_RCC_OscConfig+0x324>
 8004d2c:	4b58      	ldr	r3, [pc, #352]	@ (8004e90 <HAL_RCC_OscConfig+0x470>)
 8004d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d30:	4a57      	ldr	r2, [pc, #348]	@ (8004e90 <HAL_RCC_OscConfig+0x470>)
 8004d32:	f023 0301 	bic.w	r3, r3, #1
 8004d36:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d38:	4b55      	ldr	r3, [pc, #340]	@ (8004e90 <HAL_RCC_OscConfig+0x470>)
 8004d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d3c:	4a54      	ldr	r2, [pc, #336]	@ (8004e90 <HAL_RCC_OscConfig+0x470>)
 8004d3e:	f023 0304 	bic.w	r3, r3, #4
 8004d42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d015      	beq.n	8004d78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d4c:	f7ff fb26 	bl	800439c <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d52:	e00a      	b.n	8004d6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d54:	f7ff fb22 	bl	800439c <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e0cb      	b.n	8004f02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d6a:	4b49      	ldr	r3, [pc, #292]	@ (8004e90 <HAL_RCC_OscConfig+0x470>)
 8004d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d0ee      	beq.n	8004d54 <HAL_RCC_OscConfig+0x334>
 8004d76:	e014      	b.n	8004da2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d78:	f7ff fb10 	bl	800439c <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d7e:	e00a      	b.n	8004d96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d80:	f7ff fb0c 	bl	800439c <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e0b5      	b.n	8004f02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d96:	4b3e      	ldr	r3, [pc, #248]	@ (8004e90 <HAL_RCC_OscConfig+0x470>)
 8004d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1ee      	bne.n	8004d80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004da2:	7dfb      	ldrb	r3, [r7, #23]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d105      	bne.n	8004db4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004da8:	4b39      	ldr	r3, [pc, #228]	@ (8004e90 <HAL_RCC_OscConfig+0x470>)
 8004daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dac:	4a38      	ldr	r2, [pc, #224]	@ (8004e90 <HAL_RCC_OscConfig+0x470>)
 8004dae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004db2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 80a1 	beq.w	8004f00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dbe:	4b34      	ldr	r3, [pc, #208]	@ (8004e90 <HAL_RCC_OscConfig+0x470>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 030c 	and.w	r3, r3, #12
 8004dc6:	2b08      	cmp	r3, #8
 8004dc8:	d05c      	beq.n	8004e84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d141      	bne.n	8004e56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dd2:	4b31      	ldr	r3, [pc, #196]	@ (8004e98 <HAL_RCC_OscConfig+0x478>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd8:	f7ff fae0 	bl	800439c <HAL_GetTick>
 8004ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004de0:	f7ff fadc 	bl	800439c <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e087      	b.n	8004f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004df2:	4b27      	ldr	r3, [pc, #156]	@ (8004e90 <HAL_RCC_OscConfig+0x470>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1f0      	bne.n	8004de0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	69da      	ldr	r2, [r3, #28]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	431a      	orrs	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0c:	019b      	lsls	r3, r3, #6
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e14:	085b      	lsrs	r3, r3, #1
 8004e16:	3b01      	subs	r3, #1
 8004e18:	041b      	lsls	r3, r3, #16
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e20:	061b      	lsls	r3, r3, #24
 8004e22:	491b      	ldr	r1, [pc, #108]	@ (8004e90 <HAL_RCC_OscConfig+0x470>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e28:	4b1b      	ldr	r3, [pc, #108]	@ (8004e98 <HAL_RCC_OscConfig+0x478>)
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e2e:	f7ff fab5 	bl	800439c <HAL_GetTick>
 8004e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e34:	e008      	b.n	8004e48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e36:	f7ff fab1 	bl	800439c <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e05c      	b.n	8004f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e48:	4b11      	ldr	r3, [pc, #68]	@ (8004e90 <HAL_RCC_OscConfig+0x470>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0f0      	beq.n	8004e36 <HAL_RCC_OscConfig+0x416>
 8004e54:	e054      	b.n	8004f00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e56:	4b10      	ldr	r3, [pc, #64]	@ (8004e98 <HAL_RCC_OscConfig+0x478>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e5c:	f7ff fa9e 	bl	800439c <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e64:	f7ff fa9a 	bl	800439c <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e045      	b.n	8004f02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e76:	4b06      	ldr	r3, [pc, #24]	@ (8004e90 <HAL_RCC_OscConfig+0x470>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1f0      	bne.n	8004e64 <HAL_RCC_OscConfig+0x444>
 8004e82:	e03d      	b.n	8004f00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d107      	bne.n	8004e9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e038      	b.n	8004f02 <HAL_RCC_OscConfig+0x4e2>
 8004e90:	40023800 	.word	0x40023800
 8004e94:	40007000 	.word	0x40007000
 8004e98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8004f0c <HAL_RCC_OscConfig+0x4ec>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d028      	beq.n	8004efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d121      	bne.n	8004efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d11a      	bne.n	8004efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ecc:	4013      	ands	r3, r2
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ed2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d111      	bne.n	8004efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee2:	085b      	lsrs	r3, r3, #1
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d107      	bne.n	8004efc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d001      	beq.n	8004f00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e000      	b.n	8004f02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3718      	adds	r7, #24
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40023800 	.word	0x40023800

08004f10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e0cc      	b.n	80050be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f24:	4b68      	ldr	r3, [pc, #416]	@ (80050c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0307 	and.w	r3, r3, #7
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d90c      	bls.n	8004f4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f32:	4b65      	ldr	r3, [pc, #404]	@ (80050c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	b2d2      	uxtb	r2, r2
 8004f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f3a:	4b63      	ldr	r3, [pc, #396]	@ (80050c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0307 	and.w	r3, r3, #7
 8004f42:	683a      	ldr	r2, [r7, #0]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d001      	beq.n	8004f4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e0b8      	b.n	80050be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d020      	beq.n	8004f9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d005      	beq.n	8004f70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f64:	4b59      	ldr	r3, [pc, #356]	@ (80050cc <HAL_RCC_ClockConfig+0x1bc>)
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	4a58      	ldr	r2, [pc, #352]	@ (80050cc <HAL_RCC_ClockConfig+0x1bc>)
 8004f6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0308 	and.w	r3, r3, #8
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d005      	beq.n	8004f88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f7c:	4b53      	ldr	r3, [pc, #332]	@ (80050cc <HAL_RCC_ClockConfig+0x1bc>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	4a52      	ldr	r2, [pc, #328]	@ (80050cc <HAL_RCC_ClockConfig+0x1bc>)
 8004f82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f88:	4b50      	ldr	r3, [pc, #320]	@ (80050cc <HAL_RCC_ClockConfig+0x1bc>)
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	494d      	ldr	r1, [pc, #308]	@ (80050cc <HAL_RCC_ClockConfig+0x1bc>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d044      	beq.n	8005030 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d107      	bne.n	8004fbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fae:	4b47      	ldr	r3, [pc, #284]	@ (80050cc <HAL_RCC_ClockConfig+0x1bc>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d119      	bne.n	8004fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e07f      	b.n	80050be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d003      	beq.n	8004fce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fca:	2b03      	cmp	r3, #3
 8004fcc:	d107      	bne.n	8004fde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fce:	4b3f      	ldr	r3, [pc, #252]	@ (80050cc <HAL_RCC_ClockConfig+0x1bc>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d109      	bne.n	8004fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e06f      	b.n	80050be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fde:	4b3b      	ldr	r3, [pc, #236]	@ (80050cc <HAL_RCC_ClockConfig+0x1bc>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e067      	b.n	80050be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fee:	4b37      	ldr	r3, [pc, #220]	@ (80050cc <HAL_RCC_ClockConfig+0x1bc>)
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f023 0203 	bic.w	r2, r3, #3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	4934      	ldr	r1, [pc, #208]	@ (80050cc <HAL_RCC_ClockConfig+0x1bc>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005000:	f7ff f9cc 	bl	800439c <HAL_GetTick>
 8005004:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005006:	e00a      	b.n	800501e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005008:	f7ff f9c8 	bl	800439c <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005016:	4293      	cmp	r3, r2
 8005018:	d901      	bls.n	800501e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e04f      	b.n	80050be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800501e:	4b2b      	ldr	r3, [pc, #172]	@ (80050cc <HAL_RCC_ClockConfig+0x1bc>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f003 020c 	and.w	r2, r3, #12
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	429a      	cmp	r2, r3
 800502e:	d1eb      	bne.n	8005008 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005030:	4b25      	ldr	r3, [pc, #148]	@ (80050c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0307 	and.w	r3, r3, #7
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	429a      	cmp	r2, r3
 800503c:	d20c      	bcs.n	8005058 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800503e:	4b22      	ldr	r3, [pc, #136]	@ (80050c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	b2d2      	uxtb	r2, r2
 8005044:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005046:	4b20      	ldr	r3, [pc, #128]	@ (80050c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0307 	and.w	r3, r3, #7
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	429a      	cmp	r2, r3
 8005052:	d001      	beq.n	8005058 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e032      	b.n	80050be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b00      	cmp	r3, #0
 8005062:	d008      	beq.n	8005076 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005064:	4b19      	ldr	r3, [pc, #100]	@ (80050cc <HAL_RCC_ClockConfig+0x1bc>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	4916      	ldr	r1, [pc, #88]	@ (80050cc <HAL_RCC_ClockConfig+0x1bc>)
 8005072:	4313      	orrs	r3, r2
 8005074:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0308 	and.w	r3, r3, #8
 800507e:	2b00      	cmp	r3, #0
 8005080:	d009      	beq.n	8005096 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005082:	4b12      	ldr	r3, [pc, #72]	@ (80050cc <HAL_RCC_ClockConfig+0x1bc>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	00db      	lsls	r3, r3, #3
 8005090:	490e      	ldr	r1, [pc, #56]	@ (80050cc <HAL_RCC_ClockConfig+0x1bc>)
 8005092:	4313      	orrs	r3, r2
 8005094:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005096:	f000 f821 	bl	80050dc <HAL_RCC_GetSysClockFreq>
 800509a:	4602      	mov	r2, r0
 800509c:	4b0b      	ldr	r3, [pc, #44]	@ (80050cc <HAL_RCC_ClockConfig+0x1bc>)
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	091b      	lsrs	r3, r3, #4
 80050a2:	f003 030f 	and.w	r3, r3, #15
 80050a6:	490a      	ldr	r1, [pc, #40]	@ (80050d0 <HAL_RCC_ClockConfig+0x1c0>)
 80050a8:	5ccb      	ldrb	r3, [r1, r3]
 80050aa:	fa22 f303 	lsr.w	r3, r2, r3
 80050ae:	4a09      	ldr	r2, [pc, #36]	@ (80050d4 <HAL_RCC_ClockConfig+0x1c4>)
 80050b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050b2:	4b09      	ldr	r3, [pc, #36]	@ (80050d8 <HAL_RCC_ClockConfig+0x1c8>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7ff f92c 	bl	8004314 <HAL_InitTick>

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	40023c00 	.word	0x40023c00
 80050cc:	40023800 	.word	0x40023800
 80050d0:	08006fa8 	.word	0x08006fa8
 80050d4:	20000000 	.word	0x20000000
 80050d8:	20000018 	.word	0x20000018

080050dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050e0:	b094      	sub	sp, #80	@ 0x50
 80050e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80050e8:	2300      	movs	r3, #0
 80050ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050ec:	2300      	movs	r3, #0
 80050ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80050f0:	2300      	movs	r3, #0
 80050f2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050f4:	4b79      	ldr	r3, [pc, #484]	@ (80052dc <HAL_RCC_GetSysClockFreq+0x200>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f003 030c 	and.w	r3, r3, #12
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d00d      	beq.n	800511c <HAL_RCC_GetSysClockFreq+0x40>
 8005100:	2b08      	cmp	r3, #8
 8005102:	f200 80e1 	bhi.w	80052c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005106:	2b00      	cmp	r3, #0
 8005108:	d002      	beq.n	8005110 <HAL_RCC_GetSysClockFreq+0x34>
 800510a:	2b04      	cmp	r3, #4
 800510c:	d003      	beq.n	8005116 <HAL_RCC_GetSysClockFreq+0x3a>
 800510e:	e0db      	b.n	80052c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005110:	4b73      	ldr	r3, [pc, #460]	@ (80052e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005112:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005114:	e0db      	b.n	80052ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005116:	4b73      	ldr	r3, [pc, #460]	@ (80052e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005118:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800511a:	e0d8      	b.n	80052ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800511c:	4b6f      	ldr	r3, [pc, #444]	@ (80052dc <HAL_RCC_GetSysClockFreq+0x200>)
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005124:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005126:	4b6d      	ldr	r3, [pc, #436]	@ (80052dc <HAL_RCC_GetSysClockFreq+0x200>)
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d063      	beq.n	80051fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005132:	4b6a      	ldr	r3, [pc, #424]	@ (80052dc <HAL_RCC_GetSysClockFreq+0x200>)
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	099b      	lsrs	r3, r3, #6
 8005138:	2200      	movs	r2, #0
 800513a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800513c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800513e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005144:	633b      	str	r3, [r7, #48]	@ 0x30
 8005146:	2300      	movs	r3, #0
 8005148:	637b      	str	r3, [r7, #52]	@ 0x34
 800514a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800514e:	4622      	mov	r2, r4
 8005150:	462b      	mov	r3, r5
 8005152:	f04f 0000 	mov.w	r0, #0
 8005156:	f04f 0100 	mov.w	r1, #0
 800515a:	0159      	lsls	r1, r3, #5
 800515c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005160:	0150      	lsls	r0, r2, #5
 8005162:	4602      	mov	r2, r0
 8005164:	460b      	mov	r3, r1
 8005166:	4621      	mov	r1, r4
 8005168:	1a51      	subs	r1, r2, r1
 800516a:	6139      	str	r1, [r7, #16]
 800516c:	4629      	mov	r1, r5
 800516e:	eb63 0301 	sbc.w	r3, r3, r1
 8005172:	617b      	str	r3, [r7, #20]
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005180:	4659      	mov	r1, fp
 8005182:	018b      	lsls	r3, r1, #6
 8005184:	4651      	mov	r1, sl
 8005186:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800518a:	4651      	mov	r1, sl
 800518c:	018a      	lsls	r2, r1, #6
 800518e:	4651      	mov	r1, sl
 8005190:	ebb2 0801 	subs.w	r8, r2, r1
 8005194:	4659      	mov	r1, fp
 8005196:	eb63 0901 	sbc.w	r9, r3, r1
 800519a:	f04f 0200 	mov.w	r2, #0
 800519e:	f04f 0300 	mov.w	r3, #0
 80051a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051ae:	4690      	mov	r8, r2
 80051b0:	4699      	mov	r9, r3
 80051b2:	4623      	mov	r3, r4
 80051b4:	eb18 0303 	adds.w	r3, r8, r3
 80051b8:	60bb      	str	r3, [r7, #8]
 80051ba:	462b      	mov	r3, r5
 80051bc:	eb49 0303 	adc.w	r3, r9, r3
 80051c0:	60fb      	str	r3, [r7, #12]
 80051c2:	f04f 0200 	mov.w	r2, #0
 80051c6:	f04f 0300 	mov.w	r3, #0
 80051ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80051ce:	4629      	mov	r1, r5
 80051d0:	024b      	lsls	r3, r1, #9
 80051d2:	4621      	mov	r1, r4
 80051d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80051d8:	4621      	mov	r1, r4
 80051da:	024a      	lsls	r2, r1, #9
 80051dc:	4610      	mov	r0, r2
 80051de:	4619      	mov	r1, r3
 80051e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051e2:	2200      	movs	r2, #0
 80051e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80051ec:	f7fb f840 	bl	8000270 <__aeabi_uldivmod>
 80051f0:	4602      	mov	r2, r0
 80051f2:	460b      	mov	r3, r1
 80051f4:	4613      	mov	r3, r2
 80051f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051f8:	e058      	b.n	80052ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051fa:	4b38      	ldr	r3, [pc, #224]	@ (80052dc <HAL_RCC_GetSysClockFreq+0x200>)
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	099b      	lsrs	r3, r3, #6
 8005200:	2200      	movs	r2, #0
 8005202:	4618      	mov	r0, r3
 8005204:	4611      	mov	r1, r2
 8005206:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800520a:	623b      	str	r3, [r7, #32]
 800520c:	2300      	movs	r3, #0
 800520e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005210:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005214:	4642      	mov	r2, r8
 8005216:	464b      	mov	r3, r9
 8005218:	f04f 0000 	mov.w	r0, #0
 800521c:	f04f 0100 	mov.w	r1, #0
 8005220:	0159      	lsls	r1, r3, #5
 8005222:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005226:	0150      	lsls	r0, r2, #5
 8005228:	4602      	mov	r2, r0
 800522a:	460b      	mov	r3, r1
 800522c:	4641      	mov	r1, r8
 800522e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005232:	4649      	mov	r1, r9
 8005234:	eb63 0b01 	sbc.w	fp, r3, r1
 8005238:	f04f 0200 	mov.w	r2, #0
 800523c:	f04f 0300 	mov.w	r3, #0
 8005240:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005244:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005248:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800524c:	ebb2 040a 	subs.w	r4, r2, sl
 8005250:	eb63 050b 	sbc.w	r5, r3, fp
 8005254:	f04f 0200 	mov.w	r2, #0
 8005258:	f04f 0300 	mov.w	r3, #0
 800525c:	00eb      	lsls	r3, r5, #3
 800525e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005262:	00e2      	lsls	r2, r4, #3
 8005264:	4614      	mov	r4, r2
 8005266:	461d      	mov	r5, r3
 8005268:	4643      	mov	r3, r8
 800526a:	18e3      	adds	r3, r4, r3
 800526c:	603b      	str	r3, [r7, #0]
 800526e:	464b      	mov	r3, r9
 8005270:	eb45 0303 	adc.w	r3, r5, r3
 8005274:	607b      	str	r3, [r7, #4]
 8005276:	f04f 0200 	mov.w	r2, #0
 800527a:	f04f 0300 	mov.w	r3, #0
 800527e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005282:	4629      	mov	r1, r5
 8005284:	028b      	lsls	r3, r1, #10
 8005286:	4621      	mov	r1, r4
 8005288:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800528c:	4621      	mov	r1, r4
 800528e:	028a      	lsls	r2, r1, #10
 8005290:	4610      	mov	r0, r2
 8005292:	4619      	mov	r1, r3
 8005294:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005296:	2200      	movs	r2, #0
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	61fa      	str	r2, [r7, #28]
 800529c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052a0:	f7fa ffe6 	bl	8000270 <__aeabi_uldivmod>
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	4613      	mov	r3, r2
 80052aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052ac:	4b0b      	ldr	r3, [pc, #44]	@ (80052dc <HAL_RCC_GetSysClockFreq+0x200>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	0c1b      	lsrs	r3, r3, #16
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	3301      	adds	r3, #1
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80052bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80052be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052c6:	e002      	b.n	80052ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052c8:	4b05      	ldr	r3, [pc, #20]	@ (80052e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80052ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3750      	adds	r7, #80	@ 0x50
 80052d4:	46bd      	mov	sp, r7
 80052d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052da:	bf00      	nop
 80052dc:	40023800 	.word	0x40023800
 80052e0:	00f42400 	.word	0x00f42400
 80052e4:	007a1200 	.word	0x007a1200

080052e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e041      	b.n	800537e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d106      	bne.n	8005314 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7fe f846 	bl	80033a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2202      	movs	r2, #2
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	3304      	adds	r3, #4
 8005324:	4619      	mov	r1, r3
 8005326:	4610      	mov	r0, r2
 8005328:	f000 fcd2 	bl	8005cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
	...

08005388 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b01      	cmp	r3, #1
 800539a:	d001      	beq.n	80053a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e04e      	b.n	800543e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2202      	movs	r2, #2
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68da      	ldr	r2, [r3, #12]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f042 0201 	orr.w	r2, r2, #1
 80053b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a23      	ldr	r2, [pc, #140]	@ (800544c <HAL_TIM_Base_Start_IT+0xc4>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d022      	beq.n	8005408 <HAL_TIM_Base_Start_IT+0x80>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053ca:	d01d      	beq.n	8005408 <HAL_TIM_Base_Start_IT+0x80>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a1f      	ldr	r2, [pc, #124]	@ (8005450 <HAL_TIM_Base_Start_IT+0xc8>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d018      	beq.n	8005408 <HAL_TIM_Base_Start_IT+0x80>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a1e      	ldr	r2, [pc, #120]	@ (8005454 <HAL_TIM_Base_Start_IT+0xcc>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d013      	beq.n	8005408 <HAL_TIM_Base_Start_IT+0x80>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005458 <HAL_TIM_Base_Start_IT+0xd0>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d00e      	beq.n	8005408 <HAL_TIM_Base_Start_IT+0x80>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a1b      	ldr	r2, [pc, #108]	@ (800545c <HAL_TIM_Base_Start_IT+0xd4>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d009      	beq.n	8005408 <HAL_TIM_Base_Start_IT+0x80>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a19      	ldr	r2, [pc, #100]	@ (8005460 <HAL_TIM_Base_Start_IT+0xd8>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d004      	beq.n	8005408 <HAL_TIM_Base_Start_IT+0x80>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a18      	ldr	r2, [pc, #96]	@ (8005464 <HAL_TIM_Base_Start_IT+0xdc>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d111      	bne.n	800542c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f003 0307 	and.w	r3, r3, #7
 8005412:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2b06      	cmp	r3, #6
 8005418:	d010      	beq.n	800543c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f042 0201 	orr.w	r2, r2, #1
 8005428:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800542a:	e007      	b.n	800543c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0201 	orr.w	r2, r2, #1
 800543a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	40010000 	.word	0x40010000
 8005450:	40000400 	.word	0x40000400
 8005454:	40000800 	.word	0x40000800
 8005458:	40000c00 	.word	0x40000c00
 800545c:	40010400 	.word	0x40010400
 8005460:	40014000 	.word	0x40014000
 8005464:	40001800 	.word	0x40001800

08005468 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e041      	b.n	80054fe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d106      	bne.n	8005494 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f839 	bl	8005506 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2202      	movs	r2, #2
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3304      	adds	r3, #4
 80054a4:	4619      	mov	r1, r3
 80054a6:	4610      	mov	r0, r2
 80054a8:	f000 fc12 	bl	8005cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3708      	adds	r7, #8
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800550e:	bf00      	nop
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
	...

0800551c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d109      	bne.n	8005540 <HAL_TIM_PWM_Start+0x24>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b01      	cmp	r3, #1
 8005536:	bf14      	ite	ne
 8005538:	2301      	movne	r3, #1
 800553a:	2300      	moveq	r3, #0
 800553c:	b2db      	uxtb	r3, r3
 800553e:	e022      	b.n	8005586 <HAL_TIM_PWM_Start+0x6a>
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	2b04      	cmp	r3, #4
 8005544:	d109      	bne.n	800555a <HAL_TIM_PWM_Start+0x3e>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b01      	cmp	r3, #1
 8005550:	bf14      	ite	ne
 8005552:	2301      	movne	r3, #1
 8005554:	2300      	moveq	r3, #0
 8005556:	b2db      	uxtb	r3, r3
 8005558:	e015      	b.n	8005586 <HAL_TIM_PWM_Start+0x6a>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b08      	cmp	r3, #8
 800555e:	d109      	bne.n	8005574 <HAL_TIM_PWM_Start+0x58>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b01      	cmp	r3, #1
 800556a:	bf14      	ite	ne
 800556c:	2301      	movne	r3, #1
 800556e:	2300      	moveq	r3, #0
 8005570:	b2db      	uxtb	r3, r3
 8005572:	e008      	b.n	8005586 <HAL_TIM_PWM_Start+0x6a>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b01      	cmp	r3, #1
 800557e:	bf14      	ite	ne
 8005580:	2301      	movne	r3, #1
 8005582:	2300      	moveq	r3, #0
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e07c      	b.n	8005688 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d104      	bne.n	800559e <HAL_TIM_PWM_Start+0x82>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800559c:	e013      	b.n	80055c6 <HAL_TIM_PWM_Start+0xaa>
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b04      	cmp	r3, #4
 80055a2:	d104      	bne.n	80055ae <HAL_TIM_PWM_Start+0x92>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2202      	movs	r2, #2
 80055a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055ac:	e00b      	b.n	80055c6 <HAL_TIM_PWM_Start+0xaa>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	d104      	bne.n	80055be <HAL_TIM_PWM_Start+0xa2>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055bc:	e003      	b.n	80055c6 <HAL_TIM_PWM_Start+0xaa>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2202      	movs	r2, #2
 80055c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2201      	movs	r2, #1
 80055cc:	6839      	ldr	r1, [r7, #0]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 fe74 	bl	80062bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a2d      	ldr	r2, [pc, #180]	@ (8005690 <HAL_TIM_PWM_Start+0x174>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d004      	beq.n	80055e8 <HAL_TIM_PWM_Start+0xcc>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a2c      	ldr	r2, [pc, #176]	@ (8005694 <HAL_TIM_PWM_Start+0x178>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d101      	bne.n	80055ec <HAL_TIM_PWM_Start+0xd0>
 80055e8:	2301      	movs	r3, #1
 80055ea:	e000      	b.n	80055ee <HAL_TIM_PWM_Start+0xd2>
 80055ec:	2300      	movs	r3, #0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d007      	beq.n	8005602 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005600:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a22      	ldr	r2, [pc, #136]	@ (8005690 <HAL_TIM_PWM_Start+0x174>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d022      	beq.n	8005652 <HAL_TIM_PWM_Start+0x136>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005614:	d01d      	beq.n	8005652 <HAL_TIM_PWM_Start+0x136>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a1f      	ldr	r2, [pc, #124]	@ (8005698 <HAL_TIM_PWM_Start+0x17c>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d018      	beq.n	8005652 <HAL_TIM_PWM_Start+0x136>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a1d      	ldr	r2, [pc, #116]	@ (800569c <HAL_TIM_PWM_Start+0x180>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d013      	beq.n	8005652 <HAL_TIM_PWM_Start+0x136>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a1c      	ldr	r2, [pc, #112]	@ (80056a0 <HAL_TIM_PWM_Start+0x184>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d00e      	beq.n	8005652 <HAL_TIM_PWM_Start+0x136>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a16      	ldr	r2, [pc, #88]	@ (8005694 <HAL_TIM_PWM_Start+0x178>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d009      	beq.n	8005652 <HAL_TIM_PWM_Start+0x136>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a18      	ldr	r2, [pc, #96]	@ (80056a4 <HAL_TIM_PWM_Start+0x188>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d004      	beq.n	8005652 <HAL_TIM_PWM_Start+0x136>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a16      	ldr	r2, [pc, #88]	@ (80056a8 <HAL_TIM_PWM_Start+0x18c>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d111      	bne.n	8005676 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2b06      	cmp	r3, #6
 8005662:	d010      	beq.n	8005686 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f042 0201 	orr.w	r2, r2, #1
 8005672:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005674:	e007      	b.n	8005686 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f042 0201 	orr.w	r2, r2, #1
 8005684:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	40010000 	.word	0x40010000
 8005694:	40010400 	.word	0x40010400
 8005698:	40000400 	.word	0x40000400
 800569c:	40000800 	.word	0x40000800
 80056a0:	40000c00 	.word	0x40000c00
 80056a4:	40014000 	.word	0x40014000
 80056a8:	40001800 	.word	0x40001800

080056ac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2200      	movs	r2, #0
 80056bc:	6839      	ldr	r1, [r7, #0]
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 fdfc 	bl	80062bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a2e      	ldr	r2, [pc, #184]	@ (8005784 <HAL_TIM_PWM_Stop+0xd8>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d004      	beq.n	80056d8 <HAL_TIM_PWM_Stop+0x2c>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a2d      	ldr	r2, [pc, #180]	@ (8005788 <HAL_TIM_PWM_Stop+0xdc>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d101      	bne.n	80056dc <HAL_TIM_PWM_Stop+0x30>
 80056d8:	2301      	movs	r3, #1
 80056da:	e000      	b.n	80056de <HAL_TIM_PWM_Stop+0x32>
 80056dc:	2300      	movs	r3, #0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d017      	beq.n	8005712 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	6a1a      	ldr	r2, [r3, #32]
 80056e8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80056ec:	4013      	ands	r3, r2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10f      	bne.n	8005712 <HAL_TIM_PWM_Stop+0x66>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6a1a      	ldr	r2, [r3, #32]
 80056f8:	f240 4344 	movw	r3, #1092	@ 0x444
 80056fc:	4013      	ands	r3, r2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d107      	bne.n	8005712 <HAL_TIM_PWM_Stop+0x66>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005710:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6a1a      	ldr	r2, [r3, #32]
 8005718:	f241 1311 	movw	r3, #4369	@ 0x1111
 800571c:	4013      	ands	r3, r2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10f      	bne.n	8005742 <HAL_TIM_PWM_Stop+0x96>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	6a1a      	ldr	r2, [r3, #32]
 8005728:	f240 4344 	movw	r3, #1092	@ 0x444
 800572c:	4013      	ands	r3, r2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d107      	bne.n	8005742 <HAL_TIM_PWM_Stop+0x96>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0201 	bic.w	r2, r2, #1
 8005740:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d104      	bne.n	8005752 <HAL_TIM_PWM_Stop+0xa6>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005750:	e013      	b.n	800577a <HAL_TIM_PWM_Stop+0xce>
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2b04      	cmp	r3, #4
 8005756:	d104      	bne.n	8005762 <HAL_TIM_PWM_Stop+0xb6>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005760:	e00b      	b.n	800577a <HAL_TIM_PWM_Stop+0xce>
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b08      	cmp	r3, #8
 8005766:	d104      	bne.n	8005772 <HAL_TIM_PWM_Stop+0xc6>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005770:	e003      	b.n	800577a <HAL_TIM_PWM_Stop+0xce>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3708      	adds	r7, #8
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	40010000 	.word	0x40010000
 8005788:	40010400 	.word	0x40010400

0800578c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d020      	beq.n	80057f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01b      	beq.n	80057f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f06f 0202 	mvn.w	r2, #2
 80057c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	f003 0303 	and.w	r3, r3, #3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fa5b 	bl	8005c92 <HAL_TIM_IC_CaptureCallback>
 80057dc:	e005      	b.n	80057ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 fa4d 	bl	8005c7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fa5e 	bl	8005ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	f003 0304 	and.w	r3, r3, #4
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d020      	beq.n	800583c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f003 0304 	and.w	r3, r3, #4
 8005800:	2b00      	cmp	r3, #0
 8005802:	d01b      	beq.n	800583c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f06f 0204 	mvn.w	r2, #4
 800580c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2202      	movs	r2, #2
 8005812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 fa35 	bl	8005c92 <HAL_TIM_IC_CaptureCallback>
 8005828:	e005      	b.n	8005836 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 fa27 	bl	8005c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 fa38 	bl	8005ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f003 0308 	and.w	r3, r3, #8
 8005842:	2b00      	cmp	r3, #0
 8005844:	d020      	beq.n	8005888 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f003 0308 	and.w	r3, r3, #8
 800584c:	2b00      	cmp	r3, #0
 800584e:	d01b      	beq.n	8005888 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f06f 0208 	mvn.w	r2, #8
 8005858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2204      	movs	r2, #4
 800585e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	f003 0303 	and.w	r3, r3, #3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 fa0f 	bl	8005c92 <HAL_TIM_IC_CaptureCallback>
 8005874:	e005      	b.n	8005882 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 fa01 	bl	8005c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 fa12 	bl	8005ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f003 0310 	and.w	r3, r3, #16
 800588e:	2b00      	cmp	r3, #0
 8005890:	d020      	beq.n	80058d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f003 0310 	and.w	r3, r3, #16
 8005898:	2b00      	cmp	r3, #0
 800589a:	d01b      	beq.n	80058d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f06f 0210 	mvn.w	r2, #16
 80058a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2208      	movs	r2, #8
 80058aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f9e9 	bl	8005c92 <HAL_TIM_IC_CaptureCallback>
 80058c0:	e005      	b.n	80058ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f9db 	bl	8005c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 f9ec 	bl	8005ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00c      	beq.n	80058f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d007      	beq.n	80058f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f06f 0201 	mvn.w	r2, #1
 80058f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7fd fada 	bl	8002eac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00c      	beq.n	800591c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005908:	2b00      	cmp	r3, #0
 800590a:	d007      	beq.n	800591c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 fd7c 	bl	8006414 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00c      	beq.n	8005940 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800592c:	2b00      	cmp	r3, #0
 800592e:	d007      	beq.n	8005940 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f9bd 	bl	8005cba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	f003 0320 	and.w	r3, r3, #32
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00c      	beq.n	8005964 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f003 0320 	and.w	r3, r3, #32
 8005950:	2b00      	cmp	r3, #0
 8005952:	d007      	beq.n	8005964 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f06f 0220 	mvn.w	r2, #32
 800595c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 fd4e 	bl	8006400 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005964:	bf00      	nop
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b086      	sub	sp, #24
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005978:	2300      	movs	r3, #0
 800597a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005982:	2b01      	cmp	r3, #1
 8005984:	d101      	bne.n	800598a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005986:	2302      	movs	r3, #2
 8005988:	e0ae      	b.n	8005ae8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b0c      	cmp	r3, #12
 8005996:	f200 809f 	bhi.w	8005ad8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800599a:	a201      	add	r2, pc, #4	@ (adr r2, 80059a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800599c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a0:	080059d5 	.word	0x080059d5
 80059a4:	08005ad9 	.word	0x08005ad9
 80059a8:	08005ad9 	.word	0x08005ad9
 80059ac:	08005ad9 	.word	0x08005ad9
 80059b0:	08005a15 	.word	0x08005a15
 80059b4:	08005ad9 	.word	0x08005ad9
 80059b8:	08005ad9 	.word	0x08005ad9
 80059bc:	08005ad9 	.word	0x08005ad9
 80059c0:	08005a57 	.word	0x08005a57
 80059c4:	08005ad9 	.word	0x08005ad9
 80059c8:	08005ad9 	.word	0x08005ad9
 80059cc:	08005ad9 	.word	0x08005ad9
 80059d0:	08005a97 	.word	0x08005a97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68b9      	ldr	r1, [r7, #8]
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 fa24 	bl	8005e28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	699a      	ldr	r2, [r3, #24]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f042 0208 	orr.w	r2, r2, #8
 80059ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	699a      	ldr	r2, [r3, #24]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f022 0204 	bic.w	r2, r2, #4
 80059fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6999      	ldr	r1, [r3, #24]
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	691a      	ldr	r2, [r3, #16]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	619a      	str	r2, [r3, #24]
      break;
 8005a12:	e064      	b.n	8005ade <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68b9      	ldr	r1, [r7, #8]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 fa74 	bl	8005f08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	699a      	ldr	r2, [r3, #24]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	699a      	ldr	r2, [r3, #24]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6999      	ldr	r1, [r3, #24]
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	021a      	lsls	r2, r3, #8
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	619a      	str	r2, [r3, #24]
      break;
 8005a54:	e043      	b.n	8005ade <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68b9      	ldr	r1, [r7, #8]
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f000 fac9 	bl	8005ff4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	69da      	ldr	r2, [r3, #28]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f042 0208 	orr.w	r2, r2, #8
 8005a70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	69da      	ldr	r2, [r3, #28]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 0204 	bic.w	r2, r2, #4
 8005a80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	69d9      	ldr	r1, [r3, #28]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	691a      	ldr	r2, [r3, #16]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	61da      	str	r2, [r3, #28]
      break;
 8005a94:	e023      	b.n	8005ade <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68b9      	ldr	r1, [r7, #8]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f000 fb1d 	bl	80060dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	69da      	ldr	r2, [r3, #28]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ab0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	69da      	ldr	r2, [r3, #28]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ac0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	69d9      	ldr	r1, [r3, #28]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	021a      	lsls	r2, r3, #8
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	61da      	str	r2, [r3, #28]
      break;
 8005ad6:	e002      	b.n	8005ade <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	75fb      	strb	r3, [r7, #23]
      break;
 8005adc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3718      	adds	r7, #24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d101      	bne.n	8005b0c <HAL_TIM_ConfigClockSource+0x1c>
 8005b08:	2302      	movs	r3, #2
 8005b0a:	e0b4      	b.n	8005c76 <HAL_TIM_ConfigClockSource+0x186>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2202      	movs	r2, #2
 8005b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005b2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b44:	d03e      	beq.n	8005bc4 <HAL_TIM_ConfigClockSource+0xd4>
 8005b46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b4a:	f200 8087 	bhi.w	8005c5c <HAL_TIM_ConfigClockSource+0x16c>
 8005b4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b52:	f000 8086 	beq.w	8005c62 <HAL_TIM_ConfigClockSource+0x172>
 8005b56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b5a:	d87f      	bhi.n	8005c5c <HAL_TIM_ConfigClockSource+0x16c>
 8005b5c:	2b70      	cmp	r3, #112	@ 0x70
 8005b5e:	d01a      	beq.n	8005b96 <HAL_TIM_ConfigClockSource+0xa6>
 8005b60:	2b70      	cmp	r3, #112	@ 0x70
 8005b62:	d87b      	bhi.n	8005c5c <HAL_TIM_ConfigClockSource+0x16c>
 8005b64:	2b60      	cmp	r3, #96	@ 0x60
 8005b66:	d050      	beq.n	8005c0a <HAL_TIM_ConfigClockSource+0x11a>
 8005b68:	2b60      	cmp	r3, #96	@ 0x60
 8005b6a:	d877      	bhi.n	8005c5c <HAL_TIM_ConfigClockSource+0x16c>
 8005b6c:	2b50      	cmp	r3, #80	@ 0x50
 8005b6e:	d03c      	beq.n	8005bea <HAL_TIM_ConfigClockSource+0xfa>
 8005b70:	2b50      	cmp	r3, #80	@ 0x50
 8005b72:	d873      	bhi.n	8005c5c <HAL_TIM_ConfigClockSource+0x16c>
 8005b74:	2b40      	cmp	r3, #64	@ 0x40
 8005b76:	d058      	beq.n	8005c2a <HAL_TIM_ConfigClockSource+0x13a>
 8005b78:	2b40      	cmp	r3, #64	@ 0x40
 8005b7a:	d86f      	bhi.n	8005c5c <HAL_TIM_ConfigClockSource+0x16c>
 8005b7c:	2b30      	cmp	r3, #48	@ 0x30
 8005b7e:	d064      	beq.n	8005c4a <HAL_TIM_ConfigClockSource+0x15a>
 8005b80:	2b30      	cmp	r3, #48	@ 0x30
 8005b82:	d86b      	bhi.n	8005c5c <HAL_TIM_ConfigClockSource+0x16c>
 8005b84:	2b20      	cmp	r3, #32
 8005b86:	d060      	beq.n	8005c4a <HAL_TIM_ConfigClockSource+0x15a>
 8005b88:	2b20      	cmp	r3, #32
 8005b8a:	d867      	bhi.n	8005c5c <HAL_TIM_ConfigClockSource+0x16c>
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d05c      	beq.n	8005c4a <HAL_TIM_ConfigClockSource+0x15a>
 8005b90:	2b10      	cmp	r3, #16
 8005b92:	d05a      	beq.n	8005c4a <HAL_TIM_ConfigClockSource+0x15a>
 8005b94:	e062      	b.n	8005c5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ba6:	f000 fb69 	bl	800627c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005bb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	609a      	str	r2, [r3, #8]
      break;
 8005bc2:	e04f      	b.n	8005c64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bd4:	f000 fb52 	bl	800627c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689a      	ldr	r2, [r3, #8]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005be6:	609a      	str	r2, [r3, #8]
      break;
 8005be8:	e03c      	b.n	8005c64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	f000 fac6 	bl	8006188 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2150      	movs	r1, #80	@ 0x50
 8005c02:	4618      	mov	r0, r3
 8005c04:	f000 fb1f 	bl	8006246 <TIM_ITRx_SetConfig>
      break;
 8005c08:	e02c      	b.n	8005c64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c16:	461a      	mov	r2, r3
 8005c18:	f000 fae5 	bl	80061e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2160      	movs	r1, #96	@ 0x60
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 fb0f 	bl	8006246 <TIM_ITRx_SetConfig>
      break;
 8005c28:	e01c      	b.n	8005c64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c36:	461a      	mov	r2, r3
 8005c38:	f000 faa6 	bl	8006188 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2140      	movs	r1, #64	@ 0x40
 8005c42:	4618      	mov	r0, r3
 8005c44:	f000 faff 	bl	8006246 <TIM_ITRx_SetConfig>
      break;
 8005c48:	e00c      	b.n	8005c64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4619      	mov	r1, r3
 8005c54:	4610      	mov	r0, r2
 8005c56:	f000 faf6 	bl	8006246 <TIM_ITRx_SetConfig>
      break;
 8005c5a:	e003      	b.n	8005c64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c60:	e000      	b.n	8005c64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c86:	bf00      	nop
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b083      	sub	sp, #12
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c9a:	bf00      	nop
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b083      	sub	sp, #12
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cae:	bf00      	nop
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b083      	sub	sp, #12
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cc2:	bf00      	nop
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
	...

08005cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a46      	ldr	r2, [pc, #280]	@ (8005dfc <TIM_Base_SetConfig+0x12c>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d013      	beq.n	8005d10 <TIM_Base_SetConfig+0x40>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cee:	d00f      	beq.n	8005d10 <TIM_Base_SetConfig+0x40>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a43      	ldr	r2, [pc, #268]	@ (8005e00 <TIM_Base_SetConfig+0x130>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d00b      	beq.n	8005d10 <TIM_Base_SetConfig+0x40>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a42      	ldr	r2, [pc, #264]	@ (8005e04 <TIM_Base_SetConfig+0x134>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d007      	beq.n	8005d10 <TIM_Base_SetConfig+0x40>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a41      	ldr	r2, [pc, #260]	@ (8005e08 <TIM_Base_SetConfig+0x138>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d003      	beq.n	8005d10 <TIM_Base_SetConfig+0x40>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a40      	ldr	r2, [pc, #256]	@ (8005e0c <TIM_Base_SetConfig+0x13c>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d108      	bne.n	8005d22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a35      	ldr	r2, [pc, #212]	@ (8005dfc <TIM_Base_SetConfig+0x12c>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d02b      	beq.n	8005d82 <TIM_Base_SetConfig+0xb2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d30:	d027      	beq.n	8005d82 <TIM_Base_SetConfig+0xb2>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a32      	ldr	r2, [pc, #200]	@ (8005e00 <TIM_Base_SetConfig+0x130>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d023      	beq.n	8005d82 <TIM_Base_SetConfig+0xb2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a31      	ldr	r2, [pc, #196]	@ (8005e04 <TIM_Base_SetConfig+0x134>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d01f      	beq.n	8005d82 <TIM_Base_SetConfig+0xb2>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a30      	ldr	r2, [pc, #192]	@ (8005e08 <TIM_Base_SetConfig+0x138>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d01b      	beq.n	8005d82 <TIM_Base_SetConfig+0xb2>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a2f      	ldr	r2, [pc, #188]	@ (8005e0c <TIM_Base_SetConfig+0x13c>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d017      	beq.n	8005d82 <TIM_Base_SetConfig+0xb2>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a2e      	ldr	r2, [pc, #184]	@ (8005e10 <TIM_Base_SetConfig+0x140>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d013      	beq.n	8005d82 <TIM_Base_SetConfig+0xb2>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a2d      	ldr	r2, [pc, #180]	@ (8005e14 <TIM_Base_SetConfig+0x144>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d00f      	beq.n	8005d82 <TIM_Base_SetConfig+0xb2>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a2c      	ldr	r2, [pc, #176]	@ (8005e18 <TIM_Base_SetConfig+0x148>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d00b      	beq.n	8005d82 <TIM_Base_SetConfig+0xb2>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a2b      	ldr	r2, [pc, #172]	@ (8005e1c <TIM_Base_SetConfig+0x14c>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d007      	beq.n	8005d82 <TIM_Base_SetConfig+0xb2>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a2a      	ldr	r2, [pc, #168]	@ (8005e20 <TIM_Base_SetConfig+0x150>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d003      	beq.n	8005d82 <TIM_Base_SetConfig+0xb2>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a29      	ldr	r2, [pc, #164]	@ (8005e24 <TIM_Base_SetConfig+0x154>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d108      	bne.n	8005d94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	695b      	ldr	r3, [r3, #20]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	689a      	ldr	r2, [r3, #8]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a10      	ldr	r2, [pc, #64]	@ (8005dfc <TIM_Base_SetConfig+0x12c>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d003      	beq.n	8005dc8 <TIM_Base_SetConfig+0xf8>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a12      	ldr	r2, [pc, #72]	@ (8005e0c <TIM_Base_SetConfig+0x13c>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d103      	bne.n	8005dd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	691a      	ldr	r2, [r3, #16]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d105      	bne.n	8005dee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	f023 0201 	bic.w	r2, r3, #1
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	611a      	str	r2, [r3, #16]
  }
}
 8005dee:	bf00      	nop
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	40010000 	.word	0x40010000
 8005e00:	40000400 	.word	0x40000400
 8005e04:	40000800 	.word	0x40000800
 8005e08:	40000c00 	.word	0x40000c00
 8005e0c:	40010400 	.word	0x40010400
 8005e10:	40014000 	.word	0x40014000
 8005e14:	40014400 	.word	0x40014400
 8005e18:	40014800 	.word	0x40014800
 8005e1c:	40001800 	.word	0x40001800
 8005e20:	40001c00 	.word	0x40001c00
 8005e24:	40002000 	.word	0x40002000

08005e28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a1b      	ldr	r3, [r3, #32]
 8005e3c:	f023 0201 	bic.w	r2, r3, #1
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f023 0303 	bic.w	r3, r3, #3
 8005e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f023 0302 	bic.w	r3, r3, #2
 8005e70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a20      	ldr	r2, [pc, #128]	@ (8005f00 <TIM_OC1_SetConfig+0xd8>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d003      	beq.n	8005e8c <TIM_OC1_SetConfig+0x64>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a1f      	ldr	r2, [pc, #124]	@ (8005f04 <TIM_OC1_SetConfig+0xdc>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d10c      	bne.n	8005ea6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	f023 0308 	bic.w	r3, r3, #8
 8005e92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	f023 0304 	bic.w	r3, r3, #4
 8005ea4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a15      	ldr	r2, [pc, #84]	@ (8005f00 <TIM_OC1_SetConfig+0xd8>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d003      	beq.n	8005eb6 <TIM_OC1_SetConfig+0x8e>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a14      	ldr	r2, [pc, #80]	@ (8005f04 <TIM_OC1_SetConfig+0xdc>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d111      	bne.n	8005eda <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ebc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	685a      	ldr	r2, [r3, #4]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	621a      	str	r2, [r3, #32]
}
 8005ef4:	bf00      	nop
 8005ef6:	371c      	adds	r7, #28
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	40010000 	.word	0x40010000
 8005f04:	40010400 	.word	0x40010400

08005f08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b087      	sub	sp, #28
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a1b      	ldr	r3, [r3, #32]
 8005f1c:	f023 0210 	bic.w	r2, r3, #16
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	021b      	lsls	r3, r3, #8
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f023 0320 	bic.w	r3, r3, #32
 8005f52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	011b      	lsls	r3, r3, #4
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a22      	ldr	r2, [pc, #136]	@ (8005fec <TIM_OC2_SetConfig+0xe4>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d003      	beq.n	8005f70 <TIM_OC2_SetConfig+0x68>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a21      	ldr	r2, [pc, #132]	@ (8005ff0 <TIM_OC2_SetConfig+0xe8>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d10d      	bne.n	8005f8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	011b      	lsls	r3, r3, #4
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a17      	ldr	r2, [pc, #92]	@ (8005fec <TIM_OC2_SetConfig+0xe4>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d003      	beq.n	8005f9c <TIM_OC2_SetConfig+0x94>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a16      	ldr	r2, [pc, #88]	@ (8005ff0 <TIM_OC2_SetConfig+0xe8>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d113      	bne.n	8005fc4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005fa2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005faa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	685a      	ldr	r2, [r3, #4]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	621a      	str	r2, [r3, #32]
}
 8005fde:	bf00      	nop
 8005fe0:	371c      	adds	r7, #28
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	40010000 	.word	0x40010000
 8005ff0:	40010400 	.word	0x40010400

08005ff4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b087      	sub	sp, #28
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a1b      	ldr	r3, [r3, #32]
 8006008:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	69db      	ldr	r3, [r3, #28]
 800601a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f023 0303 	bic.w	r3, r3, #3
 800602a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	4313      	orrs	r3, r2
 8006034:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800603c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	021b      	lsls	r3, r3, #8
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	4313      	orrs	r3, r2
 8006048:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a21      	ldr	r2, [pc, #132]	@ (80060d4 <TIM_OC3_SetConfig+0xe0>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d003      	beq.n	800605a <TIM_OC3_SetConfig+0x66>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a20      	ldr	r2, [pc, #128]	@ (80060d8 <TIM_OC3_SetConfig+0xe4>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d10d      	bne.n	8006076 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006060:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	021b      	lsls	r3, r3, #8
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	4313      	orrs	r3, r2
 800606c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006074:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a16      	ldr	r2, [pc, #88]	@ (80060d4 <TIM_OC3_SetConfig+0xe0>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d003      	beq.n	8006086 <TIM_OC3_SetConfig+0x92>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a15      	ldr	r2, [pc, #84]	@ (80060d8 <TIM_OC3_SetConfig+0xe4>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d113      	bne.n	80060ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800608c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006094:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	011b      	lsls	r3, r3, #4
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	4313      	orrs	r3, r2
 80060a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	011b      	lsls	r3, r3, #4
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	685a      	ldr	r2, [r3, #4]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	697a      	ldr	r2, [r7, #20]
 80060c6:	621a      	str	r2, [r3, #32]
}
 80060c8:	bf00      	nop
 80060ca:	371c      	adds	r7, #28
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr
 80060d4:	40010000 	.word	0x40010000
 80060d8:	40010400 	.word	0x40010400

080060dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060dc:	b480      	push	{r7}
 80060de:	b087      	sub	sp, #28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800610a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006112:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	021b      	lsls	r3, r3, #8
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	4313      	orrs	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006126:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	031b      	lsls	r3, r3, #12
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	4313      	orrs	r3, r2
 8006132:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a12      	ldr	r2, [pc, #72]	@ (8006180 <TIM_OC4_SetConfig+0xa4>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d003      	beq.n	8006144 <TIM_OC4_SetConfig+0x68>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a11      	ldr	r2, [pc, #68]	@ (8006184 <TIM_OC4_SetConfig+0xa8>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d109      	bne.n	8006158 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800614a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	019b      	lsls	r3, r3, #6
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	4313      	orrs	r3, r2
 8006156:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	621a      	str	r2, [r3, #32]
}
 8006172:	bf00      	nop
 8006174:	371c      	adds	r7, #28
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	40010000 	.word	0x40010000
 8006184:	40010400 	.word	0x40010400

08006188 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006188:	b480      	push	{r7}
 800618a:	b087      	sub	sp, #28
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	f023 0201 	bic.w	r2, r3, #1
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80061b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f023 030a 	bic.w	r3, r3, #10
 80061c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	621a      	str	r2, [r3, #32]
}
 80061da:	bf00      	nop
 80061dc:	371c      	adds	r7, #28
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b087      	sub	sp, #28
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	60f8      	str	r0, [r7, #12]
 80061ee:	60b9      	str	r1, [r7, #8]
 80061f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6a1b      	ldr	r3, [r3, #32]
 80061fc:	f023 0210 	bic.w	r2, r3, #16
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006210:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	031b      	lsls	r3, r3, #12
 8006216:	693a      	ldr	r2, [r7, #16]
 8006218:	4313      	orrs	r3, r2
 800621a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006222:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	011b      	lsls	r3, r3, #4
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	4313      	orrs	r3, r2
 800622c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	621a      	str	r2, [r3, #32]
}
 800623a:	bf00      	nop
 800623c:	371c      	adds	r7, #28
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006246:	b480      	push	{r7}
 8006248:	b085      	sub	sp, #20
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800625c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800625e:	683a      	ldr	r2, [r7, #0]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	4313      	orrs	r3, r2
 8006264:	f043 0307 	orr.w	r3, r3, #7
 8006268:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	609a      	str	r2, [r3, #8]
}
 8006270:	bf00      	nop
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800627c:	b480      	push	{r7}
 800627e:	b087      	sub	sp, #28
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
 8006288:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006296:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	021a      	lsls	r2, r3, #8
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	431a      	orrs	r2, r3
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	609a      	str	r2, [r3, #8]
}
 80062b0:	bf00      	nop
 80062b2:	371c      	adds	r7, #28
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062bc:	b480      	push	{r7}
 80062be:	b087      	sub	sp, #28
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f003 031f 	and.w	r3, r3, #31
 80062ce:	2201      	movs	r2, #1
 80062d0:	fa02 f303 	lsl.w	r3, r2, r3
 80062d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6a1a      	ldr	r2, [r3, #32]
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	43db      	mvns	r3, r3
 80062de:	401a      	ands	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6a1a      	ldr	r2, [r3, #32]
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	f003 031f 	and.w	r3, r3, #31
 80062ee:	6879      	ldr	r1, [r7, #4]
 80062f0:	fa01 f303 	lsl.w	r3, r1, r3
 80062f4:	431a      	orrs	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	621a      	str	r2, [r3, #32]
}
 80062fa:	bf00      	nop
 80062fc:	371c      	adds	r7, #28
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
	...

08006308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006318:	2b01      	cmp	r3, #1
 800631a:	d101      	bne.n	8006320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800631c:	2302      	movs	r3, #2
 800631e:	e05a      	b.n	80063d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2202      	movs	r2, #2
 800632c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006346:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	4313      	orrs	r3, r2
 8006350:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a21      	ldr	r2, [pc, #132]	@ (80063e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d022      	beq.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800636c:	d01d      	beq.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a1d      	ldr	r2, [pc, #116]	@ (80063e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d018      	beq.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a1b      	ldr	r2, [pc, #108]	@ (80063ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d013      	beq.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a1a      	ldr	r2, [pc, #104]	@ (80063f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d00e      	beq.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a18      	ldr	r2, [pc, #96]	@ (80063f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d009      	beq.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a17      	ldr	r2, [pc, #92]	@ (80063f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d004      	beq.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a15      	ldr	r2, [pc, #84]	@ (80063fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d10c      	bne.n	80063c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3714      	adds	r7, #20
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	40010000 	.word	0x40010000
 80063e8:	40000400 	.word	0x40000400
 80063ec:	40000800 	.word	0x40000800
 80063f0:	40000c00 	.word	0x40000c00
 80063f4:	40010400 	.word	0x40010400
 80063f8:	40014000 	.word	0x40014000
 80063fc:	40001800 	.word	0x40001800

08006400 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <siprintf>:
 8006428:	b40e      	push	{r1, r2, r3}
 800642a:	b500      	push	{lr}
 800642c:	b09c      	sub	sp, #112	@ 0x70
 800642e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006430:	9002      	str	r0, [sp, #8]
 8006432:	9006      	str	r0, [sp, #24]
 8006434:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006438:	4809      	ldr	r0, [pc, #36]	@ (8006460 <siprintf+0x38>)
 800643a:	9107      	str	r1, [sp, #28]
 800643c:	9104      	str	r1, [sp, #16]
 800643e:	4909      	ldr	r1, [pc, #36]	@ (8006464 <siprintf+0x3c>)
 8006440:	f853 2b04 	ldr.w	r2, [r3], #4
 8006444:	9105      	str	r1, [sp, #20]
 8006446:	6800      	ldr	r0, [r0, #0]
 8006448:	9301      	str	r3, [sp, #4]
 800644a:	a902      	add	r1, sp, #8
 800644c:	f000 f994 	bl	8006778 <_svfiprintf_r>
 8006450:	9b02      	ldr	r3, [sp, #8]
 8006452:	2200      	movs	r2, #0
 8006454:	701a      	strb	r2, [r3, #0]
 8006456:	b01c      	add	sp, #112	@ 0x70
 8006458:	f85d eb04 	ldr.w	lr, [sp], #4
 800645c:	b003      	add	sp, #12
 800645e:	4770      	bx	lr
 8006460:	20000020 	.word	0x20000020
 8006464:	ffff0208 	.word	0xffff0208

08006468 <memset>:
 8006468:	4402      	add	r2, r0
 800646a:	4603      	mov	r3, r0
 800646c:	4293      	cmp	r3, r2
 800646e:	d100      	bne.n	8006472 <memset+0xa>
 8006470:	4770      	bx	lr
 8006472:	f803 1b01 	strb.w	r1, [r3], #1
 8006476:	e7f9      	b.n	800646c <memset+0x4>

08006478 <__errno>:
 8006478:	4b01      	ldr	r3, [pc, #4]	@ (8006480 <__errno+0x8>)
 800647a:	6818      	ldr	r0, [r3, #0]
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	20000020 	.word	0x20000020

08006484 <__libc_init_array>:
 8006484:	b570      	push	{r4, r5, r6, lr}
 8006486:	4d0d      	ldr	r5, [pc, #52]	@ (80064bc <__libc_init_array+0x38>)
 8006488:	4c0d      	ldr	r4, [pc, #52]	@ (80064c0 <__libc_init_array+0x3c>)
 800648a:	1b64      	subs	r4, r4, r5
 800648c:	10a4      	asrs	r4, r4, #2
 800648e:	2600      	movs	r6, #0
 8006490:	42a6      	cmp	r6, r4
 8006492:	d109      	bne.n	80064a8 <__libc_init_array+0x24>
 8006494:	4d0b      	ldr	r5, [pc, #44]	@ (80064c4 <__libc_init_array+0x40>)
 8006496:	4c0c      	ldr	r4, [pc, #48]	@ (80064c8 <__libc_init_array+0x44>)
 8006498:	f000 fc66 	bl	8006d68 <_init>
 800649c:	1b64      	subs	r4, r4, r5
 800649e:	10a4      	asrs	r4, r4, #2
 80064a0:	2600      	movs	r6, #0
 80064a2:	42a6      	cmp	r6, r4
 80064a4:	d105      	bne.n	80064b2 <__libc_init_array+0x2e>
 80064a6:	bd70      	pop	{r4, r5, r6, pc}
 80064a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ac:	4798      	blx	r3
 80064ae:	3601      	adds	r6, #1
 80064b0:	e7ee      	b.n	8006490 <__libc_init_array+0xc>
 80064b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80064b6:	4798      	blx	r3
 80064b8:	3601      	adds	r6, #1
 80064ba:	e7f2      	b.n	80064a2 <__libc_init_array+0x1e>
 80064bc:	08006ff4 	.word	0x08006ff4
 80064c0:	08006ff4 	.word	0x08006ff4
 80064c4:	08006ff4 	.word	0x08006ff4
 80064c8:	08006ff8 	.word	0x08006ff8

080064cc <__retarget_lock_acquire_recursive>:
 80064cc:	4770      	bx	lr

080064ce <__retarget_lock_release_recursive>:
 80064ce:	4770      	bx	lr

080064d0 <_free_r>:
 80064d0:	b538      	push	{r3, r4, r5, lr}
 80064d2:	4605      	mov	r5, r0
 80064d4:	2900      	cmp	r1, #0
 80064d6:	d041      	beq.n	800655c <_free_r+0x8c>
 80064d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064dc:	1f0c      	subs	r4, r1, #4
 80064de:	2b00      	cmp	r3, #0
 80064e0:	bfb8      	it	lt
 80064e2:	18e4      	addlt	r4, r4, r3
 80064e4:	f000 f8e0 	bl	80066a8 <__malloc_lock>
 80064e8:	4a1d      	ldr	r2, [pc, #116]	@ (8006560 <_free_r+0x90>)
 80064ea:	6813      	ldr	r3, [r2, #0]
 80064ec:	b933      	cbnz	r3, 80064fc <_free_r+0x2c>
 80064ee:	6063      	str	r3, [r4, #4]
 80064f0:	6014      	str	r4, [r2, #0]
 80064f2:	4628      	mov	r0, r5
 80064f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064f8:	f000 b8dc 	b.w	80066b4 <__malloc_unlock>
 80064fc:	42a3      	cmp	r3, r4
 80064fe:	d908      	bls.n	8006512 <_free_r+0x42>
 8006500:	6820      	ldr	r0, [r4, #0]
 8006502:	1821      	adds	r1, r4, r0
 8006504:	428b      	cmp	r3, r1
 8006506:	bf01      	itttt	eq
 8006508:	6819      	ldreq	r1, [r3, #0]
 800650a:	685b      	ldreq	r3, [r3, #4]
 800650c:	1809      	addeq	r1, r1, r0
 800650e:	6021      	streq	r1, [r4, #0]
 8006510:	e7ed      	b.n	80064ee <_free_r+0x1e>
 8006512:	461a      	mov	r2, r3
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	b10b      	cbz	r3, 800651c <_free_r+0x4c>
 8006518:	42a3      	cmp	r3, r4
 800651a:	d9fa      	bls.n	8006512 <_free_r+0x42>
 800651c:	6811      	ldr	r1, [r2, #0]
 800651e:	1850      	adds	r0, r2, r1
 8006520:	42a0      	cmp	r0, r4
 8006522:	d10b      	bne.n	800653c <_free_r+0x6c>
 8006524:	6820      	ldr	r0, [r4, #0]
 8006526:	4401      	add	r1, r0
 8006528:	1850      	adds	r0, r2, r1
 800652a:	4283      	cmp	r3, r0
 800652c:	6011      	str	r1, [r2, #0]
 800652e:	d1e0      	bne.n	80064f2 <_free_r+0x22>
 8006530:	6818      	ldr	r0, [r3, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	6053      	str	r3, [r2, #4]
 8006536:	4408      	add	r0, r1
 8006538:	6010      	str	r0, [r2, #0]
 800653a:	e7da      	b.n	80064f2 <_free_r+0x22>
 800653c:	d902      	bls.n	8006544 <_free_r+0x74>
 800653e:	230c      	movs	r3, #12
 8006540:	602b      	str	r3, [r5, #0]
 8006542:	e7d6      	b.n	80064f2 <_free_r+0x22>
 8006544:	6820      	ldr	r0, [r4, #0]
 8006546:	1821      	adds	r1, r4, r0
 8006548:	428b      	cmp	r3, r1
 800654a:	bf04      	itt	eq
 800654c:	6819      	ldreq	r1, [r3, #0]
 800654e:	685b      	ldreq	r3, [r3, #4]
 8006550:	6063      	str	r3, [r4, #4]
 8006552:	bf04      	itt	eq
 8006554:	1809      	addeq	r1, r1, r0
 8006556:	6021      	streq	r1, [r4, #0]
 8006558:	6054      	str	r4, [r2, #4]
 800655a:	e7ca      	b.n	80064f2 <_free_r+0x22>
 800655c:	bd38      	pop	{r3, r4, r5, pc}
 800655e:	bf00      	nop
 8006560:	2000032c 	.word	0x2000032c

08006564 <sbrk_aligned>:
 8006564:	b570      	push	{r4, r5, r6, lr}
 8006566:	4e0f      	ldr	r6, [pc, #60]	@ (80065a4 <sbrk_aligned+0x40>)
 8006568:	460c      	mov	r4, r1
 800656a:	6831      	ldr	r1, [r6, #0]
 800656c:	4605      	mov	r5, r0
 800656e:	b911      	cbnz	r1, 8006576 <sbrk_aligned+0x12>
 8006570:	f000 fba6 	bl	8006cc0 <_sbrk_r>
 8006574:	6030      	str	r0, [r6, #0]
 8006576:	4621      	mov	r1, r4
 8006578:	4628      	mov	r0, r5
 800657a:	f000 fba1 	bl	8006cc0 <_sbrk_r>
 800657e:	1c43      	adds	r3, r0, #1
 8006580:	d103      	bne.n	800658a <sbrk_aligned+0x26>
 8006582:	f04f 34ff 	mov.w	r4, #4294967295
 8006586:	4620      	mov	r0, r4
 8006588:	bd70      	pop	{r4, r5, r6, pc}
 800658a:	1cc4      	adds	r4, r0, #3
 800658c:	f024 0403 	bic.w	r4, r4, #3
 8006590:	42a0      	cmp	r0, r4
 8006592:	d0f8      	beq.n	8006586 <sbrk_aligned+0x22>
 8006594:	1a21      	subs	r1, r4, r0
 8006596:	4628      	mov	r0, r5
 8006598:	f000 fb92 	bl	8006cc0 <_sbrk_r>
 800659c:	3001      	adds	r0, #1
 800659e:	d1f2      	bne.n	8006586 <sbrk_aligned+0x22>
 80065a0:	e7ef      	b.n	8006582 <sbrk_aligned+0x1e>
 80065a2:	bf00      	nop
 80065a4:	20000328 	.word	0x20000328

080065a8 <_malloc_r>:
 80065a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065ac:	1ccd      	adds	r5, r1, #3
 80065ae:	f025 0503 	bic.w	r5, r5, #3
 80065b2:	3508      	adds	r5, #8
 80065b4:	2d0c      	cmp	r5, #12
 80065b6:	bf38      	it	cc
 80065b8:	250c      	movcc	r5, #12
 80065ba:	2d00      	cmp	r5, #0
 80065bc:	4606      	mov	r6, r0
 80065be:	db01      	blt.n	80065c4 <_malloc_r+0x1c>
 80065c0:	42a9      	cmp	r1, r5
 80065c2:	d904      	bls.n	80065ce <_malloc_r+0x26>
 80065c4:	230c      	movs	r3, #12
 80065c6:	6033      	str	r3, [r6, #0]
 80065c8:	2000      	movs	r0, #0
 80065ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80066a4 <_malloc_r+0xfc>
 80065d2:	f000 f869 	bl	80066a8 <__malloc_lock>
 80065d6:	f8d8 3000 	ldr.w	r3, [r8]
 80065da:	461c      	mov	r4, r3
 80065dc:	bb44      	cbnz	r4, 8006630 <_malloc_r+0x88>
 80065de:	4629      	mov	r1, r5
 80065e0:	4630      	mov	r0, r6
 80065e2:	f7ff ffbf 	bl	8006564 <sbrk_aligned>
 80065e6:	1c43      	adds	r3, r0, #1
 80065e8:	4604      	mov	r4, r0
 80065ea:	d158      	bne.n	800669e <_malloc_r+0xf6>
 80065ec:	f8d8 4000 	ldr.w	r4, [r8]
 80065f0:	4627      	mov	r7, r4
 80065f2:	2f00      	cmp	r7, #0
 80065f4:	d143      	bne.n	800667e <_malloc_r+0xd6>
 80065f6:	2c00      	cmp	r4, #0
 80065f8:	d04b      	beq.n	8006692 <_malloc_r+0xea>
 80065fa:	6823      	ldr	r3, [r4, #0]
 80065fc:	4639      	mov	r1, r7
 80065fe:	4630      	mov	r0, r6
 8006600:	eb04 0903 	add.w	r9, r4, r3
 8006604:	f000 fb5c 	bl	8006cc0 <_sbrk_r>
 8006608:	4581      	cmp	r9, r0
 800660a:	d142      	bne.n	8006692 <_malloc_r+0xea>
 800660c:	6821      	ldr	r1, [r4, #0]
 800660e:	1a6d      	subs	r5, r5, r1
 8006610:	4629      	mov	r1, r5
 8006612:	4630      	mov	r0, r6
 8006614:	f7ff ffa6 	bl	8006564 <sbrk_aligned>
 8006618:	3001      	adds	r0, #1
 800661a:	d03a      	beq.n	8006692 <_malloc_r+0xea>
 800661c:	6823      	ldr	r3, [r4, #0]
 800661e:	442b      	add	r3, r5
 8006620:	6023      	str	r3, [r4, #0]
 8006622:	f8d8 3000 	ldr.w	r3, [r8]
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	bb62      	cbnz	r2, 8006684 <_malloc_r+0xdc>
 800662a:	f8c8 7000 	str.w	r7, [r8]
 800662e:	e00f      	b.n	8006650 <_malloc_r+0xa8>
 8006630:	6822      	ldr	r2, [r4, #0]
 8006632:	1b52      	subs	r2, r2, r5
 8006634:	d420      	bmi.n	8006678 <_malloc_r+0xd0>
 8006636:	2a0b      	cmp	r2, #11
 8006638:	d917      	bls.n	800666a <_malloc_r+0xc2>
 800663a:	1961      	adds	r1, r4, r5
 800663c:	42a3      	cmp	r3, r4
 800663e:	6025      	str	r5, [r4, #0]
 8006640:	bf18      	it	ne
 8006642:	6059      	strne	r1, [r3, #4]
 8006644:	6863      	ldr	r3, [r4, #4]
 8006646:	bf08      	it	eq
 8006648:	f8c8 1000 	streq.w	r1, [r8]
 800664c:	5162      	str	r2, [r4, r5]
 800664e:	604b      	str	r3, [r1, #4]
 8006650:	4630      	mov	r0, r6
 8006652:	f000 f82f 	bl	80066b4 <__malloc_unlock>
 8006656:	f104 000b 	add.w	r0, r4, #11
 800665a:	1d23      	adds	r3, r4, #4
 800665c:	f020 0007 	bic.w	r0, r0, #7
 8006660:	1ac2      	subs	r2, r0, r3
 8006662:	bf1c      	itt	ne
 8006664:	1a1b      	subne	r3, r3, r0
 8006666:	50a3      	strne	r3, [r4, r2]
 8006668:	e7af      	b.n	80065ca <_malloc_r+0x22>
 800666a:	6862      	ldr	r2, [r4, #4]
 800666c:	42a3      	cmp	r3, r4
 800666e:	bf0c      	ite	eq
 8006670:	f8c8 2000 	streq.w	r2, [r8]
 8006674:	605a      	strne	r2, [r3, #4]
 8006676:	e7eb      	b.n	8006650 <_malloc_r+0xa8>
 8006678:	4623      	mov	r3, r4
 800667a:	6864      	ldr	r4, [r4, #4]
 800667c:	e7ae      	b.n	80065dc <_malloc_r+0x34>
 800667e:	463c      	mov	r4, r7
 8006680:	687f      	ldr	r7, [r7, #4]
 8006682:	e7b6      	b.n	80065f2 <_malloc_r+0x4a>
 8006684:	461a      	mov	r2, r3
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	42a3      	cmp	r3, r4
 800668a:	d1fb      	bne.n	8006684 <_malloc_r+0xdc>
 800668c:	2300      	movs	r3, #0
 800668e:	6053      	str	r3, [r2, #4]
 8006690:	e7de      	b.n	8006650 <_malloc_r+0xa8>
 8006692:	230c      	movs	r3, #12
 8006694:	6033      	str	r3, [r6, #0]
 8006696:	4630      	mov	r0, r6
 8006698:	f000 f80c 	bl	80066b4 <__malloc_unlock>
 800669c:	e794      	b.n	80065c8 <_malloc_r+0x20>
 800669e:	6005      	str	r5, [r0, #0]
 80066a0:	e7d6      	b.n	8006650 <_malloc_r+0xa8>
 80066a2:	bf00      	nop
 80066a4:	2000032c 	.word	0x2000032c

080066a8 <__malloc_lock>:
 80066a8:	4801      	ldr	r0, [pc, #4]	@ (80066b0 <__malloc_lock+0x8>)
 80066aa:	f7ff bf0f 	b.w	80064cc <__retarget_lock_acquire_recursive>
 80066ae:	bf00      	nop
 80066b0:	20000324 	.word	0x20000324

080066b4 <__malloc_unlock>:
 80066b4:	4801      	ldr	r0, [pc, #4]	@ (80066bc <__malloc_unlock+0x8>)
 80066b6:	f7ff bf0a 	b.w	80064ce <__retarget_lock_release_recursive>
 80066ba:	bf00      	nop
 80066bc:	20000324 	.word	0x20000324

080066c0 <__ssputs_r>:
 80066c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066c4:	688e      	ldr	r6, [r1, #8]
 80066c6:	461f      	mov	r7, r3
 80066c8:	42be      	cmp	r6, r7
 80066ca:	680b      	ldr	r3, [r1, #0]
 80066cc:	4682      	mov	sl, r0
 80066ce:	460c      	mov	r4, r1
 80066d0:	4690      	mov	r8, r2
 80066d2:	d82d      	bhi.n	8006730 <__ssputs_r+0x70>
 80066d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80066d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80066dc:	d026      	beq.n	800672c <__ssputs_r+0x6c>
 80066de:	6965      	ldr	r5, [r4, #20]
 80066e0:	6909      	ldr	r1, [r1, #16]
 80066e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80066e6:	eba3 0901 	sub.w	r9, r3, r1
 80066ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80066ee:	1c7b      	adds	r3, r7, #1
 80066f0:	444b      	add	r3, r9
 80066f2:	106d      	asrs	r5, r5, #1
 80066f4:	429d      	cmp	r5, r3
 80066f6:	bf38      	it	cc
 80066f8:	461d      	movcc	r5, r3
 80066fa:	0553      	lsls	r3, r2, #21
 80066fc:	d527      	bpl.n	800674e <__ssputs_r+0x8e>
 80066fe:	4629      	mov	r1, r5
 8006700:	f7ff ff52 	bl	80065a8 <_malloc_r>
 8006704:	4606      	mov	r6, r0
 8006706:	b360      	cbz	r0, 8006762 <__ssputs_r+0xa2>
 8006708:	6921      	ldr	r1, [r4, #16]
 800670a:	464a      	mov	r2, r9
 800670c:	f000 fae8 	bl	8006ce0 <memcpy>
 8006710:	89a3      	ldrh	r3, [r4, #12]
 8006712:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006716:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800671a:	81a3      	strh	r3, [r4, #12]
 800671c:	6126      	str	r6, [r4, #16]
 800671e:	6165      	str	r5, [r4, #20]
 8006720:	444e      	add	r6, r9
 8006722:	eba5 0509 	sub.w	r5, r5, r9
 8006726:	6026      	str	r6, [r4, #0]
 8006728:	60a5      	str	r5, [r4, #8]
 800672a:	463e      	mov	r6, r7
 800672c:	42be      	cmp	r6, r7
 800672e:	d900      	bls.n	8006732 <__ssputs_r+0x72>
 8006730:	463e      	mov	r6, r7
 8006732:	6820      	ldr	r0, [r4, #0]
 8006734:	4632      	mov	r2, r6
 8006736:	4641      	mov	r1, r8
 8006738:	f000 faa8 	bl	8006c8c <memmove>
 800673c:	68a3      	ldr	r3, [r4, #8]
 800673e:	1b9b      	subs	r3, r3, r6
 8006740:	60a3      	str	r3, [r4, #8]
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	4433      	add	r3, r6
 8006746:	6023      	str	r3, [r4, #0]
 8006748:	2000      	movs	r0, #0
 800674a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800674e:	462a      	mov	r2, r5
 8006750:	f000 fad4 	bl	8006cfc <_realloc_r>
 8006754:	4606      	mov	r6, r0
 8006756:	2800      	cmp	r0, #0
 8006758:	d1e0      	bne.n	800671c <__ssputs_r+0x5c>
 800675a:	6921      	ldr	r1, [r4, #16]
 800675c:	4650      	mov	r0, sl
 800675e:	f7ff feb7 	bl	80064d0 <_free_r>
 8006762:	230c      	movs	r3, #12
 8006764:	f8ca 3000 	str.w	r3, [sl]
 8006768:	89a3      	ldrh	r3, [r4, #12]
 800676a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800676e:	81a3      	strh	r3, [r4, #12]
 8006770:	f04f 30ff 	mov.w	r0, #4294967295
 8006774:	e7e9      	b.n	800674a <__ssputs_r+0x8a>
	...

08006778 <_svfiprintf_r>:
 8006778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800677c:	4698      	mov	r8, r3
 800677e:	898b      	ldrh	r3, [r1, #12]
 8006780:	061b      	lsls	r3, r3, #24
 8006782:	b09d      	sub	sp, #116	@ 0x74
 8006784:	4607      	mov	r7, r0
 8006786:	460d      	mov	r5, r1
 8006788:	4614      	mov	r4, r2
 800678a:	d510      	bpl.n	80067ae <_svfiprintf_r+0x36>
 800678c:	690b      	ldr	r3, [r1, #16]
 800678e:	b973      	cbnz	r3, 80067ae <_svfiprintf_r+0x36>
 8006790:	2140      	movs	r1, #64	@ 0x40
 8006792:	f7ff ff09 	bl	80065a8 <_malloc_r>
 8006796:	6028      	str	r0, [r5, #0]
 8006798:	6128      	str	r0, [r5, #16]
 800679a:	b930      	cbnz	r0, 80067aa <_svfiprintf_r+0x32>
 800679c:	230c      	movs	r3, #12
 800679e:	603b      	str	r3, [r7, #0]
 80067a0:	f04f 30ff 	mov.w	r0, #4294967295
 80067a4:	b01d      	add	sp, #116	@ 0x74
 80067a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067aa:	2340      	movs	r3, #64	@ 0x40
 80067ac:	616b      	str	r3, [r5, #20]
 80067ae:	2300      	movs	r3, #0
 80067b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80067b2:	2320      	movs	r3, #32
 80067b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80067b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80067bc:	2330      	movs	r3, #48	@ 0x30
 80067be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800695c <_svfiprintf_r+0x1e4>
 80067c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80067c6:	f04f 0901 	mov.w	r9, #1
 80067ca:	4623      	mov	r3, r4
 80067cc:	469a      	mov	sl, r3
 80067ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067d2:	b10a      	cbz	r2, 80067d8 <_svfiprintf_r+0x60>
 80067d4:	2a25      	cmp	r2, #37	@ 0x25
 80067d6:	d1f9      	bne.n	80067cc <_svfiprintf_r+0x54>
 80067d8:	ebba 0b04 	subs.w	fp, sl, r4
 80067dc:	d00b      	beq.n	80067f6 <_svfiprintf_r+0x7e>
 80067de:	465b      	mov	r3, fp
 80067e0:	4622      	mov	r2, r4
 80067e2:	4629      	mov	r1, r5
 80067e4:	4638      	mov	r0, r7
 80067e6:	f7ff ff6b 	bl	80066c0 <__ssputs_r>
 80067ea:	3001      	adds	r0, #1
 80067ec:	f000 80a7 	beq.w	800693e <_svfiprintf_r+0x1c6>
 80067f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067f2:	445a      	add	r2, fp
 80067f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80067f6:	f89a 3000 	ldrb.w	r3, [sl]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	f000 809f 	beq.w	800693e <_svfiprintf_r+0x1c6>
 8006800:	2300      	movs	r3, #0
 8006802:	f04f 32ff 	mov.w	r2, #4294967295
 8006806:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800680a:	f10a 0a01 	add.w	sl, sl, #1
 800680e:	9304      	str	r3, [sp, #16]
 8006810:	9307      	str	r3, [sp, #28]
 8006812:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006816:	931a      	str	r3, [sp, #104]	@ 0x68
 8006818:	4654      	mov	r4, sl
 800681a:	2205      	movs	r2, #5
 800681c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006820:	484e      	ldr	r0, [pc, #312]	@ (800695c <_svfiprintf_r+0x1e4>)
 8006822:	f7f9 fcd5 	bl	80001d0 <memchr>
 8006826:	9a04      	ldr	r2, [sp, #16]
 8006828:	b9d8      	cbnz	r0, 8006862 <_svfiprintf_r+0xea>
 800682a:	06d0      	lsls	r0, r2, #27
 800682c:	bf44      	itt	mi
 800682e:	2320      	movmi	r3, #32
 8006830:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006834:	0711      	lsls	r1, r2, #28
 8006836:	bf44      	itt	mi
 8006838:	232b      	movmi	r3, #43	@ 0x2b
 800683a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800683e:	f89a 3000 	ldrb.w	r3, [sl]
 8006842:	2b2a      	cmp	r3, #42	@ 0x2a
 8006844:	d015      	beq.n	8006872 <_svfiprintf_r+0xfa>
 8006846:	9a07      	ldr	r2, [sp, #28]
 8006848:	4654      	mov	r4, sl
 800684a:	2000      	movs	r0, #0
 800684c:	f04f 0c0a 	mov.w	ip, #10
 8006850:	4621      	mov	r1, r4
 8006852:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006856:	3b30      	subs	r3, #48	@ 0x30
 8006858:	2b09      	cmp	r3, #9
 800685a:	d94b      	bls.n	80068f4 <_svfiprintf_r+0x17c>
 800685c:	b1b0      	cbz	r0, 800688c <_svfiprintf_r+0x114>
 800685e:	9207      	str	r2, [sp, #28]
 8006860:	e014      	b.n	800688c <_svfiprintf_r+0x114>
 8006862:	eba0 0308 	sub.w	r3, r0, r8
 8006866:	fa09 f303 	lsl.w	r3, r9, r3
 800686a:	4313      	orrs	r3, r2
 800686c:	9304      	str	r3, [sp, #16]
 800686e:	46a2      	mov	sl, r4
 8006870:	e7d2      	b.n	8006818 <_svfiprintf_r+0xa0>
 8006872:	9b03      	ldr	r3, [sp, #12]
 8006874:	1d19      	adds	r1, r3, #4
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	9103      	str	r1, [sp, #12]
 800687a:	2b00      	cmp	r3, #0
 800687c:	bfbb      	ittet	lt
 800687e:	425b      	neglt	r3, r3
 8006880:	f042 0202 	orrlt.w	r2, r2, #2
 8006884:	9307      	strge	r3, [sp, #28]
 8006886:	9307      	strlt	r3, [sp, #28]
 8006888:	bfb8      	it	lt
 800688a:	9204      	strlt	r2, [sp, #16]
 800688c:	7823      	ldrb	r3, [r4, #0]
 800688e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006890:	d10a      	bne.n	80068a8 <_svfiprintf_r+0x130>
 8006892:	7863      	ldrb	r3, [r4, #1]
 8006894:	2b2a      	cmp	r3, #42	@ 0x2a
 8006896:	d132      	bne.n	80068fe <_svfiprintf_r+0x186>
 8006898:	9b03      	ldr	r3, [sp, #12]
 800689a:	1d1a      	adds	r2, r3, #4
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	9203      	str	r2, [sp, #12]
 80068a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80068a4:	3402      	adds	r4, #2
 80068a6:	9305      	str	r3, [sp, #20]
 80068a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800696c <_svfiprintf_r+0x1f4>
 80068ac:	7821      	ldrb	r1, [r4, #0]
 80068ae:	2203      	movs	r2, #3
 80068b0:	4650      	mov	r0, sl
 80068b2:	f7f9 fc8d 	bl	80001d0 <memchr>
 80068b6:	b138      	cbz	r0, 80068c8 <_svfiprintf_r+0x150>
 80068b8:	9b04      	ldr	r3, [sp, #16]
 80068ba:	eba0 000a 	sub.w	r0, r0, sl
 80068be:	2240      	movs	r2, #64	@ 0x40
 80068c0:	4082      	lsls	r2, r0
 80068c2:	4313      	orrs	r3, r2
 80068c4:	3401      	adds	r4, #1
 80068c6:	9304      	str	r3, [sp, #16]
 80068c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068cc:	4824      	ldr	r0, [pc, #144]	@ (8006960 <_svfiprintf_r+0x1e8>)
 80068ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80068d2:	2206      	movs	r2, #6
 80068d4:	f7f9 fc7c 	bl	80001d0 <memchr>
 80068d8:	2800      	cmp	r0, #0
 80068da:	d036      	beq.n	800694a <_svfiprintf_r+0x1d2>
 80068dc:	4b21      	ldr	r3, [pc, #132]	@ (8006964 <_svfiprintf_r+0x1ec>)
 80068de:	bb1b      	cbnz	r3, 8006928 <_svfiprintf_r+0x1b0>
 80068e0:	9b03      	ldr	r3, [sp, #12]
 80068e2:	3307      	adds	r3, #7
 80068e4:	f023 0307 	bic.w	r3, r3, #7
 80068e8:	3308      	adds	r3, #8
 80068ea:	9303      	str	r3, [sp, #12]
 80068ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068ee:	4433      	add	r3, r6
 80068f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80068f2:	e76a      	b.n	80067ca <_svfiprintf_r+0x52>
 80068f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80068f8:	460c      	mov	r4, r1
 80068fa:	2001      	movs	r0, #1
 80068fc:	e7a8      	b.n	8006850 <_svfiprintf_r+0xd8>
 80068fe:	2300      	movs	r3, #0
 8006900:	3401      	adds	r4, #1
 8006902:	9305      	str	r3, [sp, #20]
 8006904:	4619      	mov	r1, r3
 8006906:	f04f 0c0a 	mov.w	ip, #10
 800690a:	4620      	mov	r0, r4
 800690c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006910:	3a30      	subs	r2, #48	@ 0x30
 8006912:	2a09      	cmp	r2, #9
 8006914:	d903      	bls.n	800691e <_svfiprintf_r+0x1a6>
 8006916:	2b00      	cmp	r3, #0
 8006918:	d0c6      	beq.n	80068a8 <_svfiprintf_r+0x130>
 800691a:	9105      	str	r1, [sp, #20]
 800691c:	e7c4      	b.n	80068a8 <_svfiprintf_r+0x130>
 800691e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006922:	4604      	mov	r4, r0
 8006924:	2301      	movs	r3, #1
 8006926:	e7f0      	b.n	800690a <_svfiprintf_r+0x192>
 8006928:	ab03      	add	r3, sp, #12
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	462a      	mov	r2, r5
 800692e:	4b0e      	ldr	r3, [pc, #56]	@ (8006968 <_svfiprintf_r+0x1f0>)
 8006930:	a904      	add	r1, sp, #16
 8006932:	4638      	mov	r0, r7
 8006934:	f3af 8000 	nop.w
 8006938:	1c42      	adds	r2, r0, #1
 800693a:	4606      	mov	r6, r0
 800693c:	d1d6      	bne.n	80068ec <_svfiprintf_r+0x174>
 800693e:	89ab      	ldrh	r3, [r5, #12]
 8006940:	065b      	lsls	r3, r3, #25
 8006942:	f53f af2d 	bmi.w	80067a0 <_svfiprintf_r+0x28>
 8006946:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006948:	e72c      	b.n	80067a4 <_svfiprintf_r+0x2c>
 800694a:	ab03      	add	r3, sp, #12
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	462a      	mov	r2, r5
 8006950:	4b05      	ldr	r3, [pc, #20]	@ (8006968 <_svfiprintf_r+0x1f0>)
 8006952:	a904      	add	r1, sp, #16
 8006954:	4638      	mov	r0, r7
 8006956:	f000 f879 	bl	8006a4c <_printf_i>
 800695a:	e7ed      	b.n	8006938 <_svfiprintf_r+0x1c0>
 800695c:	08006fb8 	.word	0x08006fb8
 8006960:	08006fc2 	.word	0x08006fc2
 8006964:	00000000 	.word	0x00000000
 8006968:	080066c1 	.word	0x080066c1
 800696c:	08006fbe 	.word	0x08006fbe

08006970 <_printf_common>:
 8006970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006974:	4616      	mov	r6, r2
 8006976:	4698      	mov	r8, r3
 8006978:	688a      	ldr	r2, [r1, #8]
 800697a:	690b      	ldr	r3, [r1, #16]
 800697c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006980:	4293      	cmp	r3, r2
 8006982:	bfb8      	it	lt
 8006984:	4613      	movlt	r3, r2
 8006986:	6033      	str	r3, [r6, #0]
 8006988:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800698c:	4607      	mov	r7, r0
 800698e:	460c      	mov	r4, r1
 8006990:	b10a      	cbz	r2, 8006996 <_printf_common+0x26>
 8006992:	3301      	adds	r3, #1
 8006994:	6033      	str	r3, [r6, #0]
 8006996:	6823      	ldr	r3, [r4, #0]
 8006998:	0699      	lsls	r1, r3, #26
 800699a:	bf42      	ittt	mi
 800699c:	6833      	ldrmi	r3, [r6, #0]
 800699e:	3302      	addmi	r3, #2
 80069a0:	6033      	strmi	r3, [r6, #0]
 80069a2:	6825      	ldr	r5, [r4, #0]
 80069a4:	f015 0506 	ands.w	r5, r5, #6
 80069a8:	d106      	bne.n	80069b8 <_printf_common+0x48>
 80069aa:	f104 0a19 	add.w	sl, r4, #25
 80069ae:	68e3      	ldr	r3, [r4, #12]
 80069b0:	6832      	ldr	r2, [r6, #0]
 80069b2:	1a9b      	subs	r3, r3, r2
 80069b4:	42ab      	cmp	r3, r5
 80069b6:	dc26      	bgt.n	8006a06 <_printf_common+0x96>
 80069b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80069bc:	6822      	ldr	r2, [r4, #0]
 80069be:	3b00      	subs	r3, #0
 80069c0:	bf18      	it	ne
 80069c2:	2301      	movne	r3, #1
 80069c4:	0692      	lsls	r2, r2, #26
 80069c6:	d42b      	bmi.n	8006a20 <_printf_common+0xb0>
 80069c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80069cc:	4641      	mov	r1, r8
 80069ce:	4638      	mov	r0, r7
 80069d0:	47c8      	blx	r9
 80069d2:	3001      	adds	r0, #1
 80069d4:	d01e      	beq.n	8006a14 <_printf_common+0xa4>
 80069d6:	6823      	ldr	r3, [r4, #0]
 80069d8:	6922      	ldr	r2, [r4, #16]
 80069da:	f003 0306 	and.w	r3, r3, #6
 80069de:	2b04      	cmp	r3, #4
 80069e0:	bf02      	ittt	eq
 80069e2:	68e5      	ldreq	r5, [r4, #12]
 80069e4:	6833      	ldreq	r3, [r6, #0]
 80069e6:	1aed      	subeq	r5, r5, r3
 80069e8:	68a3      	ldr	r3, [r4, #8]
 80069ea:	bf0c      	ite	eq
 80069ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069f0:	2500      	movne	r5, #0
 80069f2:	4293      	cmp	r3, r2
 80069f4:	bfc4      	itt	gt
 80069f6:	1a9b      	subgt	r3, r3, r2
 80069f8:	18ed      	addgt	r5, r5, r3
 80069fa:	2600      	movs	r6, #0
 80069fc:	341a      	adds	r4, #26
 80069fe:	42b5      	cmp	r5, r6
 8006a00:	d11a      	bne.n	8006a38 <_printf_common+0xc8>
 8006a02:	2000      	movs	r0, #0
 8006a04:	e008      	b.n	8006a18 <_printf_common+0xa8>
 8006a06:	2301      	movs	r3, #1
 8006a08:	4652      	mov	r2, sl
 8006a0a:	4641      	mov	r1, r8
 8006a0c:	4638      	mov	r0, r7
 8006a0e:	47c8      	blx	r9
 8006a10:	3001      	adds	r0, #1
 8006a12:	d103      	bne.n	8006a1c <_printf_common+0xac>
 8006a14:	f04f 30ff 	mov.w	r0, #4294967295
 8006a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a1c:	3501      	adds	r5, #1
 8006a1e:	e7c6      	b.n	80069ae <_printf_common+0x3e>
 8006a20:	18e1      	adds	r1, r4, r3
 8006a22:	1c5a      	adds	r2, r3, #1
 8006a24:	2030      	movs	r0, #48	@ 0x30
 8006a26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a2a:	4422      	add	r2, r4
 8006a2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a34:	3302      	adds	r3, #2
 8006a36:	e7c7      	b.n	80069c8 <_printf_common+0x58>
 8006a38:	2301      	movs	r3, #1
 8006a3a:	4622      	mov	r2, r4
 8006a3c:	4641      	mov	r1, r8
 8006a3e:	4638      	mov	r0, r7
 8006a40:	47c8      	blx	r9
 8006a42:	3001      	adds	r0, #1
 8006a44:	d0e6      	beq.n	8006a14 <_printf_common+0xa4>
 8006a46:	3601      	adds	r6, #1
 8006a48:	e7d9      	b.n	80069fe <_printf_common+0x8e>
	...

08006a4c <_printf_i>:
 8006a4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a50:	7e0f      	ldrb	r7, [r1, #24]
 8006a52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a54:	2f78      	cmp	r7, #120	@ 0x78
 8006a56:	4691      	mov	r9, r2
 8006a58:	4680      	mov	r8, r0
 8006a5a:	460c      	mov	r4, r1
 8006a5c:	469a      	mov	sl, r3
 8006a5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a62:	d807      	bhi.n	8006a74 <_printf_i+0x28>
 8006a64:	2f62      	cmp	r7, #98	@ 0x62
 8006a66:	d80a      	bhi.n	8006a7e <_printf_i+0x32>
 8006a68:	2f00      	cmp	r7, #0
 8006a6a:	f000 80d2 	beq.w	8006c12 <_printf_i+0x1c6>
 8006a6e:	2f58      	cmp	r7, #88	@ 0x58
 8006a70:	f000 80b9 	beq.w	8006be6 <_printf_i+0x19a>
 8006a74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a7c:	e03a      	b.n	8006af4 <_printf_i+0xa8>
 8006a7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a82:	2b15      	cmp	r3, #21
 8006a84:	d8f6      	bhi.n	8006a74 <_printf_i+0x28>
 8006a86:	a101      	add	r1, pc, #4	@ (adr r1, 8006a8c <_printf_i+0x40>)
 8006a88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a8c:	08006ae5 	.word	0x08006ae5
 8006a90:	08006af9 	.word	0x08006af9
 8006a94:	08006a75 	.word	0x08006a75
 8006a98:	08006a75 	.word	0x08006a75
 8006a9c:	08006a75 	.word	0x08006a75
 8006aa0:	08006a75 	.word	0x08006a75
 8006aa4:	08006af9 	.word	0x08006af9
 8006aa8:	08006a75 	.word	0x08006a75
 8006aac:	08006a75 	.word	0x08006a75
 8006ab0:	08006a75 	.word	0x08006a75
 8006ab4:	08006a75 	.word	0x08006a75
 8006ab8:	08006bf9 	.word	0x08006bf9
 8006abc:	08006b23 	.word	0x08006b23
 8006ac0:	08006bb3 	.word	0x08006bb3
 8006ac4:	08006a75 	.word	0x08006a75
 8006ac8:	08006a75 	.word	0x08006a75
 8006acc:	08006c1b 	.word	0x08006c1b
 8006ad0:	08006a75 	.word	0x08006a75
 8006ad4:	08006b23 	.word	0x08006b23
 8006ad8:	08006a75 	.word	0x08006a75
 8006adc:	08006a75 	.word	0x08006a75
 8006ae0:	08006bbb 	.word	0x08006bbb
 8006ae4:	6833      	ldr	r3, [r6, #0]
 8006ae6:	1d1a      	adds	r2, r3, #4
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	6032      	str	r2, [r6, #0]
 8006aec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006af0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006af4:	2301      	movs	r3, #1
 8006af6:	e09d      	b.n	8006c34 <_printf_i+0x1e8>
 8006af8:	6833      	ldr	r3, [r6, #0]
 8006afa:	6820      	ldr	r0, [r4, #0]
 8006afc:	1d19      	adds	r1, r3, #4
 8006afe:	6031      	str	r1, [r6, #0]
 8006b00:	0606      	lsls	r6, r0, #24
 8006b02:	d501      	bpl.n	8006b08 <_printf_i+0xbc>
 8006b04:	681d      	ldr	r5, [r3, #0]
 8006b06:	e003      	b.n	8006b10 <_printf_i+0xc4>
 8006b08:	0645      	lsls	r5, r0, #25
 8006b0a:	d5fb      	bpl.n	8006b04 <_printf_i+0xb8>
 8006b0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b10:	2d00      	cmp	r5, #0
 8006b12:	da03      	bge.n	8006b1c <_printf_i+0xd0>
 8006b14:	232d      	movs	r3, #45	@ 0x2d
 8006b16:	426d      	negs	r5, r5
 8006b18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b1c:	4859      	ldr	r0, [pc, #356]	@ (8006c84 <_printf_i+0x238>)
 8006b1e:	230a      	movs	r3, #10
 8006b20:	e011      	b.n	8006b46 <_printf_i+0xfa>
 8006b22:	6821      	ldr	r1, [r4, #0]
 8006b24:	6833      	ldr	r3, [r6, #0]
 8006b26:	0608      	lsls	r0, r1, #24
 8006b28:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b2c:	d402      	bmi.n	8006b34 <_printf_i+0xe8>
 8006b2e:	0649      	lsls	r1, r1, #25
 8006b30:	bf48      	it	mi
 8006b32:	b2ad      	uxthmi	r5, r5
 8006b34:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b36:	4853      	ldr	r0, [pc, #332]	@ (8006c84 <_printf_i+0x238>)
 8006b38:	6033      	str	r3, [r6, #0]
 8006b3a:	bf14      	ite	ne
 8006b3c:	230a      	movne	r3, #10
 8006b3e:	2308      	moveq	r3, #8
 8006b40:	2100      	movs	r1, #0
 8006b42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b46:	6866      	ldr	r6, [r4, #4]
 8006b48:	60a6      	str	r6, [r4, #8]
 8006b4a:	2e00      	cmp	r6, #0
 8006b4c:	bfa2      	ittt	ge
 8006b4e:	6821      	ldrge	r1, [r4, #0]
 8006b50:	f021 0104 	bicge.w	r1, r1, #4
 8006b54:	6021      	strge	r1, [r4, #0]
 8006b56:	b90d      	cbnz	r5, 8006b5c <_printf_i+0x110>
 8006b58:	2e00      	cmp	r6, #0
 8006b5a:	d04b      	beq.n	8006bf4 <_printf_i+0x1a8>
 8006b5c:	4616      	mov	r6, r2
 8006b5e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b62:	fb03 5711 	mls	r7, r3, r1, r5
 8006b66:	5dc7      	ldrb	r7, [r0, r7]
 8006b68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b6c:	462f      	mov	r7, r5
 8006b6e:	42bb      	cmp	r3, r7
 8006b70:	460d      	mov	r5, r1
 8006b72:	d9f4      	bls.n	8006b5e <_printf_i+0x112>
 8006b74:	2b08      	cmp	r3, #8
 8006b76:	d10b      	bne.n	8006b90 <_printf_i+0x144>
 8006b78:	6823      	ldr	r3, [r4, #0]
 8006b7a:	07df      	lsls	r7, r3, #31
 8006b7c:	d508      	bpl.n	8006b90 <_printf_i+0x144>
 8006b7e:	6923      	ldr	r3, [r4, #16]
 8006b80:	6861      	ldr	r1, [r4, #4]
 8006b82:	4299      	cmp	r1, r3
 8006b84:	bfde      	ittt	le
 8006b86:	2330      	movle	r3, #48	@ 0x30
 8006b88:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b90:	1b92      	subs	r2, r2, r6
 8006b92:	6122      	str	r2, [r4, #16]
 8006b94:	f8cd a000 	str.w	sl, [sp]
 8006b98:	464b      	mov	r3, r9
 8006b9a:	aa03      	add	r2, sp, #12
 8006b9c:	4621      	mov	r1, r4
 8006b9e:	4640      	mov	r0, r8
 8006ba0:	f7ff fee6 	bl	8006970 <_printf_common>
 8006ba4:	3001      	adds	r0, #1
 8006ba6:	d14a      	bne.n	8006c3e <_printf_i+0x1f2>
 8006ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bac:	b004      	add	sp, #16
 8006bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bb2:	6823      	ldr	r3, [r4, #0]
 8006bb4:	f043 0320 	orr.w	r3, r3, #32
 8006bb8:	6023      	str	r3, [r4, #0]
 8006bba:	4833      	ldr	r0, [pc, #204]	@ (8006c88 <_printf_i+0x23c>)
 8006bbc:	2778      	movs	r7, #120	@ 0x78
 8006bbe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006bc2:	6823      	ldr	r3, [r4, #0]
 8006bc4:	6831      	ldr	r1, [r6, #0]
 8006bc6:	061f      	lsls	r7, r3, #24
 8006bc8:	f851 5b04 	ldr.w	r5, [r1], #4
 8006bcc:	d402      	bmi.n	8006bd4 <_printf_i+0x188>
 8006bce:	065f      	lsls	r7, r3, #25
 8006bd0:	bf48      	it	mi
 8006bd2:	b2ad      	uxthmi	r5, r5
 8006bd4:	6031      	str	r1, [r6, #0]
 8006bd6:	07d9      	lsls	r1, r3, #31
 8006bd8:	bf44      	itt	mi
 8006bda:	f043 0320 	orrmi.w	r3, r3, #32
 8006bde:	6023      	strmi	r3, [r4, #0]
 8006be0:	b11d      	cbz	r5, 8006bea <_printf_i+0x19e>
 8006be2:	2310      	movs	r3, #16
 8006be4:	e7ac      	b.n	8006b40 <_printf_i+0xf4>
 8006be6:	4827      	ldr	r0, [pc, #156]	@ (8006c84 <_printf_i+0x238>)
 8006be8:	e7e9      	b.n	8006bbe <_printf_i+0x172>
 8006bea:	6823      	ldr	r3, [r4, #0]
 8006bec:	f023 0320 	bic.w	r3, r3, #32
 8006bf0:	6023      	str	r3, [r4, #0]
 8006bf2:	e7f6      	b.n	8006be2 <_printf_i+0x196>
 8006bf4:	4616      	mov	r6, r2
 8006bf6:	e7bd      	b.n	8006b74 <_printf_i+0x128>
 8006bf8:	6833      	ldr	r3, [r6, #0]
 8006bfa:	6825      	ldr	r5, [r4, #0]
 8006bfc:	6961      	ldr	r1, [r4, #20]
 8006bfe:	1d18      	adds	r0, r3, #4
 8006c00:	6030      	str	r0, [r6, #0]
 8006c02:	062e      	lsls	r6, r5, #24
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	d501      	bpl.n	8006c0c <_printf_i+0x1c0>
 8006c08:	6019      	str	r1, [r3, #0]
 8006c0a:	e002      	b.n	8006c12 <_printf_i+0x1c6>
 8006c0c:	0668      	lsls	r0, r5, #25
 8006c0e:	d5fb      	bpl.n	8006c08 <_printf_i+0x1bc>
 8006c10:	8019      	strh	r1, [r3, #0]
 8006c12:	2300      	movs	r3, #0
 8006c14:	6123      	str	r3, [r4, #16]
 8006c16:	4616      	mov	r6, r2
 8006c18:	e7bc      	b.n	8006b94 <_printf_i+0x148>
 8006c1a:	6833      	ldr	r3, [r6, #0]
 8006c1c:	1d1a      	adds	r2, r3, #4
 8006c1e:	6032      	str	r2, [r6, #0]
 8006c20:	681e      	ldr	r6, [r3, #0]
 8006c22:	6862      	ldr	r2, [r4, #4]
 8006c24:	2100      	movs	r1, #0
 8006c26:	4630      	mov	r0, r6
 8006c28:	f7f9 fad2 	bl	80001d0 <memchr>
 8006c2c:	b108      	cbz	r0, 8006c32 <_printf_i+0x1e6>
 8006c2e:	1b80      	subs	r0, r0, r6
 8006c30:	6060      	str	r0, [r4, #4]
 8006c32:	6863      	ldr	r3, [r4, #4]
 8006c34:	6123      	str	r3, [r4, #16]
 8006c36:	2300      	movs	r3, #0
 8006c38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c3c:	e7aa      	b.n	8006b94 <_printf_i+0x148>
 8006c3e:	6923      	ldr	r3, [r4, #16]
 8006c40:	4632      	mov	r2, r6
 8006c42:	4649      	mov	r1, r9
 8006c44:	4640      	mov	r0, r8
 8006c46:	47d0      	blx	sl
 8006c48:	3001      	adds	r0, #1
 8006c4a:	d0ad      	beq.n	8006ba8 <_printf_i+0x15c>
 8006c4c:	6823      	ldr	r3, [r4, #0]
 8006c4e:	079b      	lsls	r3, r3, #30
 8006c50:	d413      	bmi.n	8006c7a <_printf_i+0x22e>
 8006c52:	68e0      	ldr	r0, [r4, #12]
 8006c54:	9b03      	ldr	r3, [sp, #12]
 8006c56:	4298      	cmp	r0, r3
 8006c58:	bfb8      	it	lt
 8006c5a:	4618      	movlt	r0, r3
 8006c5c:	e7a6      	b.n	8006bac <_printf_i+0x160>
 8006c5e:	2301      	movs	r3, #1
 8006c60:	4632      	mov	r2, r6
 8006c62:	4649      	mov	r1, r9
 8006c64:	4640      	mov	r0, r8
 8006c66:	47d0      	blx	sl
 8006c68:	3001      	adds	r0, #1
 8006c6a:	d09d      	beq.n	8006ba8 <_printf_i+0x15c>
 8006c6c:	3501      	adds	r5, #1
 8006c6e:	68e3      	ldr	r3, [r4, #12]
 8006c70:	9903      	ldr	r1, [sp, #12]
 8006c72:	1a5b      	subs	r3, r3, r1
 8006c74:	42ab      	cmp	r3, r5
 8006c76:	dcf2      	bgt.n	8006c5e <_printf_i+0x212>
 8006c78:	e7eb      	b.n	8006c52 <_printf_i+0x206>
 8006c7a:	2500      	movs	r5, #0
 8006c7c:	f104 0619 	add.w	r6, r4, #25
 8006c80:	e7f5      	b.n	8006c6e <_printf_i+0x222>
 8006c82:	bf00      	nop
 8006c84:	08006fc9 	.word	0x08006fc9
 8006c88:	08006fda 	.word	0x08006fda

08006c8c <memmove>:
 8006c8c:	4288      	cmp	r0, r1
 8006c8e:	b510      	push	{r4, lr}
 8006c90:	eb01 0402 	add.w	r4, r1, r2
 8006c94:	d902      	bls.n	8006c9c <memmove+0x10>
 8006c96:	4284      	cmp	r4, r0
 8006c98:	4623      	mov	r3, r4
 8006c9a:	d807      	bhi.n	8006cac <memmove+0x20>
 8006c9c:	1e43      	subs	r3, r0, #1
 8006c9e:	42a1      	cmp	r1, r4
 8006ca0:	d008      	beq.n	8006cb4 <memmove+0x28>
 8006ca2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ca6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006caa:	e7f8      	b.n	8006c9e <memmove+0x12>
 8006cac:	4402      	add	r2, r0
 8006cae:	4601      	mov	r1, r0
 8006cb0:	428a      	cmp	r2, r1
 8006cb2:	d100      	bne.n	8006cb6 <memmove+0x2a>
 8006cb4:	bd10      	pop	{r4, pc}
 8006cb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006cba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006cbe:	e7f7      	b.n	8006cb0 <memmove+0x24>

08006cc0 <_sbrk_r>:
 8006cc0:	b538      	push	{r3, r4, r5, lr}
 8006cc2:	4d06      	ldr	r5, [pc, #24]	@ (8006cdc <_sbrk_r+0x1c>)
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	4604      	mov	r4, r0
 8006cc8:	4608      	mov	r0, r1
 8006cca:	602b      	str	r3, [r5, #0]
 8006ccc:	f7fc febc 	bl	8003a48 <_sbrk>
 8006cd0:	1c43      	adds	r3, r0, #1
 8006cd2:	d102      	bne.n	8006cda <_sbrk_r+0x1a>
 8006cd4:	682b      	ldr	r3, [r5, #0]
 8006cd6:	b103      	cbz	r3, 8006cda <_sbrk_r+0x1a>
 8006cd8:	6023      	str	r3, [r4, #0]
 8006cda:	bd38      	pop	{r3, r4, r5, pc}
 8006cdc:	20000320 	.word	0x20000320

08006ce0 <memcpy>:
 8006ce0:	440a      	add	r2, r1
 8006ce2:	4291      	cmp	r1, r2
 8006ce4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ce8:	d100      	bne.n	8006cec <memcpy+0xc>
 8006cea:	4770      	bx	lr
 8006cec:	b510      	push	{r4, lr}
 8006cee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cf6:	4291      	cmp	r1, r2
 8006cf8:	d1f9      	bne.n	8006cee <memcpy+0xe>
 8006cfa:	bd10      	pop	{r4, pc}

08006cfc <_realloc_r>:
 8006cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d00:	4680      	mov	r8, r0
 8006d02:	4615      	mov	r5, r2
 8006d04:	460c      	mov	r4, r1
 8006d06:	b921      	cbnz	r1, 8006d12 <_realloc_r+0x16>
 8006d08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d0c:	4611      	mov	r1, r2
 8006d0e:	f7ff bc4b 	b.w	80065a8 <_malloc_r>
 8006d12:	b92a      	cbnz	r2, 8006d20 <_realloc_r+0x24>
 8006d14:	f7ff fbdc 	bl	80064d0 <_free_r>
 8006d18:	2400      	movs	r4, #0
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d20:	f000 f81a 	bl	8006d58 <_malloc_usable_size_r>
 8006d24:	4285      	cmp	r5, r0
 8006d26:	4606      	mov	r6, r0
 8006d28:	d802      	bhi.n	8006d30 <_realloc_r+0x34>
 8006d2a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006d2e:	d8f4      	bhi.n	8006d1a <_realloc_r+0x1e>
 8006d30:	4629      	mov	r1, r5
 8006d32:	4640      	mov	r0, r8
 8006d34:	f7ff fc38 	bl	80065a8 <_malloc_r>
 8006d38:	4607      	mov	r7, r0
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	d0ec      	beq.n	8006d18 <_realloc_r+0x1c>
 8006d3e:	42b5      	cmp	r5, r6
 8006d40:	462a      	mov	r2, r5
 8006d42:	4621      	mov	r1, r4
 8006d44:	bf28      	it	cs
 8006d46:	4632      	movcs	r2, r6
 8006d48:	f7ff ffca 	bl	8006ce0 <memcpy>
 8006d4c:	4621      	mov	r1, r4
 8006d4e:	4640      	mov	r0, r8
 8006d50:	f7ff fbbe 	bl	80064d0 <_free_r>
 8006d54:	463c      	mov	r4, r7
 8006d56:	e7e0      	b.n	8006d1a <_realloc_r+0x1e>

08006d58 <_malloc_usable_size_r>:
 8006d58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d5c:	1f18      	subs	r0, r3, #4
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	bfbc      	itt	lt
 8006d62:	580b      	ldrlt	r3, [r1, r0]
 8006d64:	18c0      	addlt	r0, r0, r3
 8006d66:	4770      	bx	lr

08006d68 <_init>:
 8006d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6a:	bf00      	nop
 8006d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d6e:	bc08      	pop	{r3}
 8006d70:	469e      	mov	lr, r3
 8006d72:	4770      	bx	lr

08006d74 <_fini>:
 8006d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d76:	bf00      	nop
 8006d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d7a:	bc08      	pop	{r3}
 8006d7c:	469e      	mov	lr, r3
 8006d7e:	4770      	bx	lr
